<document>

<filing_date>
2019-01-11
</filing_date>

<publication_date>
2020-01-02
</publication_date>

<priority_date>
2018-06-27
</priority_date>

<ipc_classes>
G06F8/71,G06F8/77,G06Q10/06
</ipc_classes>

<assignee>
SOFTWARE.CO TECHNOLOGIES
</assignee>

<inventors>
STEVENS, BRETT MICHAEL
</inventors>

<docdb_family_id>
69008201
</docdb_family_id>

<title>
ADJUSTING DEVICE SETTINGS BASED UPON MONITORING SOURCE CODE DEVELOPMENT PROCESSES
</title>

<abstract>
Embodiments relate to analyzing developmental progress and productivity of users based upon monitored activity features, and inferring expected levels of productivity for future time intervals. By analyzing code check-ins submitted by a user over a time interval, as other features associated with user activities during the time interval, a metric indicating a level of quality or productivity for the time interval can be determined. Based upon the determined metrics for the time intervals, expected levels of productivity for the user can be inferred for future time intervals. In addition, tasks can be automatically performed to reduce an amount of impact on the productivity of the user during time intervals of expected high productivity, such as scheduling of tasks outside of the time intervals, adjusting certain settings of a user device, and/or the like.
</abstract>

<claims>
1. A method for automatically adjusting user device settings based upon expected user productivity, the method comprising: receiving information describing a plurality of code check-ins performed in a code repository; determining and storing a plurality of score values based on the plurality of code check-ins, each score value associated with a respective set of code check-ins of the plurality of code check-ins and indicative of a quality of code check-ins for the respective set of code check-ins; receiving information describing a new code check-in, the information describing whether the code checked in during the new code check-in represents original code or reworked code; responsive to determining that the new code check-in represents reworked code, identifying one or more previous code check-ins of the plurality of code check-ins associated with the reworked code; for each of the identified one or more previous code check-ins: identifying a set of code check-ins that includes the previous code check-in, adjusting the score for the identified set of code check-ins in which the adjusted score represents a reduced quality of code check-ins of the set compared to the score prior to the adjustment; configuring a user interface for displaying scores indicative of the quality of code check-ins performed for each of the plurality of sets of code check-ins; and identifying a future time interval based upon a first set of code check-ins of the plurality of code check-ins, wherein the score for the first set meets a threshold value; identifying a device of a particular user associated with the first set of code check-ins; and adjusting a setting of the identified device during the future time interval.
2. The method of claim 1, wherein a set of code check-ins represents code check-ins performed during a time interval.
3. The method of claim 1, wherein a set of code check-ins represents code check-ins performed by one of: the particular user, or a team of users including the particular user.
4. The method of claim 1, wherein a set of code check-ins represents code check-ins performed in a module being developed, wherein the repository stores code for a plurality of modules.
5. The method of claim 1, wherein the score for a set of code check-ins is determined by aggregating a measure of quality associated with each code check-in of the set.
6. The method of claim 5, wherein the measure of quality associated with a code check-in is directly related to an amount of code checked in during the code check-in.
7. The method of claim 5, wherein the measure of quality associated with a code check-in is adjusted based on a predetermined factor indicative of a complexity of a module in which the code is checked in.
8. The method of claim 1, wherein adjusting the score for the identified set of code check-ins comprises: adjusting a measure of quality for the previous code check-in to indicate a decrease in quality of the previous code check-in, wherein the size of adjustment of the measure of quality is determined based on the amount of code reworked in the new code check-in.
9. The method of claim 1, wherein the user interface is configured to show one or more geometric shapes for each set of code check-ins, each geometric shape representing an aggregate measure of quality of code check-ins belonging to the set.
10. The method of claim 9, wherein a geometric shape corresponding to a set of code check-ins displays an indication of the quality of code check-ins of the set of code check-ins, the indication of the quality of code check-ins adjusted based on subsequent rework performed on code associated with a code check-in.
11. The method of claim 9, wherein a geometric shape corresponding to a time interval displays an indication of the amount of rework performed on code associated with a code check-in.
12. The method of claim 9, wherein a geometric shape corresponding to a time interval displays an indication of the amount of code deleted from the code associated with a code check-in.
13. A computer-implemented system comprising: a computer processor; and a computer-readable storage medium storing computer program modules configured to execute on the computer processor, the computer program modules comprising instructions for: receiving information describing a plurality of code check-ins performed in a code repository; determining and storing a plurality of score values based on the plurality of code check-ins, each score value associated with a respective set of code check-ins of the plurality of code check-ins and indicative of a quality of code check-ins for the set of code check-ins; receiving information describing a new code check-in, the information describing whether the code checked in during the new code check-in represents original code or reworked code; responsive to determining that the new code check-in represents reworked code, identifying one or more previous code check-ins of the plurality of code check-ins associated with the reworked code; for each of the one or more previous code check-ins: identifying a set of code check-ins that includes the previous code check-in, adjusting the score for the identified set of code check-ins in which the adjusted score represents a reduced quality of code check-ins of the set compared to the score prior to the adjustment; configuring a user interface for displaying scores indicative of the quality of code check-ins performed for each of the plurality of sets of code check-ins; and identifying a future time interval based upon a first set of code check-ins of the plurality of code check-ins, wherein the score for the first set meets a threshold value; identifying a device of a particular user associated with the first set of code check-ins; and adjusting a setting of the identified device during the future time interval.
14. A computer program product having a computer-readable storage medium storing computer-executable code comprising instructions for: receiving information describing a plurality of code check-ins performed in a code repository; determining and storing a plurality of score values based on the plurality of code check-ins, each score value associated with a respective set of code check-ins of the plurality of code check-ins and indicative of a quality of code check-ins for the respective set of code check-ins; receiving information describing a new code check-in, the information describing whether the code checked in during the new code check-in represents original code or reworked code; responsive to determining that the new code check-in represents reworked code, identifying one or more previous code check-ins of the plurality of code check-ins associated with the reworked code; for each of the identified one or more previous code check-ins: identifying a set of code check-ins that includes the previous code check-in, adjusting the score for the identified set of code check-ins in which the adjusted score represents a reduced quality of code check-ins of the set compared to the score prior to the adjustment; configuring a user interface for displaying scores indicative of the quality of code check-ins performed for each of the plurality of sets of code check-ins; and identifying a future time interval based upon a first set of code check-ins of the plurality of code check-ins, wherein the score for the first set meets a threshold value; identifying a device of a particular user associated with the first set of code check-ins; and adjusting a setting of the identified device during the future time interval.
</claims>
</document>
