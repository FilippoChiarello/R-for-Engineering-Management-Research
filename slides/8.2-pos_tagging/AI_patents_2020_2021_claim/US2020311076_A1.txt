<document>

<filing_date>
2019-04-12
</filing_date>

<publication_date>
2020-10-01
</publication_date>

<priority_date>
2019-03-27
</priority_date>

<ipc_classes>
G06F16/2453,G06F16/2455,G06F16/901
</ipc_classes>

<assignee>
SAP
</assignee>

<inventors>
Song, Sang II
Lee, Jung Kook
</inventors>

<docdb_family_id>
72607768
</docdb_family_id>

<title>
DATABASE PARTITION PRUNING USING DEPENDENCY GRAPH
</title>

<abstract>
Provided is a system and method for pruning partitions from a database access operation based on a dependency graph. In one example, the method may include generating a dependency graph for a partition-wise operation, the dependency graph comprising nodes representing partition candidates and links between the nodes identifying dependencies of the partition candidates, receiving, at runtime, a database query comprising a partition identifier, identifying a partition candidate that can be excluded from processing the database query based on the partition identifier, pruning a second partition candidate based on a dependency in the dependency graph between the excluded partition candidate and the second partition candidate, and performing a database access for the database query based on the pruning.
</abstract>

<claims>
1. A computing system comprising: a storage configured to store a dependency graph for a partition-wise operation, the dependency graph comprising nodes representing partition candidates and links between the nodes identifying dependencies of the partition candidates; and a processor configured to receive a database query comprising a partition identifier, identify a partition candidate that can be excluded from processing the database query based on the partition identifier, prune a second partition candidate based on a dependency in the dependency graph between the excluded partition candidate and the second partition candidate, and perform a database access for the database query based on the pruning.
2. The computing system of claim 1, wherein the processor is configured to prune a second partition candidate having a node in the dependency graph that represents a join operation that is dependent on an output of the node corresponding to the excluded partition candidate.
3. The computing system of claim 2, wherein the processor is configured to prune a third partition candidate having a node in the dependency graph that represents a join operation that is dependent on an output of the node of the pruned second partition candidate.
4. The computing system of claim 2, wherein the processor is configured to prune a third partition candidate having a node in the dependency graph that provides an input to the node of the pruned second partition candidate.
5. The computing system of claim 1, wherein the processor is further configured to generate the dependency graph prior to runtime of the database access operation and prune the second partition candidate based on the dependency graph during execution.
6. The computing system of claim 1, wherein the dependency graph comprises a direct acyclic graph (DAG).
7. The computing system of claim 1, wherein the processor assigns each partition candidate a unique identifier and a respective node in the dependency graph.
8. The computing system of claim 1, wherein a partition candidate comprises an initial partition of table data from the database or a resulting partition generated based on a join operation of a pair partitions of table data.
9. A method comprising: generating a dependency graph for a partition-wise operation, the dependency graph comprising nodes representing partition candidates and links between the nodes identifying dependencies of the partition candidates; receiving a database query comprising a partition identifier; identifying a partition candidate that can be excluded from processing the database query based on the partition identifier; pruning a second partition candidate based on a dependency in the dependency graph between the excluded partition candidate and the second partition candidate; and performing a database access for the database query based on the pruning.
10. The method of claim 1, wherein the pruning comprises pruning a second partition candidate having a node in the dependency graph that represents a join operation that is dependent on an output of the node corresponding to the excluded partition candidate.
11. The method of claim 10, wherein the pruning comprises pruning a third partition candidate having a node in the dependency graph that represents a join operation that is dependent on an output of the node of the pruned second partition candidate.
12. The method of claim 10, wherein the pruning further comprises pruning a third partition candidate having a node in the dependency graph that provides an input to the node of the pruned second partition candidate.
13. The method of claim 9, wherein the generating the dependency graph is performed prior to runtime and the pruning is performed during execution.
14. The method of claim 9, wherein the dependency graph comprises a direct acyclic graph (DAG).
15. The method of claim 9, wherein the generating comprises assigning each partition candidate a unique identifier and a respective node in the dependency graph.
16. The method of claim 9, wherein a partition candidate comprises an initial partition of table data from the database or a resulting partition generated based on a join operation of a pair partitions of table data.
17. A non-transitory computer-readable medium storing instructions which when executed by a processor cause a computer to perform a method comprising: generating a dependency graph for a partition-wise operation, the dependency graph comprising nodes representing partition candidates and links between the nodes identifying dependencies of the partition candidates; receiving a database query comprising a partition identifier; identifying a partition candidate that can be excluded from processing the database query based on the partition identifier; pruning a second partition candidate based on a dependency in the dependency graph between the excluded partition candidate and the second partition candidate; and performing a database access for the database query based on the pruning.
18. The non-transitory computer-readable medium of claim 17, wherein the pruning comprises pruning a second partition candidate having a node in the dependency graph that represents a join operation that is dependent on an output of the node corresponding to the excluded partition candidate.
19. The non-transitory computer-readable medium of claim 18, wherein the pruning comprises pruning a third partition candidate having a node in the dependency graph that represents a join operation that is dependent on an output of the node of the pruned second partition candidate.
20. The non-transitory computer-readable medium of claim 18, wherein the pruning further comprises pruning a third partition candidate having a node in the dependency graph that provides an input to the node of the pruned second partition candidate.
</claims>
</document>
