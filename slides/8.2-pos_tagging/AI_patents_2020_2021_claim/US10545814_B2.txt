<document>

<filing_date>
2019-02-19
</filing_date>

<publication_date>
2020-01-28
</publication_date>

<priority_date>
2017-07-25
</priority_date>

<ipc_classes>
B60R16/023,B60W50/02,B60W50/04,G06F11/07,G06F11/14,G06F11/16,G06F11/36,G06F12/06,G06F16/188,G06F21/57,G06F8/60,G06F8/65,G06F8/654,G06F8/656,G06F8/658,G06F8/71,G06F9/4401,G06F9/445,G06N20/00,H04L29/06,H04L29/08
</ipc_classes>

<assignee>
AURORA LABS
</assignee>

<inventors>
FOX, ZOHAR
</inventors>

<docdb_family_id>
65037881
</docdb_family_id>

<title>
Detecting anomalies online using histograms of controller processing activity
</title>

<abstract>
Disclosed embodiments relate to identifying Electronic Control Unit (ECU) anomalies in a vehicle. Operations may include monitoring, in the vehicle, data representing real-time processing activity of the ECU; accessing, in the vehicle, historical data relating to processing activity of the ECU, the historical data representing expected processing activity of the ECU; comparing, in the vehicle, the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the ECU; and implementing a control action for the ECU when the at least one anomaly is identified.
</abstract>

<claims>
1. A non-transitory computer readable medium including instructions that, when executed by at least one processor, cause the at least one processor to perform operations for identifying controller anomalies, comprising: monitoring data representing real-time processing activity of a first controller; accessing historical data relating to processing activity of the first controller, the historical data representing expected processing activity of the first controller; comparing the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the first controller; and implementing a control action for the first controller when the at least one anomaly is identified, wherein the control action includes issuing a prompt to adjust the first controller from executing a first version of controller software to a second version of controller software; wherein the historical data comprises data from a second controller different from the first controller, and wherein the first version of controller software includes position-independent code, and the first controller is configured to utilize the position-independent code without requiring modification to the first version of controller software.
2. The non-transitory computer readable medium of claim 1, wherein the first version of controller software is mapped to a plurality of functional units, and the first controller is configured to utilize a virtual file system (VFS) to manage and track one or more versions of each of the plurality of functional units.
3. The non-transitory computer readable medium of claim 2, wherein adjusting the first controller from executing the first version of controller software to the second version of controller software comprises: updating memory addresses of one or more functional units managed by the VFS based on a delta file corresponding to the second version of controller software.
4. The non-transitory computer readable medium of claim 1, wherein the second controller is comparable to the first controller.
5. The non-transitory computer readable medium of claim 4, wherein the second controller is comparable based on control functions of the first and second controllers.
6. The non-transitory computer readable medium of claim 4, wherein the second controller is comparable based on rules associated with the first version of controller software and rules associated with the second version of controller software.
7. The non-transitory computer readable medium of claim 1, wherein the historical data comprises a machine-learning model or map.
8. The non-transitory computer readable medium of claim 1, wherein the control action comprises activating a safe mode for the first controller.
9. The non-transitory computer readable medium of claim 1, the operations further comprising: determining a controller operation to have run more than a threshold number of times within a pre-determined time interval.
10. A system for identifying controller anomalies, the system comprising: one or more processors; and one or more memories having instructions that, when executed by the one or more processors, cause the one or more processors to perform the operations of: monitoring data representing real-time processing activity of a first controller; accessing historical data relating to processing activity of the first controller, the historical data representing expected processing activity of the first controller; comparing the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the first controller; and implementing a control action for the first controller when the at least one anomaly is identified, wherein the control action includes issuing a prompt to adjust the first controller from executing a first version of controller software to a second version of controller software; wherein the historical data comprises data from a second controller different from the first controller, and wherein the first version of controller software includes position-independent code, and the first controller is configured to utilize the position-independent code without requiring modification to the first version of controller software.
11. The system of claim 10, wherein the first version of controller software is mapped to a plurality of functional units, and the first controller is configured to utilize a virtual file system (VFS) to manage and track one or more versions of each of the plurality of functional units.
12. The system of claim 11, wherein adjusting the first controller from executing the first version of controller software to the second version of controller software comprises: updating memory addresses of one or more functional units managed by the VFS based on a delta file corresponding to the second version of controller software.
13. The system of claim 10, wherein the second controller is comparable to the first controller.
14. The system of claim 13, wherein the second controller is comparable based on control functions of the first and second controllers.
15. The system of claim 13, wherein the second controller is comparable based on rules associated with the first version of controller software and rules associated with the second version of controller software.
16. The system of claim 10, wherein the historical data comprises a machine-learning model or map.
17. The system of claim 10, the operations further comprising: determining a controller operation to have run more than a threshold number of times within a pre-determined time interval.
18. A computer-implemented method for identifying controller anomalies, the method comprising: monitoring data representing real-time processing activity of a first controller; accessing historical data relating to processing activity of the first controller, the historical data representing expected processing activity of the first controller; comparing the real-time processing activity data with the historical data to identify at least one anomaly in the real-time processing activity of the first controller; and implementing a control action for the first controller when the at least one anomaly is identified, wherein the control action includes issuing a prompt to adjust the first controller from executing a first version of controller software to a second version of controller software; wherein the historical data comprises data from a second controller different from the first controller, and wherein the first version of controller software includes position-independent code, and the first controller is configured to utilize the position-independent code without requiring modification to the first version of controller software.
</claims>
</document>
