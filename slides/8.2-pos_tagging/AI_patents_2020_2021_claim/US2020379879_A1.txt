<document>

<filing_date>
2020-05-27
</filing_date>

<publication_date>
2020-12-03
</publication_date>

<priority_date>
2019-05-28
</priority_date>

<ipc_classes>
G06F11/34,G06F11/36,G06F21/57,G06F8/41,G06F8/71,G06N20/00
</ipc_classes>

<assignee>
APIIRO LTD.
</assignee>

<inventors>
PLOTNIK, Idan
ELDAR, Yonatan
</inventors>

<docdb_family_id>
73551555
</docdb_family_id>

<title>
SYSTEM, METHOD, AND PROCESS FOR CONTINUOUSLY IDENTIFYING MATERIAL CHANGES IN APPLICATIONS AND CALCULATING RISK
</title>

<abstract>
A method and system for risk assessment of an application or infrastructure, includes: Code Intelligence Analyzers that scan historic code commits in code repositories of the application or infrastructure as well as real-time code commits; a Developer Behavior Profiler builds a behavior profile for each developer of the application, based, at least on the historic and real-time code commits and relevant issues in Issue Tracking Systems; and a Spacetime Graph, being a multidimensional graph detailing a current state of the application or infrastructure and a history of the code commits of the application or infrastructure, as determined by the Code Intelligence Analyzers and the Developer Behavior Profiler.
</abstract>

<claims>
1. A system for risk assessment of an application or infrastructure, comprising: Code Intelligence Analyzers that scan historic code commits in code repositories of the application or infrastructure as well as real-time code commits; a Developer Behavior Profiler builds a behavior profile for each developer of the application, based, at least on said historic and real-time code commits and relevant issues in Issue Tracking Systems; and a Spacetime Graph, being a multidimensional graph detailing a current state of the application or infrastructure and a history of said code commits of the application or infrastructure, as determined by said Code Intelligence Analyzers and said Developer Behavior Profiler.
2. The system of claim 1, further comprising: Material Changes Detectors configured to detect material changes in said historic and real-time code commits of the application or infrastructure using AI or machine learning and said behavior profiles to identify said material changes that might affect security and compliance posture of the application or infrastructure.
3. The system of claim 2, further comprising: a Risk Engine configured to calculate a risk for each of said material changes, said risk calculated based on identification of at least one of Technical, Behavioral and Process-related risk factors.
4. The system of claim 3, further comprising: a Prioritization Engine configured to prioritize for use by a security architect, said material changes based on said calculated risk.
5. The system of claim 4, further comprising: an Adaptive Code Governance Engine configured to issue a Governance rule including adaptive code governance rules that dictate which detected changes are said material changes, and what said risk is attributed to said material changes.
6. The system of claim 5, further comprising a Risk-Based Workflow Engine configured to trigger a specific workflow as a result of said adaptive code governance rule being issued, said specific workflow includes at least one of creating a ticket in an external issue-tracking system and suggesting a code change in a Source Control System.
7. The system of claim 1, wherein said spacetime graph is multidimensional and includes at least: (a) a Contextual Code Patterns dimension, including insights as to patterns, commonalities and similarities within said repository and between said repository and other repositories resulting from AI or Machine Learning analysis of said code commits and assembly of a control-flow graph for at least said code repository, (b) a Security and Compliance Controls dimension, including contextually identified security and compliance controls, (c) a Developer Behavior Analysis dimension, including said behavior profiles of said developers, and (d) a Material Changes dimension including changes that might affect the application or infrastructure.
8. The method of claim 7, wherein said spacetime graph also describes all historical states of the application or infrastructure.
9. The method of claim 7, wherein said Contextual Code Patterns dimension further includes a control-flow graph across multiple source control systems.
10. A method for risk assessment of an application or infrastructure, comprising: scanning historic code commits in code repositories of the application or infrastructure as well as real-time code commits using Code Intelligence Analyzers; building behavior profiles for each developer based on at least said scanning of said historic and real-time code commits; and generating a spacetime graph detailing a current state of the application or infrastructure and a history of said code commits of the application or infrastructure based on said scanning and said behavior profiles.
11. The method of claim 10, further comprising: detecting material changes in said historic and real-time code commits of the application or infrastructure using AI or machine learning and said behavior profiles to identify said material changes that might affect security of the application or infrastructure.
12. The method of claim 11, further comprising: calculating a risk for each of said material changes, said risk calculated based on identification of at least one of Technical, Behavioral and Process-related risk factors.
13. The method of claim 12, further comprising: prioritizing, for use by a security architect, said material changes based on said calculated risk.
14. The method of claim 13, further comprising: issuing a Governance rule including adaptive code governance rules that dictate which detected changes are said material changes, and what said risk is attributed to said material changes.
15. The method of claim 14, further comprising triggering a specific workflow as a result of said adaptive code governance rule being issued, said specific workflow includes at least one of creating a ticket in an external issue-tracking system and suggesting a code change in a Source Control System.
16. The method of claim 10, wherein said spacetime graph is multidimensional and includes at least: (a) a Contextual Code Patterns dimension, including insights as to patterns, commonalities and similarities within said repository and between said repository and other repositories resulting from AI or Machine Learning analysis of said code commits and assembly of a control-flow graph for at least said code repository, (b) a Security and Compliance Controls dimension, including contextually identified security and compliance controls, (c) a Developer Behavior Analysis dimension, including said behavior profiles of said developers, and (d) a Material Changes dimension including changes that might affect the application or infrastructure.
17. The method of claim 16, wherein said spacetime graph also describes all historical states of the application or infrastructure.
18. The method of claim 16, wherein said Contextual Code Patterns dimension further includes a control-flow graph across multiple source control systems.
</claims>
</document>
