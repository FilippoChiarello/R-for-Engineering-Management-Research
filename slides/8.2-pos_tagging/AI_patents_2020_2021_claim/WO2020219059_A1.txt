<document>

<filing_date>
2019-04-25
</filing_date>

<publication_date>
2020-10-29
</publication_date>

<priority_date>
2019-04-25
</priority_date>

<ipc_classes>
G06F8/38,G06F8/41,G06F8/75,G06F9/451
</ipc_classes>

<assignee>
GOOGLE
</assignee>

<inventors>
RICHARDSON, Leland
JAZDZEWSKI, Chuck Paul
SPROCH, James Richard
</inventors>

<docdb_family_id>
66857980
</docdb_family_id>

<title>
STATIC RECONCILLIATION OF APPLICATION VIEW HIERARCHIES
</title>

<abstract>
A system is described that performs static reconciliation for rendering a graphical user interface (GUI) of an application. The system compiles source code associated with the GUI of an application into rendering instructions for rendering a view hierarchy of the GUI. The view hierarchy defines graphical components of the GUI, and the rendering instructions include initial rendering instructions for rendering the graphical components during an initial rendering of the GUI, and update rendering instructions for rendering a subset of the graphical components during subsequent renderings of the GUI. The system may automatically assign a respective key to one or more of the subset of graphical components, where the update rendering instructions for rendering each of the one or more of the subset of graphical components are uniquely identifiable according to the respective key. The system executes the rendering instructions to update the graphical components identified by the respective key.
</abstract>

<claims>
1. A method for performing static reconciliation for rendering a graphical user interface of an application, the method comprising:
receiving, by at least one processor, source code associated with the graphical user interface of an application;
compiling the source code into a plurality of rendering instructions for rendering a view hierarchy of the graphical user interface, wherein the view hierarchy defines graphical components of the graphical user interface, and wherein the plurality of rendering instructions include:
a set of initial rendering instructions for rendering the graphical components, during an initial rendering of the graphical user interface; and
a set of update rendering instructions for rendering a subset of the graphical components, during subsequent renderings of the graphical user interface, and
automatically assigning, during compilation of the source code, a respective key to one or more of the subset of graphical components, wherein the set of update rendering instructions for rendering each of the one or more of the subset of graphical components are uniquely identifiable according to the respective key; and
executing the plurality of rendering instructions to update the one or more of the subset of graphical components identified by the respective key.
2. The method of claim 1, wherein executing the plurality of rendering instructions comprises:
after executing the set of initial rendering instructions during an initial rendering of the graphical user interface:
during each subsequent rendering of the graphical user interface, refraining from executing the set of initial rendering instructions and executing the set of update rendering instructions to update the one or more of the subset of graphical components identified by the respective key.
3. The method of any combination of claims 1 and 2, wherein compiling the plurality of rendering instructions comprises:
identifying a set of dynamic objects from the source code that include one or more dynamic attributes; and
identifying a set of static objects from the source code that do not include any dynamic attributes,
wherein the set of initial rendering instructions include instructions for rendering both the set of dynamic objects and the set of static objects, and
wherein the set of update rendering instructions include instructions for rendering the set of dynamic objects but not the set of static objects.
4. The method of any combination of claims 1-3, wherein compiling the plurality of rendering instructions further comprises:
determining whether any of the graphical components are duplicated in the graphical user interface;
automatically assigning the respective key to each of the graphical components that is duplicated in the graphical user interface,
wherein respective rendering instructions from the plurality of rendering instructions for each graphical component that is duplicated in the graphical user interface are uniquely identifiable according to the respective key.
5. The method of claim 4, further comprises:
generating the respective key assigned to each graphical component that is duplicated in the graphical user interface based on a position from within the source code where the dynamic graphical component is referenced.
6. The method of claim 5, wherein the position comprises a respective position of a first byte where the plurality of rendering instructions for each of the graphical component resides within the source code.
7. The method of any combination of claims 1-6, wherein the plurality of rendering instructions comprise in-line rendering instructions compiled into machine-readable code.
8. A computing system comprising at least one processor configured to perform any one of the methods of claims 1-7.
9. A system comprising means for performing any one of the methods of claims 1-7.
10. A computer-readable storage medium comprising instructions that, when executed, cause at least one processor to perform any one of the methods of claims 1-7.
</claims>
</document>
