<document>

<filing_date>
2017-11-15
</filing_date>

<publication_date>
2020-12-29
</publication_date>

<priority_date>
2016-11-29
</priority_date>

<ipc_classes>
G06N3/04,G06N3/063,G06N3/08
</ipc_classes>

<assignee>
MELLANOX TECHNOLOGIES
</assignee>

<inventors>
ANKER, TAL
LEVI, DOTAN
MARKUS, OHAD
</inventors>

<docdb_family_id>
62190894
</docdb_family_id>

<title>
Accelerated convolution in convolutional neural networks
</title>

<abstract>
Described embodiments include a system that includes one or more buffers and circuitry. The circuitry is configured to process a plurality of input values, by identifying each of the input values that is not zero-valued, and, for each value of the identified input values, computing respective products of coefficients of a kernel with the value and storing at least some of the respective products in the buffers. The circuitry is further configured to compute a plurality of output values, by retrieving respective sets of stored values from the buffers, at least some of the retrieved sets including one or more of the products, and summing the retrieved sets. The circuitry is further configured to output the computed output values. Other embodiments are also described.
</abstract>

<claims>
1. A system, comprising: one or more buffers; and circuitry, configured to: process a plurality of input values, by: identifying each of the input values that is not zero-valued, and for each value of the identified input values, computing respective products of coefficients of a kernel with the value, and storing at least some of the respective products in the buffers, compute a plurality of output values, by: retrieving respective sets of stored values from the buffers, at least some of the retrieved sets including one or more of the products, and summing the retrieved sets, and output the computed output values, wherein the circuitry is configured to output at least some of the computed output values before processing all of the input values.
2. The system according to claim 1, wherein the circuitry is configured to, in response to a given one of the input values being zero-valued, store a plurality of zeros in the buffers, without multiplying the given one of the input values by any of the coefficients.
3. The system according to claim 2, further comprising an oscillator configured to clock the circuitry, wherein the circuitry comprises: zero-comparison circuitry, configured to, during a given clock cycle of the oscillator: compare a subset of the input values to zero, and based on the comparing, identify, in the subset, one or more zero-valued input values, and one or more non-zero-valued input values; and multiplier circuitry, configured to, during the given clock cycle, multiply each of the non-zero-valued input values by the coefficients, without multiplying any of the zero-valued input values by any of the coefficients.
4. The system according to claim 1, wherein each buffer of the buffers corresponds to a different respective coefficient of the coefficients, and wherein the circuitry is configured to store each product of the at least some of the respective products in the buffer corresponding to the coefficient from which the product was computed.
5. The system according to claim 4, wherein a number of elements in each of the buffers is less than a number of the output values, and wherein the circuitry is configured to, in storing the at least some of the respective products for one or more of the input values, overwrite other products that were previously stored by the circuitry.
6. The system according to claim 4, further comprising an oscillator configured to clock the circuitry, wherein the circuitry comprises accumulator circuitry configured to, during a given clock cycle of the oscillator: retrieve at least one of the sets of stored values from the buffers, by retrieving each of the stored values that is stored at a particular index of a respective one of the buffers, and compute at least one of the output values, by summing the retrieved one of the sets.
7. The system according to claim 1, wherein each of the input values is derived from an output of a rectified linear unit (ReLU).
8. The system according to claim 1, further comprising a processor configured to perform a machine-learned inference task based on the output values.
9. The system according to claim 8, wherein the inference task includes an object-recognition task.
10. A method, comprising: using circuitry, processing a plurality of input values, by: identifying each of the input values that is not zero-valued, and for each value of the identified input values, computing respective products of coefficients of a kernel with the value, and storing at least some of the respective products in one or more buffers; computing a plurality of output values, by: retrieving respective sets of stored values from the buffers, at least some of the retrieved sets including one or more of the products, and summing the retrieved sets; and outputting the computed output values, wherein outputting the computed output values comprises outputting at least some of the computed output values before processing all of the input values.
11. The method according to claim 10, further comprising, in response to a given one of the input values being zero-valued, storing a plurality of zeros in the buffers, without multiplying the given one of the input values by any of the coefficients.
12. The method according to claim 11, wherein an oscillator clocks the circuitry, and wherein processing the input values comprises, during a given clock cycle of the oscillator: comparing a subset of the input values to zero; based on the comparing, identifying, in the subset, one or more zero-valued input values, and one or more non-zero-valued input values; and multiplying each of the non-zero-valued input values by the coefficients, without multiplying any of the zero-valued input values by any of the coefficients.
13. The method according to claim 10, wherein each buffer of the buffers corresponds to a different respective coefficient of the coefficients, and wherein storing the at least some of the respective products in the buffers comprises storing each product of the at least some of the respective products in the buffer corresponding to the coefficient from which the product was computed.
14. The method according to claim 13, wherein a number of elements in each of the buffers is less than a number of the input values, and wherein storing the at least some of the respective products, for one or more of the input values, comprises overwriting other products that were previously stored by the circuitry.
15. The method according to claim 13, wherein an oscillator clocks the circuitry, and wherein computing the output values comprises, during a given clock cycle of the oscillator: retrieving at least one of the sets of stored values from the buffers, by retrieving each of the stored values that is stored at a particular index of a respective one of the buffers, and computing at least one of the output values, by summing the retrieved one of the sets.
16. The method according to claim 10, wherein each of the input values is derived from an output of a rectified linear unit (ReLU).
17. The method according to claim 10, further comprising performing a machine-learned inference task based on the output values.
18. The method according to claim 17, wherein performing the inference task comprises recognizing an object in an image.
</claims>
</document>
