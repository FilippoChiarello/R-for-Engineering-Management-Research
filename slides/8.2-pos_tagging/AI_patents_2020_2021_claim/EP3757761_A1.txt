<document>

<filing_date>
2020-03-25
</filing_date>

<publication_date>
2020-12-30
</publication_date>

<priority_date>
2019-06-27
</priority_date>

<ipc_classes>
G06F8/41,G06N20/00,G06N5/04
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
GOTTSCHLICH, Justin
HERR, Adam
BOURGES-SEVENIER, Mikael
GERSTMANN, Derek
SHARMA, Sridhar
</inventors>

<docdb_family_id>
68237933
</docdb_family_id>

<title>
METHODS AND APPARATUS FOR INTENTIONAL PROGRAMMING FOR HETEROGENEOUS SYSTEMS
</title>

<abstract>
Methods, apparatus, systems and articles of manufacture are disclosed for intentional programming for heterogeneous systems. An example apparatus includes a code lifter to identify annotated code corresponding to an algorithm to be executed on the heterogeneous system based on an identifier being associated with the annotated code, and convert the annotated code in the first representation to intermediate code in a second representation by identifying the intermediate code as having a first algorithmic intent that corresponds to a second algorithmic intent of the annotated code, a domain specific language (DSL) generator to translate the intermediate code in the second representation to DSL code in a third representation when the first algorithmic intent matches the second algorithmic intent, the third representation corresponding to a DSL representation, and a code replacer to invoke a compiler to generate an executable including variant binaries based on the DSL code.
</abstract>

<claims>
1. An apparatus for intentional programming for a heterogeneous system, the apparatus comprising: a code lifter to: identify annotated code corresponding to an algorithm to be executed on the heterogeneous system based on an identifier being associated with the annotated code, the annotated code in a first representation; and convert the annotated code in the first representation to intermediate code in a second representation by identifying the intermediate code as having a first algorithmic intent that corresponds to a second algorithmic intent of the annotated code; a domain specific language (DSL) generator to translate the intermediate code in the second representation to DSL code in a third representation when the first algorithmic intent matches the second algorithmic intent, the third representation corresponding to a DSL representation; and a code replacer to invoke a compiler to generate an executable including variant binaries based on the DSL code, each of the variant binaries to invoke a respective one of processing elements of the heterogeneous system to execute a workload based on the algorithm.
2. The apparatus of claim 1, wherein the identifier is an imperative programming language compiler extension and the first representation is an imperative programming language representation.
3. The apparatus of claim 1, wherein the executable includes a runtime scheduler, and the code replacer is to replace the annotated code in application code with a function call to the runtime scheduler to invoke a variant binary to be loaded onto one or more of the processing elements of the heterogeneous system to execute the workload.
4. The apparatus of any one of claims 1-3, further including: a metadata generator to generate scheduling metadata corresponding to a power profile of the heterogeneous system; a compilation auto-scheduler to generate a schedule based on the scheduling metadata for the processing elements of the heterogeneous system, the processing elements including at least a first processing element and a second processing element; a variant compiler to compile variant binaries based on the schedule, each of the variant binaries associated with the algorithm in the DSL, the variant binaries including a first variant binary corresponding to the first processing element and a second variant binary corresponding to the second processing element; and an application compiler to compile the executable to include a runtime scheduler to select one or more of the variant binaries to execute the workload based on the schedule.
5. The apparatus of claim 1, further including: a feedback interface to obtain a performance characteristic of the heterogeneous system from the executable, the performance characteristic associated with the processing elements of the heterogeneous system executing the workload at a first runtime, the executable executing according to a function designating successful execution of the executable on the heterogeneous system, the processing elements including a first processing element and a second processing element; and a performance analyzer to: determine a performance delta based on the performance characteristic and the function; and prior to a second runtime, adjust, using a machine learning model, a cost model of the first processing element based on the performance delta.
6. The apparatus of claim 5, wherein the cost model is a first cost model, and further including a cost model learner, prior to the second runtime, by using a neural network, adjust a second cost model of the second processing element based on the performance delta.
7. The apparatus of claim 6, wherein the performance analyzer is to determine the performance delta by determining a difference between performance achieved at the first runtime and performance as defined by the function designating successful execution of the executable on the heterogeneous system.
8. A method for intentional programming for a heterogeneous system, the method comprising: identifying annotated code corresponding to an algorithm to be executed on the heterogeneous system based on an identifier being associated with the annotated code, the annotated code in a first representation; converting the annotated code in the first representation to intermediate code in a second representation by identifying the intermediate code as having a first algorithmic intent that corresponds to a second algorithmic intent of the annotated code; translating the intermediate code in the second representation to domain specific language (DSL) code in a third representation when the first algorithmic intent matches the second algorithmic intent, the third representation corresponding to a DSL representation; and invoking a compiler to generate an executable including variant binaries based on the DSL code, each of the variant binaries to invoke a respective one of processing elements of the heterogeneous system to execute a workload based on the algorithm.
9. The method of claim 8, wherein the identifier is an imperative programming language compiler extension and the first representation is an imperative programming language representation.
10. The method of claim 8, wherein the executable includes a runtime scheduler, and further including replacing the annotated code in application code with a function call to the runtime scheduler to invoke a variant binary to be loaded onto one of the processing elements of the heterogeneous system to execute the workload.
11. The method of claim 8, further including: generating scheduling metadata corresponding to a power profile of the heterogeneous system; generating a schedule based on the scheduling metadata for the processing elements of the heterogeneous system, the processing elements including at least a first processing element and a second processing element; compiling variant binaries based on the schedule, each of the variant binaries associated with the algorithm in the DSL, the variant binaries including a first variant binary corresponding to the first processing element and a second variant binary corresponding to the second processing element; and compiling the executable to include a runtime scheduler to select one or more of the variant binaries to execute the workload based on the schedule.
12. The method of any one of claims 8-11, further including: obtaining a performance characteristic of the heterogeneous system from the executable, the performance characteristic associated with the processing elements of the heterogeneous system executing the workload at a first runtime, the executable executing according to a function designating successful execution of the executable on the heterogeneous system, the processing elements including a first processing element and a second processing element; and determining a performance delta based on the performance characteristic and the function; and prior to a second runtime, adjusting, using a machine learning model, a cost model of the first processing element based on the performance delta.
13. The method of claim 12, wherein the cost model is a first cost model, and further including, prior to the second runtime, by using a neural network, adjusting a second cost model of the second processing element based on the performance delta.
14. The method of claim 13, wherein determining the performance delta includes determining a difference between performance achieved at the first runtime and performance as defined by the function designating successful execution of the executable on the heterogeneous system.
15. At least one computer readable medium comprising instructions that, when executed, cause at least one processor to perform the method of any one of claims 8-14.
</claims>
</document>
