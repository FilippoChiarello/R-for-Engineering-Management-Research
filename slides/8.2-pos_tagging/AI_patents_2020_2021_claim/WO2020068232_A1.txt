<document>

<filing_date>
2019-06-28
</filing_date>

<publication_date>
2020-04-02
</publication_date>

<priority_date>
2018-09-30
</priority_date>

<ipc_classes>
G06F16/2453
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
CHAVAN, HARSHADA
FAN, ZHIWEI
HALVERSON, ALAN
SEN, RATHIJIT
</inventors>

<docdb_family_id>
67470639
</docdb_family_id>

<title>
METHODS FOR AUTOMATIC SELECTION OF DEGREES OF PARALLELISM FOR EFFICIENT EXECUTION OF QUERIES IN A DATABASE SYSTEM
</title>

<abstract>
Methods for automatic selection of degrees of parallelism for efficient execution of queries in a database system are performed by systems and devices. An incoming query associated with a query system is received and features of the incoming query are determined. A system state of the query system and a set of executing queries are also determined, along with a query state of each executing query in the set. At runtime of the incoming query, allocation of a degree of parallelism for executing the query is determined by calculating different possible execution times for the incoming query at least partially concurrently with the set of executing queries. Execution times are calculated for different parallel thread options and based on query features, system state, or query states of executing queries. The execution of the incoming query is initialized with the parallel thread option corresponding to a specific execution completion time.
</abstract>

<claims>
1. A system, comprising:
a processing system that includes one or more processors; and
a memory configured to store program code to be executed by the processing system, the program code configured to:
receive an incoming query associated with a database of a query system; determine at least one feature of the incoming query;
determine a system state of the query system;
determine a set of executing queries being executed by the query system and a query state of each executing query in the set;
calculate a plurality of execution times for executing the incoming query at least partially concurrently with the set of executing queries, the plurality of execution times being calculated according to ones of a set of parallel thread options and based at least on the at least one feature of the query or the system state; and
initialize execution of the incoming query, against the database, with a number of processing threads that is at least based on the query state of each executing query in the set and one of the set of parallel thread options having an execution time of the execution times that corresponds to a time of completion attribute.
2. The system of claim 1, wherein the time of completion attribute is an earliest time of completion.
3. The system of claim 1, wherein the query state of each executing query in the set respectively comprises one or more of indicia of work remaining before completion, indicia of work completed since its execution, or a number of threads utilized, for an associated executing query.
4. The system of claim 1, wherein the system state includes at least one of:
a processing thread attribute that includes at least one of a total number of processing threads or a currently available number of processing threads;
an input/output (I/O) attribute that includes a measure of data throughput for the query system or the database; or
a memory attribute that includes an availability measure of a buffer cache.
5. The system of claim 4, wherein the system further comprises at least one of a dynamic management view or a performance monitor, each of which is configured to determine at least a portion of one or more of the processing thread attribute, the I/O attribute, or the memory attribute.
6. The system of claim 1, wherein the at least one feature of the incoming query is obtained from a query plan and includes a query cost or operator level details.
7. The system of claim 1, wherein the program code includes an execution predictor and a parallelism selector;
the execution predictor configured to calculate the plurality of execution times based at least on a machine-learning model that utilizes vectorized query features from a query plan of the incoming query; and
the parallelism selector configured to determine the one of the set of parallel thread options according to an analytical model that utilizes a degree of parallelism from the query state of each executing query in the set.
8. A computer-implemented method, comprising:
receiving an incoming query associated with a database of a query system;
determining a set of executing queries being executed by the query system and a query state of each executing query in the set;
calculating execution times for executing the incoming query at least partially concurrently with the set of executing queries, the execution times being calculated according to ones of a set of parallel thread options; and
initializing execution of the incoming query, against the database, with a number of processing threads that is at least based on the query state of each executing query in the set and one of the set of parallel thread options having an execution time of the execution times that corresponds to a time of completion attribute.
9. The computer-implemented method of claim 8, wherein the time of completion attribute is an earliest time of completion.
10. The computer-implemented method of claim 8, wherein the query state of each executing query in the set respectively comprises one or more of indicia of work remaining before completion or a number of threads utilized.
11. The computer-implemented method of claim 8, wherein the at least one feature of the incoming query is obtained from a query plan and includes a query cost or operator level details.
12. The computer-implemented method of claim 8, the method further comprising: determining at least one feature of the incoming query; and
determining a system state of the query system; wherein the plurality of execution times is also based at least on the at least one feature of the incoming query and the system state of the query system.
13. The computer-implemented method of claim 12, wherein the system state includes at least one of:
a processing thread attribute that includes at least one of a total number of processing threads or a currently available number of processing threads;
an input/output (I/O) attribute that includes a measure of data throughput for the query system or the database; or
a memory attribute that includes an availability measure of a buffer cache.
14. The computer-implemented method of claim 8, wherein the set of executing queries includes at least one executing query each having a corresponding other one of the parallel thread options; and
wherein the number of processing threads for the incoming query is proportional to another number of processing threads for the at least one executing query and is based at least on the one of the set of parallel thread options and each of the corresponding other one of the parallel thread options.
15. A computer program product that includes a computer-readable medium having computer program logic recorded thereon, comprising:
computer program logic for enabling a processor to perform any of the computerimplemented methods of claims 8-14.
</claims>
</document>
