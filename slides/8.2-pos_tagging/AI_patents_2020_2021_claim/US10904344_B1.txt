<document>

<filing_date>
2017-09-26
</filing_date>

<publication_date>
2021-01-26
</publication_date>

<priority_date>
2017-09-26
</priority_date>

<ipc_classes>
G06N20/00,H04L12/911,H04L29/08
</ipc_classes>

<assignee>
CHARLES FINKELSTEIN CONSULTING
</assignee>

<inventors>
FINKELSTEIN, CHARLES
FINKELSTEIN, ETHAN
SINGH, INDER
</inventors>

<docdb_family_id>
74190905
</docdb_family_id>

<title>
Robotic cloud computing services arbitration using orchestrator of orchestrators
</title>

<abstract>
A system and method for robotically arbitrating cloud computing services utilizes resource parameters, tolerance values, and client system requirements to configure a meta-orchestrator to select a validated compatible service from a service resource pool and employ an orchestrator to migrate a client system to the selected service and utilize block chain technology for logging transactions, storing metadata and data.
</abstract>

<claims>
1. A method for robotically arbitrating cloud computing services comprising: receiving a plurality of resource parameters, a tolerance value and client system requirements with a meta-orchestrator; translating the plurality of resource parameters, the tolerance value and the client system requirements into a selection signal with a translator, the translator: transmitting the plurality of resource parameters to an encoder to associate the plurality of resource parameters to attributes of services in a service resource pool; configuring a compatibility test harness with the client system requirements to validate the services against the client system requirements and generate a multiplexed service signal; and applying the tolerance value to a signal filter to filter the multiplexed service signal into the selection signal; applying the selection signal to a selector to select at least one service from the service resource pool and configure the meta-orchestrator to migrate data and applications of a client system from a first service to a second, different service, the first service managed by a first orchestrator and the second service managed by a second, different orchestrator; the meta-orchestrator controlling a plurality of orchestrators; the meta-orchestrator deactivating the first orchestrator of the plurality of orchestrators and activating the second orchestrator of the plurality of orchestrators in response to the selection signal; the meta-orchestrator applying a function map to configure a universal adapter as a container of the client system, to generate a virtual interface between the client system and the second service via the second orchestrator.
2. The method of claim 1 wherein the selection signal is routed to a user interface and the user interface is controlled to generate a manual control signal to operate the meta-orchestrator.
3. The method of claim 1 wherein the meta-orchestrator applies policy based orchestration to initiate a de-provisioning of memory and compute resources of the first service.
4. The method of claim 1 wherein the plurality of resource parameters, and the tolerance value are received from a user interface.
5. The method of claim 1 wherein at least one of the plurality of resource parameters are discovered from the client system through machine learning.
6. The method of claim 1 wherein machine learning is applied to the translator and the compatibility test harness to generate the selection signal.
7. The method of claim 1 wherein the virtual interface further comprises a mapping layer wherein a mapping function is applied to connect the client system to the second service.
8. The method of claim 1 wherein the client system and the services further comprise multiple network architecture tiers.
9. The method of claim 1 wherein a logger logs integrity verification data to a blockchain, the integrity verification data further comprising metadata, encrypted or unencrypted data, or a checksum.
</claims>
</document>
