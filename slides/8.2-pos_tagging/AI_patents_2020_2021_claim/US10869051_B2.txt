<document>

<filing_date>
2019-09-12
</filing_date>

<publication_date>
2020-12-15
</publication_date>

<priority_date>
2017-08-22
</priority_date>

<ipc_classes>
H04N19/117,H04N19/137,H04N19/176,H04N19/182,H04N19/44
</ipc_classes>

<assignee>
PANASONIC INTELLECTUAL PROPERTY
</assignee>

<inventors>
LIM, CHONG SOON
NISHI TAKAHIRO
TOMA TADAMASA
ABE, KIYOFUMI
TEO, HAN BOON
SUN, HAI WEI
KANOH, RYUICHI
LIAO, RU LING
SHASHIDHAR, SUGHOSH PAVAN
LI, JING YA
</inventors>

<docdb_family_id>
65439065
</docdb_family_id>

<title>
Image decoder and image decoding method capable of boundary smoothing operation between triangle partitions
</title>

<abstract>
An image decoder includes circuitry and a memory, wherein the circuitry, in operation, performs a boundary smoothing operation along a boundary between a first partition having a triangular shape and a second partition having a triangular shape that are split from an image block. The boundary smoothing operation includes: first-predicting first values of a set of pixels of the first partition along the boundary, using a first motion vector for the first partition; second-predicting second values of the set of pixels of the first partition along the boundary, using a second motion vector for the second partition; weighting the first values and the second values; and decoding the first partition using the weighted first values and the weighted second values.
</abstract>

<claims>
1. An image decoder comprising: circuitry; and a memory coupled to the circuitry; wherein the circuitry, in operation, performs a boundary smoothing operation along a boundary between a first partition having a triangular shape and a second partition having a triangular shape that are split from an image block, the boundary smoothing operation including: first-predicting first values of a set of pixels of the first partition along the boundary, using a first motion vector for the first partition; second-predicting second values of the set of pixels of the first partition along the boundary, using a second motion vector for the second partition; weighting the first values and the second values; and decoding the first partition using the weighted first values and the weighted second values, wherein a number of pixels in a row or in a column in the set of pixels is two or more, and two or more weights applied to the first values of the two or more pixels increase along a row in the set of pixels in a first direction, and two or more weights applied to the second values of the two or more pixels do not increase along the row in the set of pixels in the first direction.
2. The decoder of claim 1, wherein the number of pixels in a row or in a column in the set of pixels is an integer.
3. The decoder of claim 2, wherein the number of pixels in a row or in a column in the set of pixels is four.
4. The decoder of claim 2, wherein the number of pixels in a row or in a column in the set of pixels is five.
5. The decoder of claim 1, wherein the two or more weights applied to the first values and the two or more weights applied to the second values of the two or more pixels are non-zero.
6. The decoder of claim 1 wherein the two or more weights applied to the second values decrease along the row in the set of pixels in the first direction.
7. The decoder of claim 1, wherein the two or more weights applied to the first values increase along a column in the set of pixels in a second direction.
8. The decoder of claim 7, wherein the two or more weights applied to the second values of the two or more pixels do not increase along the column in the set of pixels in the second direction.
9. The decoder of claim 8, wherein the two or more weights applied to the second values decrease along the column in the set of pixels in the second direction.
10. An image decoder comprising: an entropy decoder which, in operation, receives and decodes an encoded bitstream to obtain quantized transform coefficients, an inverse quantizer and transformer which, in operation, inverse quantizes the quantized transform coefficients to obtain transform coefficients and inverse transform the transform coefficients to obtain residuals, an adder which, in operation, adds the residuals outputted from the inverse quantizer and transformer and predictions outputted from a prediction controller to reconstruct blocks, and the prediction controller coupled to an inter predictor, an intra predictor, and a memory, wherein the inter predictor, in operation, generates a prediction of a current block based on a reference block in a decoded reference picture and the intra predictor, in operation, generates a prediction of a current block based on an decoded reference block in a current picture, wherein the image decoder, in operation, performs a boundary smoothing operation along a boundary between a first partition having a triangular shape and a second partition having a triangular shape that are split from an image block, the boundary smoothing operation including: first-predicting first values of a set of pixels of the first partition along the boundary, using a first motion vector for the first partition; second-predicting second values of the set of pixels of the first partition along the boundary, using a second motion vector for the second partition; weighting the first values and the second values; and decoding the first partition using the weighted first values and the weighted second values, wherein a number of pixels in a row or in a column in the set of pixels is two or more, and two or more weights applied to the first values of the two or more pixels increase along a row in the set of pixels in a first direction, and two or more weights applied to the second values of the two or more pixels do not increase along the row in the set of pixels in the first direction.
11. The decoder of claim 10, wherein the number of pixels in a row or in a column in the set of pixels is four.
12. The decoder of claim 10, wherein the two or more weights applied to the first values increase along a column in the set of pixels in a second direction.
13. The decoder of claim 12, wherein the two or more weights applied to the second values of the two or more pixels decrease along the column in the set of pixels in the second direction.
14. An image decoding method of performing a boundary smoothing operation along a boundary between a first partition having a triangular shape and a second partition having a triangular shape that are split from an image block, the method comprising: first-predicting first values of a set of pixels of the first partition along the boundary, using a first motion vector for the first partition; second-predicting second values of the set of pixels of the first partition along the boundary, using a second motion vector for the second partition; weighting the first values and the second values; and decoding the first partition using the weighted first values and the weighted second values, wherein a number of pixels in a row or in a column in the set of pixels is two or more, and two or more weights applied to the first values of the two or more pixels increase along a row in the set of pixels in a first direction, and two or more weights applied to the second values of the two or more pixels do not increase along the row in the set of pixels in the first direction.
15. The method of claim 14, wherein the number of pixels in a row or in a column in the set of pixels is an integer.
16. The method of claim 15, wherein the number of pixels in a row or in a column in the set of pixels is four.
17. The method of claim 14, wherein the two or more weights applied to the first values increase along a column in the set of pixels in a second direction.
18. The method of claim 17, wherein the two or more weights applied to the second values of the two or more pixels do not increase along the column in the set of pixels in the second direction.
19. The method of claim 14, wherein the number of pixels in a row or in a column in the set of pixels is four.
20. The method of claim 14, wherein the number of pixels in a row or in a column in the set of pixels is five.
</claims>
</document>
