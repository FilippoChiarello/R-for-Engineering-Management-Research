<document>

<filing_date>
2020-03-24
</filing_date>

<publication_date>
2020-12-30
</publication_date>

<priority_date>
2019-06-29
</priority_date>

<ipc_classes>
G06F9/38
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
ROZAS, CARLOS
NUZMAN, JOSEPH
YANOVER, IGOR
GABOR, Ron
BASAK, Abhishek
ALAMELDEEN, Alaa
ZOU, Xiang
Liu, Fangfei
MCKEEN, Francis
</inventors>

<docdb_family_id>
69960348
</docdb_family_id>

<title>
HARDWARE LOAD HARDENING FOR SPECULATIVE SIDE-CHANNEL ATTACKS
</title>

<abstract>
Embodiments of methods and apparatuses for hardware load hardening are disclosed. In an embodiment, a processor includes safe logic, data forwarding hardware, and data fetching hardware. The safe logic is to determine whether a load is safe. The data forwarding hardware is to, in response to a determination that the load is safe, forward data requested by the load. The data fetching logic is to fetch the data requested by the load, regardless of the determination that the load is safe.
</abstract>

<claims>
1. A processor comprising: safe logic to determine whether a load is safe; data forwarding hardware to, in response to a determination that the load is safe, forward data requested by the load and, in response to a determination that the load is unsafe, block forwarding of the data; and data fetching hardware to fetch the data requested by the load, regardless of the determination that the load is safe.
2. The processor of claim 1, wherein the data forwarding hardware includes a load queue.
3. The processor of claim 1, wherein the data fetching hardware includes a miss queue.
4. The processor of claim 1, wherein the safe logic is to determine whether the load is safe based on information from a reservation station or an out-of-order execution cluster.
5. The processor of claim 1, further comprising a translation lookaside buffer to store an address translation, the address translation to be performed in response to the load, regardless of the determination that the load is safe.
6. The processor of claim 1, wherein the safe logic is to determine that the load is safe when it is no longer speculative.
7. The processor of claim 1, wherein the load is to be performed in response to a load instruction and the safe logic is to determine that the load is safe when the load instruction is ready to be retired.
8. The processor of claim 1, wherein the data is to be forwarded to one or more dependent instructions.
9. The processor of claim 1, wherein the load is to be squashed in response to a determination that speculative execution of the load is on a wrong path.
10. The processor of claim 1, wherein the load is to be executed in response to a branch prediction and the safe logic is to determine that the load is safe when a condition to the branch prediction is satisfied.
11. A method comprising: determining whether a load is safe; in response to determining that the load is unsafe, blocking forwarding of data requested by the load; in response to determining that the load is safe, forwarding the data; and regardless of a determination that the load is unsafe, fetching the data requested by the load.
12. The method of claim 11, further comprising, regardless of the determination that the load is unsafe, performing an address translation and storing the result in a translation lookaside buffer.
13. The method of claim 11, wherein the load is on a speculative execution path., further comprising: determining that the speculative execution path is wrong; and in response to determining that the speculative execution path is wrong, squashing the load.
14. A system comprising: a system memory; and a processor including: safe logic to determine whether a load is safe; data forwarding hardware to, in response to a determination that the load is safe, forward data requested by the load; and data fetching hardware to fetch the data requested by the load, regardless of the determination that the load is safe, wherein the data is to be fetched from the system memory.
15. The system of claim 14, wherein the data forwarding hardware is also, in response to a determination that the load is unsafe, to block forwarding of the data.
</claims>
</document>
