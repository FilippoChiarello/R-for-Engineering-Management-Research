<document>

<filing_date>
2018-07-19
</filing_date>

<publication_date>
2020-01-23
</publication_date>

<priority_date>
2018-07-19
</priority_date>

<ipc_classes>
G06N7/08,G06N99/00
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
KATSUKI, TAKAYUKI
MORIMURA TETSURO
OKUDO, MICHIKO
</inventors>

<docdb_family_id>
69161941
</docdb_family_id>

<title>
REDUCING COMPUTATIONAL COSTS TO PERFORM MACHINE LEARNING TASKS
</title>

<abstract>
A computer-implemented method for reducing computational costs for reducing computational costs to perform machine learning tasks includes generating one or more state partitioning candidates corresponding to a plurality of states associated with a partially observable Markov decision process (POMDP) model, determining that a given state partitioning candidate of the one or more state partitioning candidates satisfies a merge condition based on a state transition matrix for the given state partitioning candidate, and performing a machine learning task based on the POMDP model with merged states using the given state partitioning candidate.
</abstract>

<claims>
1. A computer-implemented method for reducing computational costs to perform machine learning tasks, comprising: generating, by at least one processor device operatively coupled to a memory, one or more state partitioning candidates corresponding to a plurality of states associated with the a partially observable Markov decision process (POMDP) model; determining, by the at least one processor device, that a given state partitioning candidate of the one or more state partitioning candidates satisfies a merge condition based on a state transition matrix for the given state partitioning candidate; and performing, by the at least one processor device, a machine learning task based on the POMDP model with merged states using the given state partitioning candidate.
2. The method of claim 1, wherein the parameters include an emission distribution and a reward distribution, and wherein the one or more states of a given one of the plurality of groups have similar posterior distributions of the emission distribution and the reward distribution.
3. The method of claim 1, wherein the samples are obtained by employing a Markov Chain Monte Carlo (MCMC) method.
4. The method of claim 1, further comprising: obtaining, by the at least one processor device, samples from posterior distributions of parameters associated with a partially observable Markov decision process (POMDP) model; grouping, by the at least one processor device, the plurality of states into a plurality of groups based on the obtained samples, each of the plurality of groups including one or more of the plurality of states having similar posterior distributions of the parameters; creating, by the at least one processor device, a plurality of sets of partitions each corresponding to a respective one of the plurality of groups and each including one or more partitions; and combining, by the at least one processor device, the sets of partitions to generate the one or more state partitioning candidates.
5. The method of claim 1, wherein the one or more state partitioning candidates each include a plurality of subgroups.
6. The method of claim 5, further comprising enumerating, by the at least one processor device, the one or more state partitioning candidates based on a number of the subgroups corresponding to each state partitioning candidate.
7. The method of claim 6, wherein the one or more state partitioning candidates are enumerated in ascending order of the number of subgroups corresponding to each state partitioning candidate.
8. The method of claim 5, further comprising generating, by the at least one processor device, the state transition matrix for the given state partitioning candidate by summing up a probability of transitions into all of the states of the given state partitioning candidate.
9. The method of claim 8, wherein determining whether the given state partitioning candidate satisfies the merge condition includes determining whether the posterior distributions of the parameters are the same for all actions and states in each of the subgroups of the given state partitioning candidate.
10. The method of claim 9, wherein the given state partitioning candidate is determined to satisfy the merge condition by using a Kolmogorov-Smirnov test or comparing a sample mean to a threshold.
11. A system for reducing computational costs for machine learning tasks using partially observable Markov decision processes (POMDP) models, comprising: a memory device for storing program instructions; and at least one processor device operatively coupled to the memory device and configured to execute program code stored on the memory device to: generate one or more state partitioning candidates corresponding to a plurality of states associated with a partially observable Markov decision process (POMDP) model; determine that a given state partitioning candidate of the one or more state partitioning candidates satisfies a merge condition based on a state transition matrix for the given state partitioning candidate; and perform a machine learning task based on the POMDP model with merged states using the given state partitioning candidate.
12. The system of claim 11, wherein the parameters include an emission distribution and a reward distribution, and wherein the one or more states of a given one of the plurality of groups have similar posterior distributions of the emission distribution and the reward distribution.
13. The system of claim 11, wherein the samples are obtained by employing a Markov Chain Monte Carlo (MCMC) method.
14. The system of claim 11, wherein the at least one processor device is configured to generate the one or more state partitioning candidates by: obtaining samples from posterior distributions of parameters associated with the POMDP model; grouping the plurality of states into a plurality of groups based on the obtained samples, each of the plurality of groups including one or more of the plurality of states having similar posterior distributions of the parameters; creating a plurality of sets of partitions each corresponding to a respective one of the plurality of groups and each including one or more partitions; and combining the sets of partitions to generate the one or more state partitioning candidates.
15. The system of claim 11, wherein each state partitioning candidate includes a plurality of subgroups, and wherein the at least one processor device is further configured to execute program code stored on the memory device to enumerate the one or more state partitioning candidates based on a number of the subgroups corresponding to each state partitioning candidate.
16. The system of claim 15, wherein the one or more state partitioning candidates are enumerated in ascending order of the number of subgroups corresponding to each state partitioning candidate.
17. The system of claim 15, wherein the at least one processor device is further configured to execute program code stored on the memory device to generate the state transition matrix for the given state partitioning candidate by summing up a probability of transitions into all of the states in the given state partitioning candidate.
18. The system of claim 17, wherein the at least one processor device is further configured to determine whether the given state partitioning candidate satisfies the merge condition by determining whether the posterior distributions of the parameters are the same for all actions and states in each of the subgroups of the given state partitioning candidate.
19. The system of claim 18, wherein the at least one processor device is further configured to execute program instructions stored on the memory device to determine whether the given state partitioning candidate satisfies the merge condition by using a Kolmogorov-Smirnov test or comparing a sample mean to a threshold.
20. A computer program product comprising a non-transitory computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computer to cause the computer to perform a method for reducing computational costs to perform machine learning tasks, the method performed by the computer comprising: generating one or more state partitioning candidates corresponding to a plurality of states associated with a partially observable Markov decision process (POMDP) model; determining that a given state partitioning candidate of the one or more state partitioning candidates satisfies a merge condition based on a state transition matrix for the given state partitioning candidate; and performing a machine learning task based on the POMDP model with merged states using the given state partitioning candidate.
</claims>
</document>
