<document>

<filing_date>
2019-06-25
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-25
</priority_date>

<ipc_classes>
G06F9/455,H04L29/12,H04L9/32
</ipc_classes>

<assignee>
SALESFORCE.COM
</assignee>

<inventors>
Rosado, Edmary
</inventors>

<docdb_family_id>
74043062
</docdb_family_id>

<title>
SERVERLESS CONNECTED APP DESIGN
</title>

<abstract>
A system for authorizing a serverless application function having a plurality of tenants, each tenant may include one or more entities that share a common access to a processing space and a data store. The system includes a gateway that receives a request from a tenant, an authorization component that access a public key assigned to the tenant, and a serverless processor that generates public and private keys for the tenant. The serverless processor also generates an access token for the first tenant that is signed using the private key and requests a transaction token from the authorization component using the access token. The authorization component transmits a transaction token to the serverless processor, which is used to make further requests to a virtual environment.
</abstract>

<claims>
1. A system for authorizing a serverless application function, the system having a plurality of tenants, each tenant comprising one or more entities that share a common access to a processing space and a data store, wherein the processing space may be implemented on at least one of a plurality of instance nodes in communication with one another, and each tenant of the plurality of tenants is assigned to a virtual environment that corresponds to a dedicated portion of the data store, the system comprising: a gateway configured to receive a first request from a first tenant, the first tenant sharing access to the processing space and the data store with one or more other tenants of the plurality of tenants and having access, based on an assigned set of privileges, to a portion of the data store that is isolated from the one or more other tenants; an authorization component configured to access a public key assigned to the first tenant within the system; a serverless processor coupled to the gateway and configured to execute code stored in a memory in response to the first request, wherein the serverless processor is further configured to: generate the public key and a private key; assign the public key and private key to the first tenant; transmit the public key to the authorization component; generate an access token for the first tenant, the access token signed using the first tenant's assigned private key; transmit a second request for a transaction token to the authorization component, the second request including the access token; receive the transaction token from the authorization component; and transmit a third request to the virtual environment, the third request including the transaction token.
2. The system of claim 1, wherein the gateway and the serverless processor operate within a common virtual private cloud.
3. The system of claim 1, wherein the gateway is further configured to verify that the first tenant is permitted to communicate with the virtual environment using a lightweight directory access protocol to access a directory within the authorization component.
4. The system of claim 1, wherein the access token is a JSON web token.
5. The system of claim 1, wherein the transaction token is an OAuth token.
6. The system of claim 1, wherein the virtual environment and authorization component execute within a same instance or a same point of deployment (pod).
7. The system of claim 3, wherein the access token includes an audience field that identifies a recipient of the access token and an issuer field that identifies an issuer of the access token.
8. The system of claim 1, wherein the access token uniquely corresponds to the first tenant.
9. The system of claim 1, wherein the transaction token includes an organization identifier that uniquely identifies the virtual environment within the system.
10. The system of claim 1, wherein an expiration of the transaction token is set based on the access token.
11. The system of claim 1, wherein the authorization component is further configured to verify the second request using the public key.
12. A method of authorizing a serverless application function in a system having a plurality of tenants, each tenant comprising one or more entities that share a common access to a processing space and a data store, wherein the processing space may be implemented on at least one of a plurality of instance nodes in communication with one another, and each tenant of the plurality of tenants is assigned to a virtual environment that corresponds to a dedicated portion of the data store, the method comprising: receiving a first request from a first tenant, the first tenant sharing access to the processing space and the data store with one or more other tenants of the plurality of tenants and having access, based on an assigned set of privileges, to a portion of the data store that isolated from the one or more other tenants; generating, using a serverless processor, a public key and a private key and assigning both to the first tenant; transmitting the public key to an authorization component; generating, using the serverless processor, an access token for the first tenant, the access token signed using the first tenant's assigned private key; transmitting, using the serverless processor, a second request for a transaction token to the authorization component, the second request including the access token; receiving, using the serverless processor, the transaction token from the authorization component; and transmitting, using the serverless processor, a third request to the virtual environment, the third request including the transaction token.
13. The method of claim 12, further comprising: verifying that the first tenant is permitted to communicate with the virtual environment, the verifying performed using a lightweight directory access protocol to access a directory within the authorization component.
14. The method of claim 12, wherein the access token is a JSON web token.
15. The method of claim 12, wherein the transaction token is an OAuth token.
16. The method of claim 12, wherein the virtual environment and authorization component operate within a same instance or a same point of deployment (pod).
17. The method of claim 14, wherein the access token includes an audience field that identifies a recipient of the access token and an issuer field that identifies an issuer of the access token.
18. The method of claim 12, wherein the access token uniquely corresponds to the first tenant.
19. The method of claim 12, wherein the transaction token includes an organization identifier that uniquely identifies the virtual environment within the system.
20. The method of claim 12, wherein the authorization component is further configured to verify the second request using the public key.
21. The method of claim 12, wherein an expiration of the transaction token is set based on the access token.
</claims>
</document>
