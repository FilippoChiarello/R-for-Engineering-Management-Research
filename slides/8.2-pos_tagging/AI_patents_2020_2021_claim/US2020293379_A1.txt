<document>

<filing_date>
2020-06-01
</filing_date>

<publication_date>
2020-09-17
</publication_date>

<priority_date>
2018-03-27
</priority_date>

<ipc_classes>
G06F1/08,G06F9/38,G06F9/50,G06N3/063
</ipc_classes>

<assignee>
TENCENT TECHNOLOGY (SHENZHEN) COMPANY
</assignee>

<inventors>
ZHANG BO
ZHANG LIXIN
YU, XIAOYU
WANG, YUWEI
</inventors>

<docdb_family_id>
67778806
</docdb_family_id>

<title>
CONVOLUTIONAL COMPUTING ACCELERATOR, CONVOLUTIONAL COMPUTING METHOD, AND COMPUTER-READABLE STORAGE MEDIUM
</title>

<abstract>
Embodiments of this application relate to a convolutional computing accelerator, a convolutional computing method, and a convolutional computing device, which belong to the technical field of electronic circuits. The convolutional computing accelerator includes: a controller, a computing matrix, and a first cache. The computing matrix comprising at least one row of computing units, each row of computing units comprising at least two adjacent connected computing units. The controller is configured to control input data of each row of computing units to be loaded into the first cache, and to control the input data loaded into the first cache to be inputted into the two adjacent computing units in a corresponding row. Each of the computing units in the corresponding row is configured to perform, in a first clock cycle, a convolutional computation based on received input data and a pre-stored convolutional kernel.
</abstract>

<claims>
1. A convolutional computing accelerator, comprising: a controller, a computing matrix, and a first cache, the computing matrix comprising at least one row of computing units, each row of computing units comprising at least two adjacent connected computing units; the controller being configured to control input data of each row of computing units to be loaded into the first cache, and to control the input data loaded into the first cache to be inputted into the two adjacent computing units in a corresponding row; and each of the computing units in the corresponding row being configured to perform, in a first clock cycle, a convolutional computation based on received input data and a pre-stored convolutional kernel.
2. The convolutional computing accelerator according to claim 1, wherein the controller is configured to input the input data into a register of a first computing unit in the corresponding row during the first clock cycle; and a first computing unit of the computing units in the corresponding row is configured to input the received input data into a register of a next computing unit in the corresponding row during a next first clock cycle, the first computing unit being a computing unit that is not a last computing unit in the corresponding row.
3. The convolutional computing accelerator according to claim 2, wherein each computing unit in the computing matrix is configured to receive the input data in the first clock cycle, and perform the convolutional computation based on the received input data and the pre-stored convolutional kernel in the next first clock cycle.
4. The convolutional computing accelerator according to claim 3, wherein each computing unit in the computing matrix pre-stores at least two convolutional kernels; and each computing unit in the computing matrix is configured to successively perform the convolutional computation based on the received input data and the at least two convolutional kernels during the first clock cycle.
5. The convolutional computing accelerator according to claim 4, wherein a duration of the first clock cycle is not shorter than a sum of a pre-set number of durations of second clock cycles, the pre-set number being a number of convolutional kernels pre-stored in the computing unit, each convolutional kernel corresponding to one second clock cycle; and each computing unit in the computing matrix is configured to perform the convolutional computation based on the received input data and a convolutional kernel during a second clock cycle corresponding to the convolutional kernel.
6. The convolutional computing accelerator according to claim 1, wherein the convolutional computing accelerator further comprises a second cache, and the computing matrix comprises at least two rows of computing units, the at least two rows of computing units forming at least two columns, and two adjacent computing units in each column being connected; and a second computing unit in the computing matrix is further configured to store an accumulated convolutional computation result to the second cache, the accumulated convolutional computation result being an accumulated result of convolutional computation results of the computing units in a corresponding column; and the second computing unit being a computing unit in the last row of the computing matrix.
7. The convolutional computing accelerator according to claim 6, wherein the second computing unit is further configured to add, before storing the accumulated convolutional computation result to the second cache, a convolutional computation result obtained by performing a convolutional computation in a previous first clock cycle and a convolutional computation result transmitted by a previous computing unit in the corresponding column in the previous first clock cycle, to obtain the accumulated convolutional computation result.
8. The convolutional computing accelerator according to claim 7, wherein a third computing unit in the computing matrix is configured to: output the convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle to a next computing unit in the corresponding column; and the third computing unit being a computing unit in the first row of the computing matrix.
9. The convolutional computing accelerator according to claim 8, wherein the third computing unit is further configured to add, before outputting the convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle to the next computing unit in the corresponding column, the convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle to initial accumulated data to acquire an addition computation result; and the third computing unit is further configured to output the addition computation result as an updated convolutional computation result to the next computing unit in the corresponding column in the next first clock cycle when the convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle is outputted to the next computing unit in the corresponding column.
10. The convolutional computing accelerator according to claim 7, wherein a fourth computing unit in the computing matrix is configured to: add a convolutional computation result obtained by performing a convolutional computation in a previous clock cycle and a convolutional computation result transmitted by a previous computing unit in a corresponding column in the previous clock cycle, to obtain an addition computation result; and output the addition computation result, as an updated convolutional computation result, to a next computing unit in the corresponding column in a next first clock cycle; the fourth computing unit being any computing unit other than computing units in the first row and the last row of the computing matrix.
11. A convolutional computing method performed by a convolutional computing accelerator, the convolutional computing accelerator comprising: a controller, a computing matrix, and a first cache, the computing matrix comprising at least one row of computing units, each row of computing units comprising at least two connected computing units, the method comprising: controlling, by the controller, input data of each row of computing units to be loaded into the first cache; controlling, by the controller, the input data loaded into the first cache to be inputted into the at least two computing units in a corresponding row; and performing, in a first clock cycle, by each of the at least two computing units in the corresponding row, a convolutional computation based on the received input data and a pre-stored convolutional kernel.
12. The method according to claim 11, wherein the controller inputs the input data into a register of a first computing unit in a corresponding row during the first clock cycle; and a first computing unit of the computing units in the corresponding row inputs the received input data into a register of a next computing unit in the corresponding row in a next first clock cycle, the first computing unit being a computing unit that is not the last computing unit in the corresponding row.
13. The method according to claim 12, wherein each computing unit in the computing matrix is configured to receive the input data during the first clock cycle and perform the convolutional computation based on the received input data and the pre-stored convolutional kernel in the next first clock cycle.
14. The method according to claim 13, wherein each computing unit in the computing matrix pre-stores at least two convolutional kernels; and each computing unit in the computing matrix is configured to successively perform the convolutional computation based on the received input data and the at least two convolutional kernels during the first clock cycle.
15. The method according to claim 14, wherein a duration of the first clock cycle is not shorter than a sum of a pre-set number of durations of second clock cycles, the pre-set number being a number of convolutional kernels pre-stored in the computing unit, and each convolutional kernel corresponding to one second clock cycle; and each computing unit in the computing matrix is configured to perform the convolutional computation based on the received input data and the convolutional kernel during the second clock cycle corresponding to each convolutional kernel.
16. The method according to claim 11, wherein the convolutional computing accelerator further comprises a second cache, the computing matrix comprising at least two rows of computing units, the at least two rows of computing units forming at least two columns, and two adjacent computing units in each column being connected; and a second computing unit in the computing matrix is configured to add a convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle and a convolutional computation result transmitted by a previous computing unit in a corresponding column in a previous first clock cycle, to obtain an accumulated convolutional computation result, and store the accumulated convolutional computation result to the second cache, the accumulated convolutional computation result being an accumulated result of convolutional computation results of computing units in the corresponding column; and the second computing unit being a computing unit in the last row of the computing matrix.
17. The method according to claim 16, wherein a third computing unit in the computing matrix is configured to add the convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle and initial accumulated data, to obtain an addition computation result; output the convolutional computation result obtained by performing the convolutional computation in the previous first clock cycle to a next computing unit in a corresponding column; and output the addition computation result, as an updated convolutional computation result, to a next computing unit in the corresponding column in a next first clock cycle; the third computing unit being a computing unit in the first row of the computing matrix.
18. The method according to claim 16, wherein a fourth computing unit in the computing matrix is configured to add a convolutional computation result obtained by performing a convolutional computation in a previous first clock cycle and a convolutional computation result transmitted by a previous computing unit in a corresponding column in the previous first clock cycle, to obtain an addition computation result; and output the addition computation result, as an updated convolutional computation result, to a next computing unit in the corresponding column in a next first clock cycle; the fourth computing unit being any computing unit other than computing units in the first row and the last row of the computing matrix.
19. A computer-readable storage medium, the storage medium storing one or computer executable instructions, when executed by one or more coprocessors, the computer executable instructions implement operations comprising: controlling, by a controller, input data of each row of computing units to be loaded into a first cache; controlling, by the controller, the input data loaded into the first cache to be inputted into at least two connected computing units in a corresponding row; and performing, in a first clock cycle, by each of the at least two connected computing units in the corresponding row, a convolutional computation based on the received input data and a pre-stored convolutional kernel.
20. The computer-readable storage medium according to claim 19, wherein the controller inputs the input data into a register of a first computing unit in a corresponding row during the first clock cycle; and a first computing unit of the computing units in the corresponding row inputs the received input data into a register of a next computing unit in the corresponding row in a next first clock cycle, the first computing unit being a computing unit excepting the last computing unit in the corresponding row.
</claims>
</document>
