<document>

<filing_date>
2019-06-25
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-25
</priority_date>

<ipc_classes>
G06N20/00,H04L12/24,H04L29/08
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
PICHETTI, LUIGI
DI COCCO, ANTONIO
OTTAVIANO, PAOLO
BAGAROLO, Antonio
</inventors>

<docdb_family_id>
74042926
</docdb_family_id>

<title>
CHANGE MANAGEMENT OPTIMIZATION IN CLOUD ENVIRONMENT
</title>

<abstract>
Methods, computer program products, and systems are presented. The methods include, for instance: building a change management meta model on relationships between change request tasks of a change request and logical components of a computing environment via deployment processes that realizes respective change request tasks onto the logical components. A change request fulfillment plan that minimizes a maintenance window for deploying the change request tasks to the logical components is produced. After deployment, performance metrics of the logical components updates change request constraints.
</abstract>

<claims>
1. A computer implemented method comprising: building, by one or more processor, a change management meta model on interdependencies between a change request comprising one or more change request task and one or more deployment process respective to each of the one or more change request task, and on dependencies of one or more logical component of a computing environment to the one or more deployment process based on change request constraints by use of machine learning; producing, by the one or more processor, a change request fulfillment plan that minimizes a maintenance window indicating an amount of time for deploying the one or more change request task to the one or more logical component via the one or more deployment process based on the interdependencies and the dependencies modeled in the change management meta model; and feeding, by the one or more processor, performance metrics on operations of the one or more logical component subsequent to deploying the one or more change request task into the change request constraints.
2. The computer implemented method of claim 1, further comprising: prior to the feeding, running the one or more deployment process corresponding to the one or more change request task as specified in the change request fulfillment plan.
3. The computer implemented method of claim 1, wherein the one or more logical component of the computing environment services one or more customer with one or more subscribed service provided by the computing environment, and wherein the one or more subscribed service can be disrupted during the maintenance window, depending on the characteristics of each of the one or more change request task.
4. The computer implemented method of claim 1, further comprising: prior to the building, collecting data on the change request, the one or more change request task, the one or more deployment process corresponding to each of the one or more change request task, and the one or more logical component corresponding to each of the one or more change request task, by use of data mining on sources including a deployment record of past deployments, the one or more logical component, and any accessible external computing environment.
5. The computer implemented method of claim 1, further comprising: subsequent to the feeding, retraining the change management meta model with the change request constraints updated with the performance metrics from the feeding such that the interdependencies and the dependencies of the change management meta model can be dynamically adjusted for accuracy.
6. The computer implemented method of claim 1, further comprising: subsequent to the feeding, adjusting the change request fulfillment plan for the change that is ongoing based on the performance metrics from the feeding such that the remainder of the one or more change request task in the change can be dynamically adjusted for accuracy.
7. The computer implemented method of claim 1, the producing comprising: identifying any correlation in the change management meta model with respect to each of the one or more logical component that can be affected by the change, wherein the correlation including the interdependencies and the dependencies modeled in the change management meta model; maximizing a number of the one or more change request task that can be concurrently deployed to each of the one or more logical component by merging a deployment record of past deployments relevant to each of the one or more logical component; and generating the change request fulfillment plan by scheduling all change request tasks accounted in the number of the one or more change request task to run concurrently without restarting a logical component subject to the all change request tasks.
8. A computer program product comprising: a computer readable storage medium readable by one or more processor and storing instructions for execution by the one or more processor for performing a method comprising: building a change management meta model on interdependencies between a change request comprising one or more change request task and one or more deployment process respective to each of the one or more change request task, and on dependencies of one or more logical component of a computing environment to the one or more deployment process based on change request constraints by use of machine learning; producing a change request fulfillment plan that minimizes a maintenance window indicating an amount of time for deploying the one or more change request task to the one or more logical component via the one or more deployment process based on the interdependencies and the dependencies modeled in the change management meta model; and feeding performance metrics on operations of the one or more logical component subsequent to deploying the one or more change request task into the change request constraints.
9. The computer program product of claim 8, further comprising: prior to the feeding, running the one or more deployment process corresponding to the one or more change request task as specified in the change request fulfillment plan.
10. The computer program product of claim 8, wherein the one or more logical component of the computing environment services one or more customer with one or more subscribed service provided by the computing environment, and wherein the one or more subscribed service can be disrupted during the maintenance window, depending on the characteristics of each of the one or more change request task.
11. The computer program product of claim 8, further comprising: prior to the building, collecting data on the change request, the one or more change request task, the one or more deployment process corresponding to each of the one or more change request task, and the one or more logical component corresponding to each of the one or more change request task, by use of data mining on sources including a deployment record of past deployments, the one or more logical component, and any accessible external computing environment.
12. The computer program product of claim 8, further comprising: subsequent to the feeding, retraining the change management meta model with the change request constraints updated with the performance metrics from the feeding such that the interdependencies and the dependencies of the change management meta model can be dynamically adjusted for accuracy.
13. The computer program product of claim 8, further comprising: subsequent to the feeding, adjusting the change request fulfillment plan for the change that is ongoing based on the performance metrics from the feeding such that the remainder of the one or more change request task in the change can be dynamically adjusted for accuracy.
14. The computer program product of claim 8, the producing comprising: identifying any correlation in the change management meta model with respect to each of the one or more logical component that can be affected by the change, wherein the correlation including the interdependencies and the dependencies modeled in the change management meta model; maximizing a number of the one or more change request task that can be concurrently deployed to each of the one or more logical component by merging a deployment record of past deployments relevant to each of the one or more logical component; and generating the change request fulfillment plan by scheduling all change request tasks accounted in the number of the one or more change request task to run concurrently without restarting a logical component subject to the all change request tasks.
15. A system comprising: a memory; one or more processor in communication with memory; and program instructions executable by the one or more processor via the memory to perform a method comprising: building a change management meta model on interdependencies between a change request comprising one or more change request task and one or more deployment process respective to each of the one or more change request task, and on dependencies of one or more logical component of a computing environment to the one or more deployment process based on change request constraints by use of machine learning; producing a change request fulfillment plan that minimizes a maintenance window indicating an amount of time for deploying the one or more change request task to the one or more logical component via the one or more deployment process based on the interdependencies and the dependencies modeled in the change management meta model; and feeding performance metrics on operations of the one or more logical component subsequent to deploying the one or more change request task into the change request constraints.
16. The system of claim 15, further comprising: prior to the feeding, running the one or more deployment process corresponding to the one or more change request task as specified in the change request fulfillment plan, wherein the one or more logical component of the computing environment services one or more customer with one or more subscribed service provided by the computing environment, and wherein the one or more subscribed service can be disrupted during the maintenance window, depending on the characteristics of each of the one or more change request task.
17. The system of claim 15, further comprising: prior to the building, collecting data on the change request, the one or more change request task, the one or more deployment process corresponding to each of the one or more change request task, and the one or more logical component corresponding to each of the one or more change request task, by use of data mining on sources including a deployment record of past deployments, the one or more logical component, and any accessible external computing environment.
18. The system of claim 15, further comprising: subsequent to the feeding, retraining the change management meta model with the change request constraints updated with the performance metrics from the feeding such that the interdependencies and the dependencies of the change management meta model can be dynamically adjusted for accuracy.
19. The system of claim 15, further comprising: subsequent to the feeding, adjusting the change request fulfillment plan for the change that is ongoing based on the performance metrics from the feeding such that the remainder of the one or more change request task in the change can be dynamically adjusted for accuracy.
20. The system of claim 15, the producing comprising: identifying any correlation in the change management meta model with respect to each of the one or more logical component that can be affected by the change, wherein the correlation including the interdependencies and the dependencies modeled in the change management meta model; maximizing a number of the one or more change request task that can be concurrently deployed to each of the one or more logical component by merging a deployment record of past deployments relevant to each of the one or more logical component; and generating the change request fulfillment plan by scheduling all change request tasks accounted in the number of the one or more change request task to run concurrently without restarting a logical component subject to the all change request tasks.
</claims>
</document>
