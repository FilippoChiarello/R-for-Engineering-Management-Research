<document>

<filing_date>
2017-08-17
</filing_date>

<publication_date>
2020-09-22
</publication_date>

<priority_date>
2016-10-21
</priority_date>

<ipc_classes>
G06F16/00,G06F16/90,G06F16/901,G06F16/951,G06F17/30,G06F9/46
</ipc_classes>

<assignee>
FUJITSU
</assignee>

<inventors>
DE LA TORRE, VICTOR
MORA LÓPEZ, JOSÉ
GOTO, MASATOMO
</inventors>

<docdb_family_id>
57570378
</docdb_family_id>

<title>
Program, method, and system for execution of software services
</title>

<abstract>
A software service execution system includes: a software library storing software services, each obtaining and processing input data from a specified input URI (uniform resource identifier) and outputting the result to a specified output URI; a metadata graph representing the software services, each being identifiable by a predicate defining a relationship between a subject vertex and an object vertex, the subject vertex storing the specified input URI and being linked by a directed edge labelled with the predicate to the object vertex storing the specified output URI; a metadata graph query interface receiving a query requesting a queried vertex, linked by a defined traversal path along one or more edges to a source vertex; a software service execution controller controlling the execution of the software services identified by specified predicates labelling edges on the defined traversal path, in an order determined by the defined traversal path.
</abstract>

<claims>
1. A software service execution system, comprising: a memory; and a processor connected to the memory, wherein the memory stores: a software library, including a plurality of software services, each software service being configured, upon execution, to obtain input data from a specified input uniform resource identifier (URI), execute processing on the obtained input data, and output a result of the processing to a specified output URI; and a metadata graph representing the plurality of software services, each software service being identifiable in the metadata graph by a labelled edge between a subject vertex and an object vertex, the subject vertex storing the specified input URI and being linked by the labelled edge directed to the object vertex storing the specified output URI, the labelled edge being labelled with a URI of the software service, and wherein the processor is configured to: receive a query, in graph query language, the received query requesting, as a variable, a queried vertex, linked, by a defined traversal path along one or more labelled edges each labelled with a URI of a respective software service, to a source vertex, a value of the source vertex is specified by the received query; control execution of one or more software services respectively identified by the one or more labelled edges on the defined traversal path by, for each vertex between the source vertex and the queried vertex on the defined traversal path, providing a result of the execution of a software se rvice identified by the labelled edge on a source-vertex-side of the respective vertex as input data to a software service on a queried-vertex-side of the respective vertex; and respond to the received query with a value of the queried vertex, the value being a result of the controlled execution of the one or more software services respectively identified by the one or more labelled edges on edge the defined traversal path from the source vertex.
2. A software execution system according to claim 1, wherein the value of the source vertex is specified by an expressly-defined value or by a URI of a location from which data for processing by a software service identified by the one or more labelled edges linking to the source vertex along the defined traversal path to the query vertex.
3. A software execution service according to claim 1, wherein the value of the queried vertex output in response to the received query is either the specified output URI of, or the result of the processing of, the software service identified by the label of the one or more labelled edges linking to the query vertex along the defined traversal path from the source vertex.
4. A software execution system according to claim 1, wherein the software services are microservices.
5. A software execution system according to claim 1, wherein the software services are RESTful software services, each defining methods for GET, and POST and/or PUT requests.
6. A software execution system according to claim 5, wherein the processor is further configured to control the execution of the one or more software services respectively identified by the one or more labelled edges on the defined traversal path by issuing a GET request to the software service when, following the defined traversal path from source vertex to query vertex, the labelled edge identifying the respective software service is traversed from the subject vertex of the labelled edge to an object vertex of the labelled edge.
7. A software service execution system according to claim 1, wherein the labelled edge is a semantic descriptor of the processing executed by the respective software service.
8. A software service execution system according to claim 1, wherein the the memory further stores a knowledge base, and wherein the processor is further configured to: add a record to the knowledge base for each traversal path, recording the traversal path, the queried vertex or vertices, and the source vertex, and the software services executed by the software service execution controller in obtaining a result of the queried vertex or vertices; and compare a defined traversal path with traversal paths recorded in the knowledge base in order to optimise the control of executing software services in generating a response to the defined traversal path.
9. A software service execution method, comprising: storing a plurality of software services, each software service being configured, upon execution, to obtain input data from a specified input uniform resource identifier (URI), execute processing on the obtained input data, and output a result of the processing to a specified output URI; storing a metadata graph representing the plurality of software services, each software service being identifiable in the metadata graph by a labelled edge between a subject vertex and an object vertex, the subject vertex storing the specified input URI and being linked by the labelled edge directed to the object vertex storing the specified output URI, the labelled edge being labelled with a URI of the software service; receiving a query, in graph query language, the received query requesting, as a variable, a queried vertex, linked, by a defined traversal path along one or more labelled edges each labelled with a URI of a respective software service, to a source vertex, a value of the source vertex is specified by the received query; controlling execution of one or more stored software services respectively identified by the one or more labelled edges on the defined traversal path, in an order determined by the defined traversal path by, for each vertex between the source vertex and the queried vertex on the defined traversal path, providing a result of the execution of a software service identified by the labelled edge on a source-vertex-side of the respective vertex as input data to a software service on a queried-vertex-side of the respective vertex; and responding to the received query with a value of the queried vertex, the value being a result of the controlled execution of the one or more software services respectively identified by the one or more labelled edges on the defined traversal path from the source vertex.
10. A non-transitory computer-readable medium storing a computer program which, when executed by a computing device, causes the computing device to execute a method comprising: storing a plurality of software services, each software service being configured, upon execution, to obtain input data from a specified input uniform resource identifier (URI), execute processing on the obtained input data, and output a result of the processing to a specified output URI; storing a metadata graph representing the plurality of software services, each software service being identifiable in the metadata graph by a labelled edge between a subject vertex and an object vertex, the subject vertex storing the specified input URI and being linked by the labelled edge directed to the object vertex storing the specified output URI, the labelled edge being labelled with a URI o the software service; receiving a query, in graph query language, the received query requesting, as a variable, a queried vertex, linked, by a defined traversal path along one or more labelled edges each labelled with a URI of a respective software service to a source vertex, a value of the source vertex is specified by the received query; controlling execution of one or more stored software services respectively identified by one or more labelled edges on the defined traversal path, in an order determined by the defined traversal path by, for each vertex between the source vertex and the queried vertex on the defined traversal path, providing a result of the execution of a software service identified by the labelled edge on a source-vertex-side of the respective vertex as input data to a software service on a queried-vertex-side of the respective vertex; and responding to the received query with a value of the queried vertex, the value being a result of the controlled execution of the one or more software services respectively identified by the one or more labelled edges on the defined traversal path from the source vertex.
</claims>
</document>
