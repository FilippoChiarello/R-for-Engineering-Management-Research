<document>

<filing_date>
2019-11-27
</filing_date>

<publication_date>
2020-07-30
</publication_date>

<priority_date>
2019-01-24
</priority_date>

<ipc_classes>
G06F16/332,G06N3/04,G06N5/04
</ipc_classes>

<assignee>
KALUKIN, ANDREW R.
</assignee>

<inventors>
KALUKIN, ANDREW R.
</inventors>

<docdb_family_id>
71732539
</docdb_family_id>

<title>
ARTIFICIAL INTELLIGENCE SYSTEM FOR GENERATING CONJECTURES AND COMPREHENDING TEXT, AUDIO, AND VISUAL DATA USING NATURAL LANGUAGE UNDERSTANDING
</title>

<abstract>
A robotic system for processing input, such as text data provided through a messaging system, spoken language data provided through a microphone, or any other such input data, which may function to process the input so as to be able to respond or reply to a user based on comprehension of the input sentences. An automated theorem prover (ATP) or similar inference engine technology may operate as an underlying framework for the Artificial Intelligence (AI) system that understands and responds to spoken or written statements translated into a proper format. An ATP formatter may be used to translate natural language processing (NLP) output from an NLP syntactical sentence parser into the proper format, such that the ATP system may be able to generate and populate an ontology or knowledge base from the NLP output. User queries may be mapped to this ontology in order to facilitate comprehension.
</abstract>

<claims>
1. A method for automatically generating a response to a user query, comprising: obtaining a first set of rules defining a knowledge domain; obtaining a data file of ingestible information; with a processor, generating a topological graph structure based on the ingestible information, and converting the topological graph structure into at least one topological graph structure logic axiom, the topological graph structure logic axiom being at least a first-order logic axiom; storing a plurality of logic axioms in a memory, the plurality of logic axioms comprising the at least one topological graph structure logic axiom, each of the plurality of logic axioms being at least a first-order logic axiom; with the processor, parsing further extrinsic information and formulating and testing one or more conjectures based on the further extrinsic information, the one or more conjectures comprising a logic axiom of at least first-order, wherein formulating and testing the one or more conjectures comprises generating, based on a combination of at least two of the plurality of logic axioms, at least one intermediate theorem, and generating, based on the plurality of logic axioms and the at least one intermediate theorem, a conjecture test result, the conjecture test result being an indication that a conjecture in the one or more conjectures is one of provable as true or not provable as true; when the conjecture in the one or more conjectures is provable as true, storing the conjecture in the memory in the form of an ontology; when the conjecture is not provable as true, formulating and testing one or more additional conjectures; receiving, from an input system, the user query; with the processor, mapping the user query to the ontology; and generating, based on the user query and the ontology, the response to the user query.
2. The method of claim 1, wherein the data file of ingestible information comprises text data; and wherein the topological graph structure is a natural language processing (NLP) topological graph structure representing at least one phrase and comprising a plurality of pairings of syntactic categories and words in the text data.
3. The method of claim 2, wherein the step of converting the topological graph structure into at least one topological graph structure logic axiom comprises: identifying an action concept in the topological graph structure, wherein said action concept includes at least one of a verb, a verb phrase, a condition or state of being, and a system-specific operator, and automatically creating a theorem based on the action concept; identifying a subject in the topological graph structure, and adding it to a multi-element data structure; identifying a predicate in the topological graph structure, and adding it to the multi-element data structure; and providing the theorem as a topological graph structure logic axiom of the form "action concept(multi-element data structure)."
4. The method of claim 2, wherein the step of converting the topological graph structure into at least one topological graph structure logic axiom comprises: identifying an action concept in the topological graph structure, wherein said action concept includes at least one of a verb, a verb phrase, a condition or state of being, and a system-specific operator, and automatically creating a theorem based on the action concept; identifying a subject concept in the topological graph structure, and adding it as an object in a multi-element data structure; identifying a predicate concept in the topological graph structure, and adding it as an object in the multi-element data structure; identifying at least one modifier of at least one of the subject or predicate, and adding the at least one modifier as a feature in the multi-element data structure in association with the at least one of the subject or predicate; and providing the theorem as a topological graph structure logic axiom of the form "action concept(multi-element data structure)," wherein the multi-element data structure comprises at least one object-feature pairing.
5. The method of claim 4, wherein the multi-element data structure is variadic.
6. The method of claim 4, wherein the multi-element data structure comprises at least one of: an iterative concept pairing, and a recursive concept pairing.
7. The method of claim 1, wherein the data file of ingestible information comprises at least one of audio data, image data, mapping data, diagram data, or video data.
8. The method of claim 1, wherein the method further comprises mapping, with the processor, speech data to text data; and wherein the topological graph structure is a natural language processing (NLP) topological graph structure comprising a plurality of pairings of syntactic categories and words in the text data.
9. The method of claim 1, wherein the user query is added to the data file of ingestible information.
10. The method of claim 1, wherein the method further comprises: conducting, with the processor and via a network connection, at least one automated web search, and retrieving content from at least one web page; and adding the content to the data file of ingestible information.
11. An automated ontology system configured to automatically generate a response to a user query, the system comprising an input system, an output system, a processor, and a memory, wherein the system is configured to perform the steps of: obtaining a first set of rules defining a knowledge domain; obtaining a data file of ingestible information; with the processor, generating a topological graph structure based on the ingestible information, and converting the topological graph structure into at least one topological graph structure logic axiom, the topological graph structure logic axiom being at least a first-order logic axiom; storing a plurality of logic axioms in the memory, the plurality of logic axioms comprising the at least one topological graph structure logic axiom, each of the plurality of logic axioms being at least a first-order logic axiom; with the processor, parsing further extrinsic information and formulating and testing one or more conjectures based on the further extrinsic information, the one or more conjectures comprising a logic axiom of at least first-order, wherein formulating and testing the one or more conjectures comprises generating, based on a combination of at least two of the plurality of logic axioms, at least one intermediate theorem, and generating, based on the plurality of logic axioms and the at least one intermediate theorem, a conjecture test result, the conjecture test result being an indication that a conjecture in the one or more conjectures is one of provable as true or not provable as true; when the conjecture in the one or more conjectures is provable as true, storing the conjecture in the memory in the form of an ontology; when the conjecture is not provable as true, formulating and testing one or more additional conjectures; receiving, from the input system, the user query; with the processor, mapping the user query to the ontology; and generating, based on the user query and the ontology, the response to the user query, and outputting the response to the user query via the output system.
12. The system of claim 11, wherein the data file of ingestible information comprises text data; and wherein the topological graph structure is a natural language processing (NLP) topological graph structure representing at least one phrase and comprising a plurality of pairings of syntactic categories and words in the text data.
13. The system of claim 12, wherein the step of converting the topological graph structure into at least one topological graph structure logic axiom comprises: identifying an action concept in the topological graph structure, wherein said action concept includes at least one of a verb, a verb phrase, a condition or state of being, and a system-specific operator, and automatically creating a theorem based on the action concept; identifying a subject in the topological graph structure, and adding it to a multi-element data structure; identifying a predicate in the topological graph structure, and adding it to the multi-element data structure; and providing the theorem as a topological graph structure logic axiom of the form "action concept(multi-element data structure)."
14. The system of claim 12, wherein the step of converting the topological graph structure into at least one topological graph structure logic axiom comprises: identifying an action concept in the topological graph structure, wherein said action concept includes at least one of a verb, a verb phrase, a condition or state of being, and a system-specific operator, and automatically creating a theorem based on the action concept; identifying a subject concept in the topological graph structure, and adding it as an object in a multi-element data structure; identifying a predicate concept in the topological graph structure, and adding it as an object in the multi-element data structure; identifying at least one modifier of at least one of the subject or predicate, and adding the at least one modifier as a feature in the multi-element data structure in association with the at least one of the subject or predicate; and providing the theorem as a topological graph structure logic axiom of the form "action concept(multi-element data structure)," wherein the multi-element data structure comprises at least one object-feature pairing.
15. The system of claim 14, wherein the multi-element data structure is variadic, and comprises at least one of: an iterative concept pairing, and a recursive concept pairing.
16. The system of claim 11, wherein the system further comprises at least one of: a connection to a computer vision system, and a connection to a speech recognition system; wherein the data file of ingestible information comprises at least two data types associated with one another, said at least two data types comprising at least two of the set of: text data, audio data, image data, mapping data, diagram data, and video data; and wherein the system is configured to synthesize the at least two data types based on an association of the at least two data types with one another.
17. The system of claim 11, wherein the system is further configured to map, with the processor, the speech data to text data; and wherein the topological graph structure is a natural language processing (NLP) topological graph structure comprising a plurality of pairings of syntactic categories and words in the text data.
18. The system of claim 11, wherein the system is further configured to add the user query to the data file of ingestible information.
19. The system of claim 11, wherein the system is further configured to: conduct, with the processor and via a network connection, at least one automated web search, and retrieve content from at least one web page; and adding the content to the data file of ingestible information.
20. A non-transitory computer-readable medium comprising computer program code that, when executed, causes a computer system comprising an input system, an output system, a processor, and a memory to perform the steps of: obtaining a first set of rules defining a knowledge domain; obtaining a data file of ingestible information; with the processor, generating a topological graph structure based on the ingestible information, and converting the topological graph structure into at least one topological graph structure logic axiom, the topological graph structure logic axiom being at least a first-order logic axiom; storing a plurality of logic axioms in the memory, the plurality of logic axioms comprising the at least one topological graph structure logic axiom, each of the plurality of logic axioms being at least a first-order logic axiom; with the processor, parsing further extrinsic information and formulating and testing one or more conjectures based on the further extrinsic information, the one or more conjectures comprising a logic axiom of at least first-order, wherein formulating and testing the one or more conjectures comprises generating, based on a combination of at least two of the plurality of logic axioms, at least one intermediate theorem, and generating, based on the plurality of logic axioms and the at least one intermediate theorem, a conjecture test result, the conjecture test result being an indication that a conjecture in the one or more conjectures is one of provable as true or not provable as true; when the conjecture in the one or more conjectures is provable as true, storing the conjecture in the memory in the form of an ontology; when the conjecture is not provable as true, formulating and testing one or more additional conjectures; receiving, from the input system, the user query; with the processor, mapping the user query to the ontology; and generating, based on the user query and the ontology, the response to the user query, and outputting the response to the user query via the output system.
</claims>
</document>
