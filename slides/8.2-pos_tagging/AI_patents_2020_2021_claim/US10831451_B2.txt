<document>

<filing_date>
2017-12-01
</filing_date>

<publication_date>
2020-11-10
</publication_date>

<priority_date>
2017-12-01
</priority_date>

<ipc_classes>
G06F8/10,G06F8/30,G06F8/36,G06F9/44
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
GULWANI, SUMIT
UDUPA, ABHISHEK
</inventors>

<docdb_family_id>
64734120
</docdb_family_id>

<title>
Synthesized programming-by-example programs
</title>

<abstract>
Systems, methods, and computer-executable instructions for synthesizing a performant program include receiving a plurality of input examples. A plurality of input and output data pairs are generated using the input examples as input to the synthesized program. An expanded equivalence set is generated from the plurality of input and output data pairs. The expanded equivalence set is input to a synthesis engine to synthesize a first performant program. The first performant program is received. The first performant program does not satisfy at least one input and output data pair of the plurality of input and output data pairs. At least one input and output data pairs is added to the equivalence set. The equivalence set of input and output data pairs to the synthesis engine to synthesize a second performant program. The second performant program is determined to satisfy each of the plurality of input and output data pairs.
</abstract>

<claims>
1. A method for generating a performant program, the method comprising: executing a synthesized program, trained on an initial set of input and output pairs, to generate a plurality of additional input and output data pairs from a plurality of input examples provided as input to the synthesized program; generating, using one or more electronic processors, an expanded equivalence set from a subset of the generated plurality of additional input and output data pairs; inputting the expanded equivalence set to a synthesis engine to synthesize a first performant program based on performance; determining the first performant program does not satisfy at least one input and output data pair of the plurality of generated additional input and output data pairs; adding the at least one input and output data pair to the expanded equivalence set; inputting the expanded equivalence set with the at least one input and output data pair to the synthesis engine to synthesize a second performant program; and determining the second performant program satisfies each of the plurality of generated additional input and output data pairs; and returning the second performant program.
2. The method of claim 1, wherein the synthesized program is selected based on accuracy from a set of programs synthesized on the initial set of input and output pairs.
3. The method of claim 1, wherein the expanded equivalence set includes the initial set of input and output examples.
4. The method of claim 1, wherein adding the at least one input and output pair to the expanded equivalence set comprises determining an error for each incorrect input and output pair, wherein the at least one input and output pair comprises the input and output pair with the largest variance in output from the correct output.
5. The method of claim 1, wherein the synthesis engine uses a performance ranking function to select the first performant program and the second performant program.
6. The method of claim 5, wherein the ranking function estimates performance of synthesized performant programs.
7. The method of claim 6 wherein the ranking function estimates performance based on how much resources are used by execution of the synthesized performant programs.
8. The method of claim 6 wherein the ranking function estimates performance based on the amount of memory and central processing unit resources used to execute the performant programs.
9. The method of claim 1 wherein the first and second performant programs are generated by different synthesis engines operating differently.
10. A system for synthesizing a performant program, the system comprising: one or more electronic processors to: receive a plurality of input examples; receive a plurality of output examples, wherein the number of received output examples is less than a number of received input examples, forming a set of initial input and output example pairs; input the plurality of initial input and output example pairs to a first synthesis engine that uses a first ranking function to synthesize a synthesized program; perform the synthesized program to generate a plurality of generated input and output data pairs using the input examples as input to the synthesized program; generate an expanded equivalence set from a subset of the plurality of generated input and output data pairs; input the expanded equivalence set of input and output data pairs to a second synthesis engine that uses a second ranking function to synthesize a first performant program; determine the first performant program does not satisfy at least one input and output data pair of the plurality of generated input and output data pairs; add the at least one input and output data pair to the expanded equivalence set; input the expanded equivalence set to the second synthesis engine to synthesize a second performant program; and determine the second performant program satisfies each of the plurality of generated input and of output pairs.
11. The system of claim 10, wherein the expanded equivalence set comprises the plurality of initial input and output data pairs.
12. The system of claim 10, wherein to add the at least one input and output data pair to the expanded equivalence set the one or more electronic processor determine an error for each incorrect input and output pair, wherein the at least one input and output data pair comprises the input and output data pair with the largest variance in output from the correct output.
13. The system of claim 10, wherein the first ranking function is an intent-based function.
14. The system of claim 13, wherein the second ranking function is a performance function.
15. The system of claim 14, wherein the second ranking function estimates performance of synthesized programs.
16. The system of claim 10, wherein the first synthesis engine is the second synthesis engine.
17. The system of claim 10, wherein the first synthesis engine is different from the second synthesis engine.
18. A non-transitory computer-readable storage media storing computer-executable instructions for synthesizing a performant program, the stored instructions comprising: instructions to receive a plurality of output examples, a number of output examples is less than a number of input examples, a plurality of initial input and output examples comprising the output examples and corresponding input examples; instructions to input the plurality of initial input and output examples to a synthesis engine that uses a first ranking function to synthesize a synthesized program; instructions to generate a plurality of generated input and output data pairs using the input examples as input to the synthesized program; instructions to generate an expanded equivalence set from a subset of the generated plurality of input and output data pairs; instructions to input the expanded equivalence set of input and output data pairs to a second synthesis engine that uses a second ranking function to synthesize a first performant program; instructions to receive the first performant program; instructions to determine the first performant program does not satisfy at least one input and output data pair of the plurality of generated input and output data pairs; instructions to add the at least one input and output data pair to the expanded equivalence set; instructions to input the expanded equivalence set to the second synthesis engine to synthesize a second performant program; and instructions to determine the second performant program satisfies each of the plurality of generated input and of output pairs.
19. The non-transitory computer-readable storage media of claim 18, wherein the expanded equivalence set comprises the plurality of initial input and output data pairs.
</claims>
</document>
