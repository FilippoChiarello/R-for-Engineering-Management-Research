<document>

<filing_date>
2018-11-05
</filing_date>

<publication_date>
2020-05-07
</publication_date>

<priority_date>
2018-11-05
</priority_date>

<ipc_classes>
G06F9/455,G06F9/54,H04L12/66
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
BATES, KEVIN B.
REISS, FREDERICK R.
RESENDE, LUCIANO
</inventors>

<docdb_family_id>
70458600
</docdb_family_id>

<title>
DISTRIBUTED NOTEBOOK KERNELS IN A CONTAINERIZED COMPUTING ENVIRONMENT
</title>

<abstract>
Distributing kernels in a containerized computing environment includes executing, using computer hardware, a notebook server in a first container, wherein the notebook server is configured to communicate with a gateway in a second container, in response to a request for a kernel from the notebook server, the gateway requesting, using the computer hardware, a new container including the kernel from a container manager, instantiating, using the computer hardware, the new container including the kernel within a selected computing node of a plurality of computing nodes, publishing, using the computer hardware, communication port information for the new container to the gateway, and exchanging electronic messages, using the computer hardware, between the notebook server and the kernel through the gateway using the communication port information for the new container.
</abstract>

<claims>
1. A method, comprising: executing, using computer hardware, a notebook server in a first container, wherein the notebook server is configured to communicate with a gateway in a second container; in response to a request for a kernel from the notebook server, the gateway requesting, using the computer hardware, a new container including the kernel from a container manager; instantiating, using the computer hardware, the new container including the kernel within a selected computing node of a plurality of computing nodes; publishing, using the computer hardware, communication port information for the new container to the gateway; and exchanging electronic messages, using the computer hardware, between the notebook server and the kernel through the gateway using the communication port information for the new container.
2. The method of claim 1, further comprising: including, within the new container, a kernel controller configured to perform the publishing of the communication port information.
3. The method of claim 2, wherein the communication port information includes notebook communication protocol compliant communication ports for the kernel and a communication port of the kernel controller.
4. The method of claim 3, further comprising: in response to receiving a lifecycle management message for the kernel from the notebook server, the gateway sending the lifecycle management message to the communication port of the kernel controller.
5. The method of claim 4, further comprising: the kernel controller, in response to the lifecycle management message, performing a signal write to a process within the new container executing the kernel.
6. The method of claim 1, wherein the first container and the new container execute in different computing nodes of the plurality of computing nodes.
7. The method of claim 1, further comprising: choosing the selected computing node from the plurality of computing nodes to implement the new container.
8. The method of claim 1, further comprising: the gateway receiving a location indicating the selected computing node in which the new container is instantiated.
9. A system, comprising: computer hardware, having at least one processor, configured to initiate operations including: executing a notebook server in a first container, wherein the notebook server is configured to communicate with a gateway in a second container; in response to a request for a kernel from the notebook server, the gateway requesting a new container including the kernel from a container manager; instantiating the new container including the kernel within a selected computing node of a plurality of computing nodes; publishing communication port information for the new container to the gateway; and exchanging electronic messages between the notebook server and the kernel through the gateway using the communication port information for the new container.
10. The system of claim 9, wherein the computer hardware is configured to initiate operations further comprising: including, within the new container, a kernel controller configured to perform the publishing of the communication port information.
11. The system of claim 10, wherein the communication port information includes notebook communication protocol compliant communication ports for the kernel and a communication port of the kernel controller.
12. The system of claim 11, wherein the computer hardware is configured to initiate operations further comprising: in response to receiving a lifecycle management message for the kernel from the notebook server, the gateway sending the lifecycle management message to the communication port of the kernel controller.
13. The system of claim 12, wherein the computer hardware is configured to initiate operations further comprising: the kernel controller, in response to the lifecycle management message, performing a signal write to a process within the new container executing the kernel.
14. The system of claim 9, wherein the first container and the new container execute in different computing nodes of the plurality of computing nodes.
15. The system of claim 9, wherein the computer hardware is configured to initiate operations further comprising: choosing the selected computing node from the plurality of computing nodes to implement the new container.
16. The system of claim 9, wherein the computer hardware is configured to initiate operations further comprising: the gateway receiving a location indicating the selected computing node in which the new container is instantiated.
17. A computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by computer hardware to cause the computer hardware to initiate operations comprising: executing a notebook server in a first container, wherein the notebook server is configured to communicate with a gateway in a second container; in response to a request for a kernel from the notebook server, the gateway requesting a new container including the kernel from a container manager; instantiating the new container including the kernel within a selected computing node of a plurality of computing nodes; publishing communication port information for the new container to the gateway; and exchanging electronic messages between the notebook server and the kernel through the gateway using the communication port information for the new container.
18. The computer program product of claim 17, wherein the program instructions are executable by the computer hardware to cause the computer hardware to initiate operations further comprising: including, within the new container, a kernel controller configured to perform the publishing of the communication port information, wherein the communication port information includes notebook communication protocol compliant communication ports for the kernel and a communication port of the kernel controller; in response to receiving a lifecycle management message for the kernel from the notebook server, the gateway sending the lifecycle management message to the communication port of the kernel controller; and the kernel controller, in response to the lifecycle management message, performing a signal write to a process within the new container executing the kernel.
19. The computer program product of claim 17, wherein: the first container executes in a first computing node of the plurality of computing nodes; and the second container executes in a second computing node of the plurality of computing nodes.
20. The computer program product of claim 17, wherein the program instructions are executable by the computer hardware to cause the computer hardware to initiate operations further comprising: choosing the selected computing node from the plurality of computing nodes to implement the second container.
</claims>
</document>
