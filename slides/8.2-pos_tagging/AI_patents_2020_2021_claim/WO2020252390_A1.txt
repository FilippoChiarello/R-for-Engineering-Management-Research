<document>

<filing_date>
2020-06-12
</filing_date>

<publication_date>
2020-12-17
</publication_date>

<priority_date>
2019-06-12
</priority_date>

<ipc_classes>
G06F9/44,G06F9/50,H04L12/02
</ipc_classes>

<assignee>
AHMANN, WILLIAM, F.
ARIGATO MACHINE, INC., DBA MANIFOLD
</assignee>

<inventors>
BOWES, JAMES
MACDONALD, JEVON
ROSATI, Domenic
</inventors>

<docdb_family_id>
73781083
</docdb_family_id>

<title>
PREDICTIVE AUTOSCALING AND RESOURCE OPTIMIZATION
</title>

<abstract>
Techniques for predictive autoscaling and resource optimization of software deployments. In an implementation, users declare performance objectives, and machine learning of application behavior and load profile is used to determine minimum cost resourcing to meet the declared performance objectives. In an embodiment, convergent deployments are monitored and related feedback is provided to improve forecasting, behavior modeling, and resource estimation over time.
</abstract>

<claims>
1. A system comprising:
a declarative performance interface engine configured to:
receive service level agreement (SLA) metrics;
convert the SLA metrics to declarative performance data structures, the data structures representing declared performance objectives for software deployment; monitor performance indicators of deployed software;
a convergent deployment, resource, and application level metrics collection engine configured to monitor resource usage of deployed software;
a dynamics estimation engine configured to generate an application behavior model, the application behavior model based on performance indicators and resource usage as a function of load;
an application load forecasting engine configured to forecast load at a future time; a minimum cost optimization engine configured to generate minimum cost optimization parameters based on the declarative performance data structures, the application behavior model, and the forecasted load;
a predictive autoscaling and resource optimization operator engine configured to provide the minimum cost optimization parameters to an optimal configuration for scale resources actuator engine;
the optimal configuration for scale resources actuator engine configured to execute convergent deployments;
a load distribution and metrics engine configured to perform load balancing on one or more of traffic to the convergent deployments and traffic from the convergent deployments, the load distribution and metrics engine being configured by the optimal configuration for scale resources actuator engine in accordance with the minimum cost optimization parameters;
the convergent deployment, resource, and application level metrics collection engine further configured to:
monitor resources associated with the convergent deployments; provide feedback associated with the convergent deployments to the dynamics estimation engine;
the dynamics estimation engine further configured to generate an updated application behavior model based on the feedback.
2. The system of claim 1, wherein the SLA metrics comprise one or more of service level indicator (SLI) metrics and service level objective (SLO) metrics.
3. The system of claim 1, wherein the SLA metrics are defined by a human agent.
4. The system of claim 1, wherein the SLA metrics are defined by an artificial agent.
5. The system of claim 1, wherein the performance indicators comprise one or more of request count and request duration.
6. The system of claim 1, wherein the resource usage comprises usage of one or more of memory, CPU power, disk I/O, and network I/O.
7. The system of claim 1, wherein the application load forecasting engine is configured to forecast one or more of seasonal load, trendy load, bursty load, and random load.
8. The system of claim 1, wherein the application load forecasting engine is configured to estimate a forecast pattern for use in setting resource limits.
9. The system of claim 1, wherein the dynamics estimation engine generates the application behavior model using deep learning.
10. The system of claim 1, further comprising a predictive autoscaling and resource optimization operator engine configured to determine measured error from the declared performance objectives.
11. A method comprising:
receiving service level agreement (SLA) metrics;
converting the SLA metrics to declarative performance data structures, the data structures representing declared performance objectives for software deployment;
monitoring performance indicators and resource usage of deployed software;
generating an application behavior model based on performance indicators and resource usage as a function of load;
forecasting load at a future time; generating minimum cost optimization parameters based on the declarative performance data structures, the application behavior model, and the forecasted load;
executing convergent deployments;
performing load balancing on one or more of traffic to the convergent deployments and traffic from the convergent deployments in accordance with the minimum cost optimization parameters;
monitoring resources associated with the convergent deployments;
providing feedback associated with the convergent deployments;
generating an updated application behavior model based on the feedback.
12. The method of claim 11, wherein the SLA metrics comprise one or more of service level indicator (SLI) metrics and service level objective (SLO) metrics.
13. The method of claim 11, wherein the SLA metrics are defined by an artificial agent.
14. The method of claim 11, wherein the performance indicators comprise one or more of request count and request duration.
15. The method of claim 11, wherein the resource usage comprises usage of one or more of memory, CPU power, disk I/O, and network I/O.
16. The method of claim 11, wherein the forecasted load comprises one or more of seasonal load, trendy load, bursty load, and random load.
17. The method of claim 11, further comprising estimate a forecast pattern for use in setting resource limits.
18. The method of claim 11, wherein the application behavior model is generated using deep learning.
19. The method of claim 11, further comprising determining measured error from the declared performance objectives.
20. A system comprising:
means for receiving service level agreement (SLA) metrics;
means for converting the SLA metrics to declarative performance data structures, the data structures representing declared performance objectives for software deployment; means for monitoring performance indicators and resource usage of deployed software;
means for generating an application behavior model based on performance indicators and resource usage as a function of load;
means for forecasting load at a future time;
means for generating minimum cost optimization parameters based on the declarative performance data structures, the application behavior model, and the forecasted load;
means for executing convergent deployments;
means for performing load balancing on one or more of traffic to the convergent deployments and traffic from the convergent deployments in accordance with the minimum cost optimization parameters;
means for monitoring resources associated with the convergent deployments;
means for providing feedback associated with the convergent deployments;
means for generating an updated application behavior model based on the feedback.
</claims>
</document>
