<document>

<filing_date>
2018-12-28
</filing_date>

<publication_date>
2020-09-01
</publication_date>

<priority_date>
2018-12-28
</priority_date>

<ipc_classes>
G06T1/60,G06T15/00,G06T15/06,G06T17/00
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
BENTHIN, CARSTEN
DOYLE, MICHAEL
JANUS, SCOTT
LAWS, PHILIP
LIKTOR, GABOR
SUPIKOV, ALEXEY
SURTI, PRASOONKUMAR
VAIDYANATHAN, KARTHIK
</inventors>

<docdb_family_id>
71079877
</docdb_family_id>

<title>
Apparatus and method for a hierarchical beam tracer
</title>

<abstract>
Apparatus and method for a hierarchical beam tracer. For example, one embodiment of an apparatus comprises: a beam generator to generate beam data associated with a beam projected into a graphics scene; a bounding volume hierarchy (BVH) generator to generate BVH data comprising a plurality of hierarchically arranged BVH nodes; a hierarchical beam-based traversal unit to determine whether the beam intersects a current BVH node and, if so, to responsively subdivide the beam into N child beams to test against the current BVH node and/or to traverse further down the BVH hierarchy to select a new BVH node, wherein the hierarchical beam-based traversal unit is to iteratively subdivide successive intersecting child beams and/or to continue to traverse down the BVH hierarchy until a leaf node is reached with which at least one final child beam is determined to intersect; the hierarchical beam-based traversal unit to generate a plurality of rays within the final child beam; and intersection hardware logic to perform intersection testing for any rays intersecting the leaf node, the intersection testing to determine intersections between the rays intersecting the leaf node and primitives bounded by the leaf node.
</abstract>

<claims>
1. An apparatus comprising: a beam generator to generate beam data associated with a beam projected into a graphics scene; a bounding volume hierarchy (BVH) generator to generate BVH data comprising a plurality of hierarchically arranged BVH nodes; a hierarchical beam-based traversal unit to determine whether the beam intersects a current BVH node and, if so, to responsively subdivide the beam into N child beams to test against the current BVH node and/or to traverse further down the BVH hierarchy to select a new BVH node, wherein the hierarchical beam-based traversal unit is to iteratively subdivide successive intersecting child beams and/or to continue to traverse down the BVH hierarchy until a leaf node is reached with which at least one final child beam is determined to intersect; the hierarchical beam-based traversal unit to generate a plurality of rays within the final child beam; and intersection hardware logic to perform intersection testing for any rays intersecting the leaf node, the intersection testing to determine intersections between the rays intersecting the leaf node and primitives bounded by the leaf node.
2. The apparatus of claim 1 wherein the hierarchical beam-based traversal unit is to terminate traversal of a sub-tree of the BVH hierarchy upon detecting that a first beam does not intersect a parent node of the sub-tree.
3. The apparatus of claim 1 wherein the BVH generator is to generate the BVH data is to be generated based on evaluation of a plurality of input primitives of the graphics scene.
4. The apparatus of claim 1 further comprising: one or more graphics cores to execute one or more graphics shaders spawned upon the intersection hardware logic detecting the intersections between the rays and the primitives.
5. The apparatus of claim 4 wherein at least one of the graphics shaders comprises a pixel shader to perform shading operations on pixels associated with the intersections.
6. The apparatus of claim 5 wherein the graphics cores comprise a plurality of execution units (EUs) to execute the graphics shaders.
7. The apparatus of claim 6 further comprising: a scheduler coupled to the EUs, the scheduler to schedule execution of the one or more graphics shaders on the EUs.
8. The apparatus of claim 1 further comprising: a cache local to the hierarchical beam-based traversal unit and intersection hardware logic to store relevant portions of the BVH data and beam data.
9. A method comprising: generating beam data associated with a beam projected into a graphics scene; generating BVH data comprising a plurality of hierarchically arranged BVH nodes; determining whether the beam intersects a current BVH node and, if so, responsively subdividing the beam into N child beams to test against the current BVH node and/or traversing further down the BVH hierarchy to select a new BVH node, iteratively subdividing successive intersecting child beams and/or further traversing down the BVH hierarchy until a leaf node is reached with which at least one final child beam is determined to intersect; generating a plurality of rays within the final child beam; and performing intersection testing for any rays intersecting the leaf node, the intersection testing to determine intersections between the rays intersecting the leaf node and primitives bounded by the leaf node.
10. The method of claim 9 further comprising: terminating traversal of a sub-tree of the BVH hierarchy upon detecting that a first beam does not intersect a parent node of the sub-tree.
11. The method of claim 9 further comprising: generating the BVH data based on evaluation of a plurality of input primitives of the graphics scene.
12. The method of claim 9 further comprising: executing one or more graphics shaders on at least one graphics core, the one or more graphics shaders spawned upon the intersection hardware logic detecting the intersections between the rays and the primitives.
13. The method of claim 12 wherein at least one of the graphics shaders comprises a pixel shader to perform shading operations on pixels associated with the intersections.
14. The method of claim 13 wherein the graphics cores comprise a plurality of execution units (EUs) to execute the graphics shaders.
15. The method of claim 14 further comprising: dynamically scheduling execution of the one or more graphics shaders on the EUs.
16. The method of claim 9 further comprising: storing relevant portions of the BVH data and beam data in a cache local to the hierarchical beam-based traversal unit.
17. A non-transitory machine-readable medium having program code stored thereon which, when executed by a machine, causes the machine to perform the operations of: generating beam data associated with a beam projected into a graphics scene; generating BVH data comprising a plurality of hierarchically arranged BVH nodes; determining whether the beam intersects a current BVH node and, if so, responsively subdividing the beam into N child beams to test against the current BVH node and/or traversing further down the BVH hierarchy to select a new BVH node, iteratively subdividing successive intersecting child beams and/or further traversing down the BVH hierarchy until a leaf node is reached with which at least one final child beam is determined to intersect; generating a plurality of rays within the final child beam; and performing intersection testing for any rays intersecting the leaf node, the intersection testing to determine intersections between the rays intersecting the leaf node and primitives bounded by the leaf node.
18. The machine-readable medium of claim 17 further comprising program code to cause the machine to perform the operations of: terminating traversal of a sub-tree of the BVH hierarchy upon detecting that a first beam does not intersect a parent node of the sub-tree.
19. The machine-readable medium of claim 17 further comprising program code to cause the machine to perform the operations of: generating the BVH data based on evaluation of a plurality of input primitives of the graphics scene.
20. The machine-readable medium of claim 17 further comprising program code to cause the machine to perform the operations of: executing one or more graphics shaders on at least one graphics core, the one or more graphics shaders spawned upon the intersection hardware logic detecting the intersections between the rays and the primitives.
21. The machine-readable medium of claim 20 wherein at least one of the graphics shaders comprises a pixel shader to perform shading operations on pixels associated with the intersections.
22. The machine-readable medium of claim 21 wherein the graphics cores comprise a plurality of execution units (EUs) to execute the graphics shaders.
23. The machine-readable medium of claim 22 further comprising program code to cause the machine to perform the operations of: dynamically scheduling execution of the one or more graphics shaders on the EUs.
24. The machine-readable medium of claim 17 further comprising program code to cause the machine to perform the operations of: storing relevant portions of the BVH data and beam data in a cache local to the hierarchical beam-based traversal unit.
</claims>
</document>
