<document>

<filing_date>
2020-04-30
</filing_date>

<publication_date>
2020-08-13
</publication_date>

<priority_date>
2017-11-07
</priority_date>

<ipc_classes>
G06N20/00,G06N5/02
</ipc_classes>

<assignee>
HUAWEI TECHNOLOGIES COMPANY
</assignee>

<inventors>
CHEN, FEI
DONG, ZHENHUA
HE, XIUQIANG
LI, ZHENGUO
PENG, SHUAIHUA
QIAN LI
</inventors>

<docdb_family_id>
66400884
</docdb_family_id>

<title>
PREDICTION METHOD, TERMINAL, AND SERVER
</title>

<abstract>
Example prediction methods and apparatus are described. One example includes sending a first model parameter and a second model parameter by a server to a plurality of terminals. The first model parameter and the second model parameter are adapted to a prediction model of the terminal. The server receives a first prediction loss sent by at least one of the plurality of terminals. A first prediction loss sent by each of the at least one terminal is calculated by the terminal based on the prediction model that uses the first model parameter and the second model parameter. The server updates the first model parameter based on the first prediction loss sent by the at least one terminal to obtain an updated first model parameter. The server updates the second model parameter based on the first prediction loss sent by the at least one terminal to obtain an updated second model parameter.
</abstract>

<claims>
1. A machine learning model training method, comprising: receiving, by a terminal, a first parameter and a second parameter of an algorithm model on a server that are sent by the server, wherein the first parameter is used as an initial parameter of a machine learning model of the terminal, and wherein the second parameter is used to indicate a manner in which the terminal trains the machine learning model; training, by the terminal, the machine learning model on the terminal based on the first parameter, the second parameter, and training set data, wherein the training set data comprises a plurality of training samples, wherein each training sample comprises a first eigenvector and a corresponding first label, and wherein the first eigenvector is constructed based on user information in historical data of the terminal; obtaining, by the terminal, a test result based on test data and the machine learning model; calculating, by the terminal, a loss gradient based on the test result; and uploading, by the terminal, the loss gradient to the server, wherein the loss gradient is used by the server to update the first parameter and the second parameter.
2. The method according to claim 1, wherein the calculating, by the terminal, a loss gradient based on the test result comprises: calculating, by the terminal, a prediction loss based on the test result and a label that is corresponding to the test data; and calculating, by the terminal, the loss gradient based on the prediction loss.
3. The method according to claim 2, wherein the test data comprises a plurality of pieces of test sample data, wherein each piece of test sample data comprises a second eigenvector and a corresponding second label, and wherein each piece of test sample data is corresponding to one test result, wherein: the calculating, by the terminal, a prediction loss based on the test result and a label that is corresponding to the test data comprises: calculating, by the terminal, a prediction loss of each of the plurality of pieces of test sample data based on the test result and the second label that are corresponding to each of the plurality of pieces of test sample data; the calculating, by the terminal, the loss gradient based on the prediction loss comprises: calculating, by the terminal, a loss gradient of each of the plurality of pieces of test sample data based on the prediction loss of each of the plurality of pieces of test sample data; and performing, by the terminal, average processing on a plurality of loss gradients corresponding to the plurality of pieces of test sample data to obtain a target loss gradient; and the uploading, by the terminal, the loss gradient to the server comprises: uploading, by the terminal, the target loss gradient to the server.
4. The method according to claim 2, wherein the test data comprises a plurality of pieces of test sample data, wherein each piece of test sample data comprises a second eigenvector and a corresponding second label, and wherein each piece of test sample data is corresponding to one test result, wherein: the calculating, by the terminal, a prediction loss based on the test result and a label that is corresponding to the test data comprises: calculating, by the terminal, a prediction loss of each of the plurality of pieces of test sample data based on the test result and the second label that are corresponding to each of the plurality of pieces of test sample data; and averaging, by the terminal, a plurality of prediction losses corresponding to the plurality of pieces of test sample data to obtain an average prediction loss; the calculating, by the terminal, the loss gradient based on the prediction loss comprises: calculating, by the terminal, a target loss gradient based on the average prediction loss; and the uploading, by the terminal, the loss gradient to the server comprises: uploading, by the terminal, the target loss gradient to the server.
5. The method according to claim 3, after the calculating, by the terminal, a prediction loss of each of the plurality of pieces of test sample data based on the test result and the second label that are corresponding to each of the plurality of pieces of test sample data, further comprising: determining, by the terminal, that the prediction loss of each of the plurality of pieces of test sample data satisfies a preset condition, wherein the preset condition is used to indicate that a fluctuation value relative to a last calculated average prediction loss is less than a preset threshold, and wherein the average prediction loss is obtained by the terminal by averaging a plurality of prediction losses corresponding to the plurality of pieces of test sample data.
6. The method according to claim 5, comprising: in response to determining that a prediction loss of test sample data i does not satisfy the preset condition, skipping calculating, by the terminal, a loss gradient corresponding to the prediction loss of the test sample data i; or skipping calculating the average prediction loss based on the prediction loss of the test sample data i, wherein the test sample data i is any one of the plurality of pieces of test sample data.
7. The method according to claim 1, before the receiving, by a terminal, a first parameter and a second parameter of an algorithm model on a server that are sent by the server, comprising: sending, by the terminal, a structure identifier of the machine learning model to the server, wherein the structure identifier is used by the server to determine, based on the structure identifier, the algorithm model corresponding to the machine learning model.
8. A prediction method, comprising: obtaining, by a first terminal, user information of the first terminal; generating, by the first terminal, a target eigenvector based on the user information; and inputting, by the first terminal, the target eigenvector into a target prediction model to obtain a target prediction result, wherein the target prediction model is a local machine learning model that is obtained through training by the first terminal based on a first parameter, a second parameter, and historical data of the first terminal, wherein the first parameter and the second parameter are two parameters of an algorithm model on a server that are sent by the server, wherein the first parameter is used as an initial parameter of the machine learning model of the first terminal, wherein the second parameter is used to indicate a manner in which the first terminal trains the machine learning model, wherein the first parameter and the second parameter are obtained by the server based on a plurality of loss gradients fed back by a plurality of terminals, and wherein any loss gradient is calculated by a corresponding terminal based on local historical data.
9. The method according to claim 8, before the inputting, by the first terminal, the target eigenvector into a target prediction model to obtain a target prediction result, comprising: sending, by the first terminal, a parameter update request to the server, wherein the parameter update request is used to request the server to send a last updated first parameter and second parameter of the algorithm model; receiving, by the first terminal, the last updated first parameter and second parameter that are sent by the server; and training, by the first terminal, the target prediction model based on the last updated first parameter and second parameter and the historical data of the first terminal, wherein the inputting, by the first terminal, the target eigenvector into a target prediction model to obtain a target prediction result comprises: inputting, by the first terminal, the target eigenvector into a trained target prediction model to obtain the target prediction result.
10. The method according to claim 9, wherein the parameter update request comprises a structure identifier of the machine learning model corresponding to the target prediction model, and wherein the structure identifier is used by the server to determine, based on the structure identifier, the algorithm model corresponding to the target prediction model.
11. The method according to claim 8, after the inputting, by the first terminal, the target eigenvector into a target prediction model to obtain a target prediction result, further comprising: uploading, by the first terminal, a prediction result score to the server, wherein the prediction result score is given by a user of the first terminal for the target prediction result, wherein the prediction result score is used by the server to determine a weighting coefficient, wherein the weighting coefficient is used by the server to process the loss gradients uploaded by the plurality of terminals to obtain a weighted loss gradient, wherein the weighted loss gradient is used by the server to update the first parameter and the second parameter, and wherein the plurality of terminals comprise the first terminal.
12. A machine learning model training method, comprising: sending, by a server, a first parameter and a second parameter of an algorithm model on the server to a plurality of terminals, wherein the first parameter is used as an initial parameter of a machine learning model of each of the plurality of terminals, wherein the second parameter is used to indicate a manner in which each of the plurality of terminals trains the machine learning model, and wherein machine learning models of the plurality of terminals have a same structure; receiving, by the server and within a preset time window, a loss gradient uploaded by at least one terminal of the plurality of terminals; and updating, by the server, the first parameter and the second parameter based on the loss gradient uploaded by the at least one terminal.
13. The method according to claim 12, before the sending, by a server, a first parameter and a second parameter to a plurality of terminals, comprising: initializing, by the server, the first parameter and the second parameter of the algorithm model.
14. The method according to claim 12, comprising: resetting, by the server, the preset time window based on a probability that the plurality of terminals upload the loss gradient.
15. The method according to claim 12, wherein the plurality of terminals belong to a same group, and wherein the same group is used to indicate that the plurality of terminals in the group have a same or similar attribute characteristic.
16. The method according to claim 15, wherein the attribute characteristic comprises a geographical area.
17. The method according to claim 12, further comprising: receiving, by the server, a prediction result score uploaded by the at least one terminal, wherein the prediction result score is given by a terminal user for a prediction result of the machine learning model; and determining, by the server, a weighting coefficient based on the prediction result score; wherein the updating, by the server, the first parameter and the second parameter based on the loss gradient uploaded by the at least one terminal comprises: performing, by the server and based on the weighting coefficient, weighted averaging processing on the loss gradient uploaded by the at least one terminal to obtain a weighted loss gradient; and updating, by the server, the first parameter and the second parameter based on the weighted loss gradient.
18. The method according to claim 12, before the sending, by a server, a first parameter and a second parameter to a plurality of terminals, further comprising: receiving, by the server, structure identifier, uploaded by the plurality of terminals, of the respective machine learning models, wherein the structure identifier is used by the server to determine the algorithm model corresponding to the structure of the machine learning model.
19. The method according to claim 12, comprising: receiving, by the server, a parameter update request sent by a first terminal, wherein the parameter update request is used to request the server to send a last updated first parameter and second parameter, and wherein the first terminal is any one of the plurality of terminals; and sending, by the server, the last updated first parameter and second parameter to the first terminal.
20. A terminal, comprising at least one processor and a storage medium, wherein the storage medium stores programmable instruction, and wherein the programmable instructions, when executed by the at least one processor, instruct the at least one processor to perform operations comprising: obtaining, by a first terminal, user information of the first terminal; generating, by the first terminal, a target eigenvector based on the user information; and inputting, by the first terminal, the target eigenvector into a target prediction model to obtain a target prediction result, wherein wherein the target prediction model is a local machine learning model that is obtained through training by the first terminal based on a first parameter, a second parameter, and historical data of the first terminal, wherein the first parameter and the second parameter are two parameters of an algorithm model on a server that are sent by the server, wherein the first parameter is used as an initial parameter of the machine learning model of the first terminal, wherein the second parameter is used to indicate a manner in which the first terminal trains the machine learning model, wherein the first parameter and the second parameter are obtained by the server based on a plurality of loss gradients fed back by a plurality of terminals, and wherein any loss gradient is calculated by a corresponding terminal based on local historical data.
</claims>
</document>
