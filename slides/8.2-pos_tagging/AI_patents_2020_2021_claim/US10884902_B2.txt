<document>

<filing_date>
2017-05-23
</filing_date>

<publication_date>
2021-01-05
</publication_date>

<priority_date>
2017-05-23
</priority_date>

<ipc_classes>
G06F11/07,G06F11/36,G06F8/65,G06F9/44,G06F9/445
</ipc_classes>

<assignee>
UATC
</assignee>

<inventors>
BRADLEY, DAVID MCALLISTER
KISLOVSKIY, DIMA
</inventors>

<docdb_family_id>
64400884
</docdb_family_id>

<title>
Software version verification for autonomous vehicles
</title>

<abstract>
An autonomous vehicle software management system can distribute AV software versions to safety-driven autonomous vehicles (SDAVs) operating within a given region. The system can receive log data from the SDAVs indicating any trip anomalies of the SDAVs while executing the AV software version. When a predetermined safety standard has been met based on the log data, the system can verify the AV software version for execution on fully autonomous vehicles (FAVs) operating within the given region.
</abstract>

<claims>
1. An autonomous vehicle (AV) software management system comprising: a network communication interface connected, over one or more networks, with a plurality of AVs operating throughout a given region; one or more processors; and one or more memory resources storing instructions that, when executed by the one or more processors, cause the AV software management system to: distribute, over the one or more networks, an unverified AV software version to safety-driven autonomous vehicles (SDAVs) operating within the given region, each of the SDAVs including a human safety driver that takes over control of the SDAV when the SDAV, executing the unverified AV software version, requires correction; receive, over the one or more networks, log data from the SDAVs, the log data indicating trip anomalies of the SDAVs while executing the unverified AV software version; when a predetermined safety standard has been met based on the log data, verify the unverified AV software version for execution on fully autonomous vehicles (FAVs) operating within the given region, wherein each of the FAVs is a self-driving vehicle that does not include a human safety driver, and wherein the predetermined safety standard corresponds to a threshold confidence level that the unverified AV software version is safer than an average human driver over a defined set of conditions; and distribute, over the one or more networks, the verified AV software version to a plurality of FAVs operating within the given region for execution, wherein the log data comprises live sensor data, telemetry data, diagnostic data and correlation data indicating which the software versions were in use during operation.
2. The AV software management system of claim 1, wherein the executed instructions further cause the AV software management system to: generate at least one simulation for pre-certifying unverified AV software versions for distribution to the SDAVs for verification.
3. The AV software management system of claim 2, wherein the executed instructions further cause the AV software management system to: prior to distributing the unverified AV software version to the SDAVs, execute the unverified AV software version through the at least one simulation to pre-certify the AV software for distribution to the SDAVs.
4. The AV software management system of claim 2, wherein the at least one simulation comprises a forward simulation running the unverified AV software version on previously recorded vehicle log data corresponding to at least one trip by a data collection vehicle and comprising a set of sensors compatible with the unverified AV software version.
5. The AV software management system of claim 4, wherein the forward simulation simulates at least one failure of an AV.
6. The AV software management system of claim 5, wherein the at least one failure comprises at least one of a sensor failure, an on-board computer failure, or a mechanical failure.
7. The AV software management system of claim 2, wherein the at least one simulation comprises edge case simulations on at least one previously recorded log of an AV, the edge case simulations corresponding to recorded harmful events experienced by the AV.
8. The AV software management system of claim 1, wherein the trip anomalies correspond to at least one of hard braking events, swerve events, collisions, stuck states, or close calls by the SDAVs.
9. The AV software management system of claim 1, wherein the unverified AV software version and the verified AV software version are executable by computational resources of a respective SDAV or FAV to autonomously operate control mechanisms of the respective SDAV or FAV based on a live sensor view.
10. The AV software management system of claim 1, wherein the unverified AV software version correlates to a trip classifier that classifies requested trips as serviceable between SDAVS, FAVs, and human-driven vehicles (HDVs) based on aggregate risk, the trip classifier being unique to the unverified AV software version.
11. The AV software management system of claim 10, wherein the trip classifier determines whether a requested trip qualifies for execution of the unverified AV software version by a selected SDAV based on an aggregate risk quantity for the requested trip.
12. The AV software management system of claim 11, wherein the trip classifier classifies requested trips as serviceable between SDAVS, FAVs, and HDVs using a first set of risk thresholds for SDAVs and a second set of risk thresholds for FAVs, and comparing the aggregate risk quantity to the first set of risk thresholds and the second set of risk thresholds.
13. The AV software management system of claim 1, wherein the executed instructions further cause the AV software management system to: prior to verifying the unverified AV software version, distribute, over the one of more networks, the unverified AV software version to one or more FAVs operating within the given region; receive, over the one or more networks, log data from the one or more FAVs, the log data indicating control decisions by the one or more FAVs in executing the unverified AV software version; and compare the control decisions by the one or more FAVs with previous control decisions by FAVs executing a previously verified AV software version.
14. The AV software management system of claim 13, wherein the executed instructions further cause the AV software management system to: when the control decisions by the one or more FAVs are within a set of nominal ranges as compared to the control decisions by the FAVs executing the previously verified AV software version, pre-certify the unverified AV software version for distribution to the SDAVs.
15. The AV software management system of claim 13, wherein the executed instructions cause the AV software management system to further verify the unverified AV software version for distribution to the one or more FAVs based on the control decisions by the one or more FAVs being within a set of nominal ranges as compared to the control decisions by the FAVs executing the previously verified AV software version.
16. The AV software management system of claim 1, wherein the executed instructions cause the AV software management system to further verify the unverified AV software version for distribution to the FAVs based on the unverified AV software version passing a set of AV test runs in one or more controlled track environments.
17. A non-transitory computer readable medium storing instructions that, when executed by one or more processors, cause the one or more processors to: distribute, over one or more networks, an unverified AV software version to safety-driven autonomous vehicles (SDAVs) operating within a given region, each of the SDAVs including a human safety driver that takes over control of the SDAV when the SDAV, executing the unverified AV software version, requires correction; receive, over the one or more networks, log data from the SDAVs, the log data indicating any trip anomalies of the SDAVs while executing the unverified AV software version; when a predetermined safety standard has been met based on the log data, verify the unverified AV software version for execution on fully autonomous vehicles (FAVs) operating within the given region, wherein each of the FAVs is a self-driving vehicle that does not include a human safety driver, and wherein the predetermined safety standard corresponds to a threshold confidence level that the unverified AV software version is safer than an average human driver over a defined set of conditions; distribute, over the one or more networks, the verified AV software version to a plurality of FAVs operating within the given region for execution, wherein the log data comprises live sensor data, telemetry data, diagnostic data and correlation data indicating which the software versions were in use during operation.
18. A computer-implemented method of verifying software versions for autonomous vehicles (AVs), the method being performed by one or more processors and comprising: distributing, over one or more networks, an unverified AV software version to safety-driven autonomous vehicles (SDAVs) operating within a given region, each of the SDAVs including a human safety driver that takes over control of the SDAV when the SDAV, executing the unverified AV software version, requires correction; receiving, over the one or more networks, log data from the SDAVs, the log data indicating any trip anomalies of the SDAVs while executing the unverified AV software version; when a predetermined safety standard has been met based on the log data, verifying the unverified AV software version for execution on fully autonomous vehicles (FAVs) operating within the given region, wherein each of the FAVs is a self-driving vehicle that does not include a human safety driver, and wherein the predetermined safety standard corresponds to a threshold confidence level that the unverified AV software version is safer than an average human driver over a defined set of conditions; and distributing, over the one or more networks, the verified AV software version to a plurality of FAVs operating within the given region for execution, wherein the log data comprises live sensor data, telemetry data, diagnostic data and correlation data indicating which the software versions were in use during operation.
</claims>
</document>
