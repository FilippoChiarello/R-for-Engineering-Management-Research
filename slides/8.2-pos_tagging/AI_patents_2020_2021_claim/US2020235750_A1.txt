<document>

<filing_date>
2019-11-21
</filing_date>

<publication_date>
2020-07-23
</publication_date>

<priority_date>
2019-01-17
</priority_date>

<ipc_classes>
G06F16/901,H03M7/30,H03M7/38,H04N19/91
</ipc_classes>

<assignee>
CYBORG CORPORATION
</assignee>

<inventors>
HELLE, ALEXANDRE
DUPONT, NICOLAS THOMAS MATHIEU
</inventors>

<docdb_family_id>
68617878
</docdb_family_id>

<title>
SYSTEMS AND METHODS FOR VARIABLE LENGTH CODEWORD BASED, HYBRID DATA ENCODING AND DECODING USING DYNAMIC MEMORY ALLOCATION
</title>

<abstract>
A data encoding system includes a non-transitory memory, a processor, a digital-to-analog converter (DAC) and a transmitter. The non-transitory memory stores a predetermined file size threshold. The processor is in operable communication with the memory, and is configured to receive data. The processor detects a file size associated with the data. When the file size is below the predetermined file size threshold, the processor compresses the data using a variable length codeword (VLC) encoder. When the file size is not below the predetermined file size threshold, the processor compresses the data, using a hash table algorithm. The DAC is configured to receive a digital representation of the compressed data from the processor and convert the digital representation of the compressed data into an analog representation of the compressed data. The transmitter is coupled to the DAC and configured to transmit the analog representation of the compressed data.
</abstract>

<claims>
1. 1-9. (canceled)
10. A method, comprising: receiving a first data; in response to detecting that a file size of the first data is below a file size threshold, selecting a variable length codeword (VLC) encoder, the VLC encoder including a VLC table; transforming, using the VLC encoder, the first data into a second data including a compressed version of the first data; dynamically updating the VLC table in response to transforming the first data into the second data; and storing a digital representation of the second data in non-transitory memory.
11. The method of claim 10, wherein the dynamically updating the VLC table includes shifting a table reference associated with the first data upward in a direction of a top of the VLC table.
12. The method of claim 10, further comprising storing an uncompressed version of the first data.
13. The method of claim 10, wherein sending the digital representation includes sending the digital representation to the converter to cause the second data to be transmitted via one of a wireless transmission, a wired transmission, or an optical transmission.
14. The method of claim 10, wherein the transforming the first data into the second data includes assigning a short codeword to frequently-occurring segments of the first data, and assigning a longer codeword to less frequently occurring segments of the first data.
15. The method of claim 10, wherein the transforming the first data into the second data includes retrieving, based on a segment of the first data, a codeword.
16. The method of claim 10, wherein the transforming the first data into the second data includes storing a representation of a segment of the first data in response to unsuccessfully querying for the segment.
17. 17-21. (canceled)
22. The method of claim 10, further comprising multiplexing the digital representation of the second data with at least one hash table codeword to produce a hybrid bitstream.
23. The method of claim 10, wherein the VLC table is a pre-compiled VLC table that is customized for a specific file type.
24. The method of claim 10, wherein selecting the (VLC) encoder is performed using an artificial intelligence (AI) algorithm.
25. The method of claim 10, further comprising sending the digital representation of the second data to a training data generator for use in generating training data for a machine learning platform.
</claims>
</document>
