<document>

<filing_date>
2018-02-05
</filing_date>

<publication_date>
2020-10-06
</publication_date>

<priority_date>
2017-11-22
</priority_date>

<ipc_classes>
G06F11/14,G06F16/00,G06F16/21,G06F16/23,G06F16/25,G06F16/27
</ipc_classes>

<assignee>
AMAZON TECHNOLOGIES
</assignee>

<inventors>
GOYAL, DUMANSHU
</inventors>

<docdb_family_id>
72664236
</docdb_family_id>

<title>
Continuous verified backups
</title>

<abstract>
A system and technique for creating, in a non-native format, verified snapshots and change log archives for data in a database (e.g., tables, partitions, etc.). To verify accuracy of a conversion of the data and corresponding change log data from a native format to a non-native format, both data from the database and the corresponding change logs are processed separately with a forward transformation process, and then a reverse transformation process. The results of the reverse transformations are then compared to the original data to catch data corruptions or errors when performing the format conversion and creating the snapshot or change log archive so that the corruption or error is not propagated to the snapshot/archive. Various forms of error detection (e.g., byte-level, raw data comparisons, checksums, etc.) and error handling are disclosed. The verified snapshots and change log archives may be used to restore the database, for example.
</abstract>

<claims>
1. A system, comprising: a memory to store program instructions which, if performed by at least one processor, cause the at least one processor to perform a method to at least: receive a trigger to back up a portion of a database, the database in a native format; create, in a non-native format, by a forward converter, a snapshot of a replica of the portion of the database; reverse, by a reverse converter, the snapshot of the replica in the non-native format to a copy of the replica in the native format; based on identifying, at a data-storage-level, a match of the replica to the copy of the replica, send the snapshot of the replica in the non-native format to a snapshot data store; and for received items of a change log that corresponds to the portion of the database: create, by a forward converter, from a native format for the database, an archive of items of the change log in a non-native format; reverse, by a reverse converter, each item of the archive of items in the non-native format to create respective reversed items in the native format; and based on identifying a match of the received items of the change log to the respective reversed items, send the archive of items in the non-native format to an archive data store.
2. The system as recited in claim 1, wherein the program instructions cause the at least one processor to perform the method to at least: generate a checksum for the snapshot of the replica in the non-native format; receive, from the snapshot data store, indication of a successful verification of the checksum at the snapshot data store; and responsive to both i) the data-storage-level identification of the match of the replica to the copy of the replica, and ii) receipt of the successful verification of the checksum at the snapshot data store, indicate that the snapshot has been successfully created.
3. The system as recited in claim 1, wherein the program instructions cause the at least one processor to perform the method to at least: receive a request to restore the portion of the database to a historical point-in-time; create a new table; restore, based at least in part on a snapshot of the replica at the snapshot data store and change log items in the archive data store, the portion of the database to the historical point-in-time in the new table; and mark a table state for the newly-created table as active.
4. The system as recited in claim 1, wherein the system further comprises: a plurality of storage nodes that implement the database, each of which comprises one or more storage devices or logical storage volumes; and a distributed database system that maintains data for the database in one or more partitions, and wherein to maintain the data in the one or more partitions, the distributed database system is configured to store two or more replicas of each of the one or more partitions on respective storage devices or logical storage volumes.
5. A method, comprising: converting a replica of at least a portion of a database from a native format for the database to a non-native format using a forward conversion process to create a snapshot of the replica in the non-native format; reverse-converting the snapshot of the replica in the non-native format to create a copy of the replica in the native format using a reverse conversion process; performing a data-storage-level comparison of the replica to the copy of the replica; and sending the snapshot of the replica in the non-native format to a snapshot data store responsive to the data-storage-level comparison of the replica to the copy of the replica indicating a match.
6. The method as recited in claim 5, further comprising: generating a checksum for the snapshot of the replica in the non-native format; sending the checksum to the snapshot data store; receiving an indication that the checksum was successfully verified at the snapshot data store; and indicating, responsive to both i) the data-storage-level comparison of the replica to the copy of the replica indicating a match, and ii) the successful verification of the checksum at the snapshot data store, that the snapshot has been successfully created.
7. The method as recited in claim 5, where said converting the replica, said reverse-converting the replica, said data-storage-level comparison of the replica, and said sending the snapshot of the replica to the snapshot data store are performed in response to a client request to create a backup, or in response to a regularly-schedule periodic backup defined by a backup system.
8. The method as recited in claim 5, further comprising: converting data from a change log for the replica from the native format for the database to the non-native format using a forward conversion process to create data from the change log in the non-native format; reverse-converting change log data in the non-native format to create a copy of the change log data in the native format using a reverse conversion process; comparing the data from the change log for the replica in the native format to the copy of the change log data in the native format; and sending the data from the change log in the non-native format to a change log archive data store responsive to the comparing indicating a match for each item.
9. The method as recited in claim 8, wherein said converting the replica, said reverse-converting the replica, said data-storage-level comparison of the replica, and said sending the snapshot of the replica to the snapshot data store are performed periodically; and wherein the change log data is received as items in a stream, and said converting the data from the change log, said reverse converting the change log data, and said comparing the data from the change log, are performed as each change log item is received.
10. The method recited in claim 5, wherein said converting the replica of at least the portion of the database from the native format for the database to the non-native format using the forward conversion process to create the snapshot of the replica in the non-native format comprises: converting the replica of at least the portion of the database into in-memory items; serializing the in-memory items to a stream of items in the non-native format; and creating a copy of the replica by locally storing the streamed items in the non-native format.
11. The method recited in claim 10, wherein said reverse-converting the snapshot of the replica in the non-native format to create a copy of the replica in the native format using a reverse conversion process comprises: reading locally stored items into in-memory representations; and reverse converting the in-memory representation of the items to the native format for the database.
12. The method recited in claim 11, wherein said performing the data-storage-level comparison of the replica to the copy of the replica comprises: comparing raw bytes of the native-format items from the replica to raw bytes of the reverse converted items in the native format.
13. The method recited in claim 8, further comprising: receiving a request to restore a portion of the database; and either: creating a new table, restoring, based at least in part on a snapshot of the replica stored in the snapshot data store, and change log items from the change log archive data store, the requested portion of the database in the newly-created table, and marking a table state for the newly-created table as active; or restoring, based at least in part on a snapshot of the replica stored in the snapshot data store, and change log items from the change log archive data store, the requested portion of the database in the table.
14. The method recited in claim 5, further comprising: receiving a trigger to make a snapshot of a second portion of the database; converting a second replica of the second portion of the database from the native format for the database to the non-native format using the forward conversion process to create a snapshot of the second replica in the non-native format; reverse-converting the second replica of the second replica in the non-native format to a copy of the second replica in the native format using the reverse conversion process; performing a data-storage-level comparison of the second replica to the copy of the second replica; and responsive to the data-storage-level comparison of the second replica to the copy of the second replica indicating a mis-match between the second replica to the copy of the second replica, invoking a snapshot error handler configured to perform: retrying said converting, said reverse-converting, and said performing the data-storage-level comparison for the second portion of the database using a different partition replica, retrying said converting, said reverse-converting, and said performing the data-storage-level comparison for the second portion of the database on different host machine, reporting a failure, or flagging an error and continuing with creation of the snapshot of the second portion of the database.
15. A non-transitory computer readable storage medium storing program instructions that, when executed by a computer, cause the computer to: receive change log data corresponding to at least a portion of a database, the data in a native format of the database; transform the change log data to an in-memory format in system memory; convert, via a conversion process, the in-memory change log data to produce change log archive data in a non-native format; reverse-convert, via a reverse-conversion process, the change log archive data from the non-native format to recreate the change log data at a database item-level; perform a storage-level comparison of the recreated change log data to the change log data in the native format of the database; and based at least in part on a determination whether the storage-level comparison verifies that the recreated change log data matches the change log data in the native format of the database, store the change log archive data to a change log archive data store, or invoke a change log error handler.
16. The non-transitory computer readable storage medium as in claim 15, wherein to perform said reverse-convert the change log archive data from the non-native format to recreate the change log data at the database item-level, the program instructions, when executed by the computer, further cause the computer to: reverse-convert the change log archive data from the non-native format to in-memory data in the in-memory format; and transform the in-memory data to the native database storage format to recreate the change log data at the database item-level.
17. The non-transitory computer readable storage medium as in claim 15, wherein to determine whether the storage-level comparison verifies that the recreated change log data matches the change log data in the native format of the database, the program instructions, when executed by the computer, further cause the computer to: compare a serialized persistent data storage format of the recreated change log data to raw bytes of the change log data in the native format of the database; and wherein to store the change log archive data to the change log archive data store, or invoke the change log error handler, the program instructions, when executed by the computer, further cause the computer to: for a comparison that identifies an exact match, store the change log archive data to the change log archive data store; and for a comparison that identifies a mismatch, invoke the change log error handler.
18. The non-transitory computer readable storage medium as in claim 15, where the program instructions, when executed by the computer, further cause the computer to: convert a replica of at least a portion of the database from a native format for the database to a non-native format using a forward conversion process to create a snapshot of the replica in the non-native format; reverse-convert the snapshot of the replica in the non-native format to a copy of the replica in the native format using a reverse conversion process; perform a data-storage-level comparison of the replica to the copy of the replica; and responsive to the data-storage-level comparison of the replica to the copy of the replica indicating a match, send the snapshot of the replica in the non-native format to a snapshot data store.
19. The non-transitory computer readable storage medium as in claim 15, where the program instructions, when executed by the computer, further cause the computer to: receive a request to restore the portion of the database; create a new table; restore, based at least in part on items from the archive data store, the portion of the database in the newly-created table; and mark a table state for the newly-created table as active.
20. The non-transitory computer readable storage medium as in claim 15, wherein subsequent to the program instructions causing the computer invoke the change log error handler, the program instructions, when executed by the computer, further cause the computer to: retry said transform, said convert, said reverse convert, and said perform the storage-level comparison; report a failure; or encode and flag an encoding error.
</claims>
</document>
