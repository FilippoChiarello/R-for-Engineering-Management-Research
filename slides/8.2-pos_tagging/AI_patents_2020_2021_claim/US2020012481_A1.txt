<document>

<filing_date>
2019-09-15
</filing_date>

<publication_date>
2020-01-09
</publication_date>

<priority_date>
2015-09-02
</priority_date>

<ipc_classes>
G06F8/38,G06F9/451
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
KOCHURA, NADIYA
</inventors>

<docdb_family_id>
58095462
</docdb_family_id>

<title>
COMPUTER-VISION BASED EXECUTION OF GRAPHICAL USER INTERFACE (GUI) APPLICATION ACTIONS
</title>

<abstract>
Using computer-vision based training information, a user interface (UI) component of an application-level user interface of an application and rendering coordinates of the UI component within the application-level user interface are recognized. A functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface is identified in accordance with the computer-vision based training information. A replica object of the identified functional class is instantiated within a user interface container separately from the application. An operating system-level event that specifies a functional operation of the UI component and the recognized rendering coordinates of the UI component is generated from the instantiated replica object on an operating system event queue that provides inputs to the application.
</abstract>

<claims>
1. A computer-implemented method, comprising: recognizing, using computer-vision based training information, a user interface (UI) component of an application-level user interface of an application and rendering coordinates of the UI component within the application-level user interface; identifying, in accordance with the computer-vision based training information, a functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface; instantiating a replica object of the identified functional class within a user interface container separately from the application; and generating, from the instantiated replica object on an operating system event queue that provides inputs to the application, an operating system-level event that specifies a functional operation of the UI component and the recognized rendering coordinates of the UI component.
2. The computer-implemented method of claim 1, where recognizing, using the computer-vision based training information, the user interface (UI) component of the application-level user interface of the application and the rendering coordinates of the UI component within the application-level user interface comprises: capturing rendering data of the UI component; classifying the captured rendering data of the UI component according to a user interface component type in accordance with the computer-vision based training information; identifying, by the user interface component type, a class label and an instance identifier of the UI component mapped within the computer-vision based training information; and identifying screen coordinates of the UI component within the rendering data of the UI component.
3. The computer-implemented method of claim 1, where identifying, in accordance with the computer-vision based training information, the functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface comprises: identifying the functional class within the computer-vision based training information using an instance identifier of the UI component identified from captured rendering data of the UI component.
4. The computer-implemented method of claim 1, where the application comprises a first application that is not in focus within a graphical user interface (GUI) to receive operating system inputs generated by an input device, where a second application is in focus within the GUI to receive operating system inputs generated by the input device, and where: recognizing, using the computer-vision based training information, the UI component of the application-level user interface of the application and the rendering coordinates of the UI component within the application-level user interface comprises: recognizing the UI component of the application-level user interface within one of a plurality of display buffers that is associated with a non-focused display view; and generating, from the instantiated replica object on the operating system event queue that provides the inputs to the application, the operating system-level event that specifies the functional operation of the UI component and the recognized rendering coordinates of the UI component comprises: generating the operating system-level event from the instantiated replica object as a non-focus-based input to the application without bringing the application-level user interface into focus within the GUI, where the second application retains the focus within the GUI to receive operating system inputs generated by the input device.
5. The computer-implemented method of claim 1, further comprising creating the computer-vision based training information.
6. A system, comprising: a memory; and a processor programmed to: recognize, using computer-vision based training information in the memory, a user interface (UI) component of an application-level user interface of an application and rendering coordinates of the UI component within the application-level user interface; identify, in accordance with the computer-vision based training information, a functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface; instantiate a replica object of the identified functional class within a user interface container separately from the application; and generate, from the instantiated replica object on an operating system event queue that provides inputs to the application, an operating system-level event that specifies a functional operation of the UI component and the recognized rendering coordinates of the UI component.
7. The system of claim 6, where, in being programmed to recognize, using the computer-vision based training information in the memory, the user interface (UI) component of the application-level user interface of the application and the rendering coordinates of the UI component within the application-level user interface, the processor is programmed to: capture rendering data of the UI component; classify the captured rendering data of the UI component according to a user interface component type in accordance with the computer-vision based training information; identify, by the user interface component type, a class label and an instance identifier of the UI component mapped within the computer-vision based training information; and identify screen coordinates of the UI component within the rendering data of the UI component.
8. The system of claim 6, where, in being programmed to identify, in accordance with the computer-vision based training information, the functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface, the processor is programmed to: identify the functional class within the computer-vision based training information using an instance identifier of the UI component identified from captured rendering data of the UI component.
9. The system of claim 6, where the application comprises a first application that is not in focus within a graphical user interface (GUI) to receive operating system inputs generated by an input device, where a second application is in focus within the GUI to receive operating system inputs generated by the input device, and where: in being programmed to recognize, using the computer-vision based training information in the memory, the UI component of the application-level user interface of the application and the rendering coordinates of the UI component within the application-level user interface, the processor is programmed to: recognize the UI component of the application-level user interface within one of a plurality of display buffers within the memory that is associated with a non-focused display view; and in being programmed to generate, from the instantiated replica object on the operating system event queue that provides the inputs to the application, the operating system-level event that specifies the functional operation of the UI component and the recognized rendering coordinates of the UI component, the processor is programmed to: generate the operating system-level event from the instantiated replica object as a non-focus-based input to the application without bringing the application-level user interface into focus within the GUI, where the second application retains the focus within the GUI to receive operating system inputs generated by the input device.
10. The system of claim 6, where the processor is further programmed to create the computer-vision based training information.
11. A computer program product, comprising: a computer readable storage medium having computer readable program code embodied therewith, where the computer readable storage medium is not a transitory signal per se and where the computer readable program code when executed on a computer causes the computer to: recognize, using computer-vision based training information, a user interface (UI) component of an application-level user interface of an application and rendering coordinates of the UI component within the application-level user interface; identify, in accordance with the computer-vision based training information, a functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface; instantiate a replica object of the identified functional class within a user interface container separately from the application; and generate, from the instantiated replica object on an operating system event queue that provides inputs to the application, an operating system-level event that specifies a functional operation of the UI component and the recognized rendering coordinates of the UI component.
12. The computer program product of claim 11, where, in causing the computer to recognize, using the computer-vision based training information, the user interface (UI) component of the application-level user interface of the application and the rendering coordinates of the UI component within the application-level user interface, the computer readable program code when executed on the computer causes the computer to: capture rendering data of the UI component; classify the captured rendering data of the UI component according to a user interface component type in accordance with the computer-vision based training information; identify, by the user interface component type, a class label and an instance identifier of the UI component mapped within the computer-vision based training information; and identify screen coordinates of the UI component within the rendering data of the UI component.
13. The computer program product of claim 11, where, in causing the computer to identify, in accordance with the computer-vision based training information, the functional class that is mapped within the computer-vision based training information to the UI component and that is used to instantiate the UI component as part of the application-level user interface, the computer readable program code when executed on the computer causes the computer to: identify the functional class within the computer-vision based training information using an instance identifier of the UI component identified from captured rendering data of the UI component.
14. The computer program product of claim 11, where the application comprises a first application that is not in focus within a graphical user interface (GUI) to receive operating system inputs generated by an input device, where a second application is in focus within the GUI to receive operating system inputs generated by the input device, and where: in causing the computer to recognize, using the computer-vision based training information, the UI component of the application-level user interface of the application and the rendering coordinates of the UI component within the application-level user interface, the computer readable program code when executed on the computer causes the computer to: recognize the UI component of the application-level user interface within one of a plurality of display buffers that is associated with a non-focused display view; and in causing the computer to generate, from the instantiated replica object on the operating system event queue that provides the inputs to the application, the operating system-level event that specifies the functional operation of the UI component and the recognized rendering coordinates of the UI component, the computer readable program code when executed on the computer causes the computer to: generate the operating system-level event from the instantiated replica object as a non-focus-based input to the application without bringing the application-level user interface into focus within the GUI, where the second application retains the focus within the GUI to receive operating system inputs generated by the input device.
15. The computer program product of claim 11, where the computer readable program code when executed on the computer further causes the computer to create the computer-vision based training information.
</claims>
</document>
