<document>

<filing_date>
2013-03-27
</filing_date>

<publication_date>
2020-01-22
</publication_date>

<priority_date>
2013-03-27
</priority_date>

<ipc_classes>
G06F8/51
</ipc_classes>

<assignee>
NETFECTIVE TECHNOLOGY
</assignee>

<inventors>
CHAMPAGNE, CHRISTIAN
</inventors>

<docdb_family_id>
48576462
</docdb_family_id>

<title>
METHOD FOR TRANSFORMING FIRST CODE INSTRUCTIONS IN A FIRST PROGRAMMING LANGUAGE INTO SECOND CODE INSTRUCTIONS IN A SECOND PROGRAMMING LANGUAGE
</title>

<abstract>
The present invention relates to a method for transforming first code instructions in a first programming language into second code instructions in a second programming language, characterized in that it comprises performing at a processing unit (11) steps of: (a) parsing the first code instructions according to semantic rules of the first programming language so as to generate an abstract syntax tree of the first code instructions; (b) mapping the abstract syntax tree into an architectural model of the first code in a knowledge description language; (c) analysing the architectural model so as to identify design patterns representative of elementary software functions of the first code instructions; (d) enriching the architectural model with semantic tags determined in function of the design patterns identified and pattern matching rules, the semantic tags resolving semantic ambiguity within the architectural model; (e) transforming the tagged architectural model into model in a software modelling language independent from the first and second programming languages; (f) generating the second code instructions in the second language from the software modelling language. The present invention also relates to a system for carrying out said method.
</abstract>

<claims>
1. A method for transforming first code instructions in a first programming language into second code instructions in a second programming language, comprising performing at a processing unit (11) steps of: (a) parsing the first code instructions according to semantic rules of the first programming language so as to generate an abstract syntax tree of the first code instructions; (b) mapping the abstract syntax tree into an architectural model of the first code in accordance with the Knowledge Description Meta-Model, so as to retrieve a macro-structure of the architecture of the first code ; (c) analysing the architectural model so as to identify for at least one element of the architectural model a design pattern matching said element of the architectural model, each design pattern being representative of an elementary software function of the first code instructions, elements of the architectural model which do not match any design pattern being ignored; characterized by (d) enriching the architectural model with semantic tags associated with the design patterns identified for elements of the architectural model according to pattern matching rules, the semantic tags resolving semantic ambiguity within the architectural model; (e) transforming the tagged architectural model into a software modelling language independent from the first and second programming languages, wherein said software modelling language is UML2 with stereotypes for adding semantic information; (f) generating the second code instructions in the second language from the UML2.
2. A method according to claim 1, wherein steps (b) to (f) are performed according to a knowledge base, said knowledge base describing: - a list of concepts of the first programming language and of the second programming language, said concepts being expressed as meta-elements, meta-relationships and meta-rules; - A list of elementary actions associated with concepts; - A list of conditions for elementary actions triggering.
3. A method according to claim 2, wherein the knowledge base is a customisable base.
4. A method according to claim 3, wherein modification of the knowledge base is suggested to a user when unknown design patterns are identified.
5. A method according to any one of claims 1 to 4, wherein the first code instructions are associated with a first database in a first format compatible with the first programming language, the method comprising a further step (g) of converting the first database into a second database in a second format compatible with the second programming language.
6. A method according to claim 5, comprising a further step (h) of executing the first code instructions on a sample first database, executing the second code instructions on a sample second database, and comparing respective results so as to test the reliability of the second code instructions.
7. A method according to any one of claims 1 to 6, wherein step (e) comprises a further step (e1) of modifying said meta-model so as to enhance functionalities of the first code instructions.
8. A system for transforming first code instructions in a first programming language into second code instructions in a second programming language, the system comprising processing means configured for performing the method according to any one of claims 1 to 7.
</claims>
</document>
