<document>

<filing_date>
2020-01-28
</filing_date>

<publication_date>
2020-08-06
</publication_date>

<priority_date>
2019-01-31
</priority_date>

<ipc_classes>
H04L29/08
</ipc_classes>

<assignee>
GEOQUEST SYSTEMS
SCHLUMBERGER CANADA
SCHLUMBERGER TECHNOLOGY
SERVICES PETROLIERS SCHLUMBERGER
</assignee>

<inventors>
ANIGBOGU, JULIAN
CHEN, SHAOYU
GUVVALA, THEJA SWAROOP REDDY
KRISHNAMANAIDU, ETHIRAJ
SPOLNICKI, BRIAN
</inventors>

<docdb_family_id>
71841095
</docdb_family_id>

<title>
NOTIFICATION AND TASK MANAGEMENT SYSTEM
</title>

<abstract>
A method may include receiving, at a listener channel, an event described by a message, determining, using the message, a subscriber of the listener channel, determining, using a delivery preference of the subscriber, an adapter to deliver the message, and dispatching, via the adapter, the message to the subscriber.
</abstract>

<claims>
What is claimed is:
1. A method comprising :
receiving, at a listener channel, a first event described by a first message;
determining, using the first message, a first subscriber of the listener channel; determining, using a first delivery preference of the first subscriber, a first adapter to deliver the first message; and
dispatching, via the first adapter, the first message to the first subscriber.
2. The method of claim 1, wherein the first event is received from a first publisher having a publisher type, and wherein the first message comprises the first publisher and the publisher type, the method further comprising:
before receiving the event at the listener channel, determining a communication mode based on the first message,
wherein the first subscriber is further determined using the communication mode.
3. The method of claim 1, further comprising:
assigning, to the first message and based on a publisher type of a first publisher and a subscriber type of the first subscriber, a first interaction type of a plurality of interaction types, wherein the first event is received from the first publisher, and wherein the first adapter is further determined using the first interaction type.
4. The method of claim 1, wherein the subscriber is a software application that performs an action in response to receiving the first message.
5. The method of claim 1, wherein the first event corresponds to a priority level, and wherein the first adapter is further determined using the priority level.
6. The method of claim 1, wherein the first event corresponds to a context, the method further comprising:
determining, using the context, a second subscriber;
determining, using a second delivery preference of the second subscriber, a second adapter to deliver the first message; and
dispatching, via the second adapter, the first message to the second subscriber.
7. The method of claim 1, further comprising:
extracting, from a plurality of messages, a plurality of features;
classifying, using the machine learning model, the plurality of features as an anomaly;
generating a second event based on the anomaly; and
receiving, at the listener channel, the second event, wherein the second event is described by a second message.
8. A system comprising:
a plurality of listener channels comprising a listener channel;
a plurality of subscribers to the plurality of listener channels, the plurality of subscribers comprising a first subscriber of the listener channel; a message processor configured to:
receive, at the listener channel, a first event described by a first message; an inbox service configured to:
determine, using the first message, the first subscriber of the listener channel; and
a message dispatcher configured to:
determine, using a first delivery preference of the first subscriber, a first adapter to deliver the first message; and
dispatch, via the first adapter, the first message to the first subscriber.
9. The system of claim 8,
wherein the message processor receives the first event from a first publisher having a publisher type,
wherein the first message comprises the first publisher and the publisher type, and wherein the inbox service is further configured to:
before the event is received at the listener channel, determine a communication mode based on the first message, and
determine the first subscriber using the communication mode.
10. The system of claim 8, wherein the inbox service is further configured to:
assign, to the first message and based on a publisher type of a first publisher and a subscriber type of the first subscriber, a first interaction type of a plurality of interaction types, wherein the first event is received from the first publisher, and wherein the first adapter is further determined using the first interaction type.
11. The system of claim 8, wherein the subscriber is a software application that performs an action in response to receiving the first message.
12. The system of claim 8, wherein the first event corresponds to a priority level, and wherein the first adapter is further determined using the priority level.
13. The system of claim 8,
wherein the first event corresponds to a context,
wherein the inbox service is further configured to determine, using the context, a second subscriber, and
wherein the message dispatcher is further configured to:
determine, using a second delivery preference of the second subscriber, a second adapter to deliver the first message, and
dispatch, via the second adapter, the first message to the second subscriber.
14. The system of claim 8, further comprising a machine learning model, wherein the message processor is further configured to:
extract, from a plurality of messages, a plurality of features;
classify, using the machine learning model, the plurality of features as an anomaly; generate a second event based on the anomaly; and
send, to the listener channel, the second event, wherein the second event is described by a second message.
15. A non-transitory computer readable medium comprising instructions that, when executed by a computer processor, perform:
receiving, at a listener channel, a first event described by a first message;
determining, using the first message, a first subscriber of the listener channel; determining, using a first delivery preference of the first subscriber, a first adapter to deliver the first message; and
dispatching, via the first adapter, the first message to the first subscriber.
16. The non-transitory computer readable medium of claim 15, wherein the first event is received from a first publisher having a publisher type, wherein the first message comprises the first publisher and the publisher type, and wherein the instructions further perform:
before receiving the event at the listener channel, determining a communication mode based on the first message,
wherein the first subscriber is further determined using the communication mode.
17. The non-transitory computer readable medium of claim 15, further comprising instructions that perform:
assigning, to the first message and based on a publisher type of a first publisher and a subscriber type of the first subscriber, a first interaction type of a plurality of interaction types, wherein the first event is received from the first publisher, and wherein the first adapter is further determined using the first interaction type.
18. The non-transitory computer readable medium of claim 15, wherein the subscriber is a software application that performs an action in response to receiving the first message.
19. The non-transitory computer readable medium of claim 15, wherein the first event corresponds to a context, wherein the instructions further perform:
determining, using the context, a second subscriber;
determining, using a second delivery preference of the second subscriber, a second adapter to deliver the first message; and
dispatching, via the second adapter, the first message to the second subscriber.
20. The non-transitory computer readable medium of claim 15, wherein the instructions further perform:
extracting, from a plurality of messages, a plurality of features;
classifying, using the machine learning model, the plurality of features as an anomaly;
generating a second event based on the anomaly; and
receiving, at the listener channel, the second event, wherein the second event is described by a second message.
</claims>
</document>
