<document>

<filing_date>
2019-01-31
</filing_date>

<publication_date>
2020-02-11
</publication_date>

<priority_date>
2019-01-31
</priority_date>

<ipc_classes>
G06F12/00,G06F12/0891,G06F12/123,G06F17/18,G06F5/06,G06N20/00
</ipc_classes>

<assignee>
MARTINEZ, WENDY A.
NARASIMHAN, GIRI
THE FLORIDA INTERNATIONAL UNIVERSITY BOARD OF TRUSTEES
VIETRI, GIUSEPPE
</assignee>

<inventors>
MARTINEZ, WENDY A.
NARASIMHAN, GIRI
VIETRI, GIUSEPPE
</inventors>

<docdb_family_id>
69410827
</docdb_family_id>

<title>
Systems and methods for managing cache replacement with machine learning
</title>

<abstract>
Systems and methods for management of a computer-based cache are provided. A system can include a processor, a cache, a memory device, and a storage device. The processor can be configured to evict a page from the cache to a history index based upon a greater weight respectively assigned to a least frequently used (LFU) and least recently used policy (LRU) policy, detect a requested page that was evicted to the history index, and adjust the respective weights assigned to the policies based upon the requested page being in the history index.
</abstract>

<claims>
1. A computer-based cache management system, comprising: a computing system comprising a processor, a cache, a memory device, and a storage device; the processor being configured to: evict a plurality of pages from the cache to a history index, each page of the plurality of pages being respectively evicted based upon a greater weight out of a first weight assigned to a least frequently used (LFU) policy and a second weight assigned to a least recently used (LRU) policy, each of the first weight and the second weight respectively being a numerical value; receive a request for a page of the plurality of pages that was evicted to the history index; detect the requested page that was evicted to the history index; and adjust the first weight and the second weight based upon whether the requested page is in the history index, the adjusting of the first weight and the second weight comprising the numerical value of the weight that is greater, out of the first and the second weight, for the requested page, and the adjusting of the first weight and the second weight further comprising increasing the numerical value of the weight that is less, out of the first weight and the second weight, for the requested page, and the increasing of the numerical value of the weight that is less, out of the first weight and the second weight, for the requested page comprising multiplying said numerical value by eλr, λ being an initial learning rate and r being a reward value, and the initial learning rate being 0.45.
2. The system of claim 1, a quantity of entries in the history index being equal to a quantity of entries in the cache.
3. The system of claim 1, an initial value of the first weight being unequal to an initial value of the second weight.
4. The system of claim 1, an initial value of the first weight being equal to an initial value of the second weight.
5. The system of claim 1, the reward value being dependent on an initial discount rate, and the initial discount rate being 0.0051/N, N being a quantity of pages accessed by the system.
6. The system of claim 1, the history index being managed on a first in first out (FIFO) basis.
7. The system of claim 1, a size of the cache being less than or equal to 0.5% of total memory.
8. A computer-based method to perform cache management, the method comprising: evicting, by a processor, a plurality of pages from a cache to a history index, each page of the plurality of pages being respectively evicted based upon a greater weight out of a first weight assigned to a least frequently used (LFU) policy and a second weight assigned to a least recently used (LRU) policy, each of the first weight and the second weight respectively being a numerical value; receiving, by the processor, a request for a page of the plurality of pages that was evicted to the history index; detecting, by the processor, the requested page that was evicted to the history index; and adjusting, by the processor, the first weight and the second weight based upon the requested page being in the history index, the adjusting of the first weight and the second weight comprising the numerical value of the weight that is greater, out of the first and the second weight, for the requested page, and the adjusting of the first weight and the second weight further comprising increasing the numerical value of the weight that is less, out of the first weight and the second weight, for the requested page, and the increasing of the numerical value of the weight that is less, out of the first weight and the second weight, for the requested page comprising multiplying said numerical value by eλr, λ being an initial learning rate and r being a reward value, and the initial learning rate being 0.45.
9. The method of claim 8, further comprising setting a quantity of entries in the history index to be equal to a quantity of entries in the cache.
10. The method of claim 8, further comprising setting an initial value of the first weight to be unequal to an initial value of the second weight.
11. The method of claim 8, further comprising setting an initial value of the first weight to be equal to an initial value of the second weight.
12. The method of claim 8, the reward value being dependent on an initial discount rate, and the method further comprising setting the initial discount rate to be 0.0051/N, N being a quantity of pages accessed during the method.
13. The method of claim 8, a size of the cache being less than or equal to 0.5% of total memory.
14. A computer-based cache management system comprising: a computing system comprising a processor, a cache, a memory device, and a storage device; the processor being configured to: evict a plurality of pages from the cache to a history index, each page of the plurality of pages being respectively evicted based upon a greater weight out of a first weight assigned to a least frequently used (LFU) and a second weight assigned to a least recently used (LRU) policy, each of the first weight and the second weight respectively being a numerical value; receive a request for a page of the plurality of pages that was evicted to the history index detect the requested page that was evicted to the history index; decrease the numerical value of the weight that is greater, out of the first weight and the second weight, for the requested page; and increase the numerical value of the weight that is less, out of the first weight and the second weight, for the requested page, a quantity of entries in the history index being equal to a quantity of entries in the cache, an initial value of the first weight being equal to an initial value of the second weight, the increasing of the numerical value of the weight that is less, out of the first weight and the second weight, for the requested page comprising multiplying said numerical value by eλr, λ being an initial learning rate and r being a reward value, the initial learning rate being 0.45, the reward value being dependent upon an initial discount rate, the initial discount rate being 0.0051/N, N being a quantity of pages accessed by the system, the history index being managed on a first in first out (FIFO) basis, and a size of the cache being less than or equal to 0.5% of total memory.
</claims>
</document>
