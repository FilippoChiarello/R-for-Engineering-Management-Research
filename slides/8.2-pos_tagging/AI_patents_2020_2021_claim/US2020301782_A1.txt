<document>

<filing_date>
2019-03-20
</filing_date>

<publication_date>
2020-09-24
</publication_date>

<priority_date>
2019-03-20
</priority_date>

<ipc_classes>
G06F11/14,G06N20/00
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
HERTA, BENJAMIN
lsahagian, Vatche
Boag, Scott
Radhakrishnan, Jayaram Kallapalayam
Muthusamy, Vinod
SOOD, ATIN
</inventors>

<docdb_family_id>
72515831
</docdb_family_id>

<title>
SCALABLE MULTI-FRAMEWORK MULTI-TENANT LIFECYCLE MANAGEMENT OF DEEP LEARNING APPLICATIONS
</title>

<abstract>
A lifecycle management method, system, and computer program product include coordinating hardware, platform and application-level health checks for framework-independent and application-specific monitoring, failure detection, and recovery, coordinating the hardware, the platform, and the application-level health check by state-specific aggregation of distributed atomic status events, and creating a recovery policy based on the state-specific aggregation of the distributed atomic status events.
</abstract>

<claims>
1. A computer-implemented lifecycle management method, the method comprising: coordinating hardware, platform and application-level health checks for framework-independent and application-specific monitoring, failure detection, and recovery; coordinating the hardware, the platform, and the application-level health checks by state-specific aggregation of distributed atomic status events; and creating a recovery policy based on the state-specific aggregation of the distributed atomic status events.
2. The method of claim 1, wherein the application-specific monitoring, failure detection, and recovery occurs at a datacenter level and/or cloud operating environment level such that failures are either correlated or independent.
3. The method of claim 1, wherein the application-specific monitoring, failure detection, and recovery occurs at a datacenter level and/or cloud operating environment level such that failures are independent.
4. The method of claim 1, wherein the application-specific monitoring, failure detection, and recovery occurs at a datacenter level and/or cloud operating environment level such that failures are correlated.
5. The method of claim 1, wherein the platform and hardware-level health checks are agnostic to application.
6. The method of claim 1, wherein the coordinating further coordinates the hardware, the platform, and the application-level health checks by application-agnostic failure, recovery and status update semantics on a distributed application basis and at multiple states.
7. The method of claim 6, wherein the failure detection, the recovery, and the status update semantics are specified by the application.
8. The method of claim 1, wherein the distributed atomic status events comprise different layers of the application stack, and from different workers in a distributed application.
9. The method of claim 1, wherein the state-specific aggregation of the distributed atomic status events is specific to each state, and a history of state transitions.
10. The method of claim 1, embodied in a cloud-computing environment.
11. A computer program product for lifecycle management, the computer program product comprising a computer-readable storage medium having program instructions embodied therewith, the program instructions executable by a computer to cause the computer to perform: coordinating hardware, platform and application-level health checks for framework-independent and application-specific monitoring, failure detection, and recovery; coordinating the hardware, the platform, and the application-level health checks by state-specific aggregation of distributed atomic status events; and creating a recovery policy based on the state-specific aggregation of the distributed atomic status events.
12. The computer program product of claim 11, wherein the application-specific monitoring, failure detection, and recovery occurs at a datacenter level and/or cloud operating environment level such that failures are either correlated or independent.
13. The computer program product of claim 11, wherein the application-specific monitoring, failure detection, and recovery occurs at a datacenter level and/or cloud operating environment level such that failures are independent.
14. The computer program product of claim 11, wherein the application-specific monitoring, failure detection, and recovery occurs at a datacenter level and/or cloud operating environment level such that failures are correlated.
15. The computer program product of claim 11, wherein the platform and hardware-level health checks are agnostic to application.
16. The computer program product of claim 11, wherein the coordinating further coordinates the hardware, the platform, and the application-level health checks by application-agnostic failure, recovery and status update semantics on a distributed application basis and at multiple states.
17. The computer program product of claim 16, wherein the failure detection, the recovery, and the status update semantics are specified by the application.
18. The computer program product of claim 11, wherein the distributed atomic status events comprise different layers of the application stack, and from different workers in a distributed application.
19. A lifecycle management system, the system comprising: a processor; and a memory, the memory storing instructions to cause the processor to perform: coordinating hardware, platform and application-level health checks for framework-independent and application-specific monitoring, failure detection, and recovery; coordinating the hardware, the platform, and the application-level health checks by state-specific aggregation of distributed atomic status events; and creating a recovery policy based on the state-specific aggregation of the distributed atomic status events.
20. The system of claim 19, embodied in a cloud-computing environment.
</claims>
</document>
