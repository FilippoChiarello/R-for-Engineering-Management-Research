<document>

<filing_date>
2020-03-17
</filing_date>

<publication_date>
2020-12-30
</publication_date>

<priority_date>
2019-06-29
</priority_date>

<ipc_classes>
G06F12/02,G06F21/54,G06F21/55,G06F21/60,G06F21/64,G06F21/78,H04L9/06
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
JAYARAM MASTI, Ramya
DURHAM, David M
LEMAY, Michael
</inventors>

<docdb_family_id>
70159013
</docdb_family_id>

<title>
POINTER BASED DATA ENCRYPTION
</title>

<abstract>
Technologies disclosed herein provide cryptographic computing. An example method comprises storing, in a register, an encoded pointer to a memory location, where first context information is stored in first bits of the encoded pointer and a slice of a memory address of the memory location is encrypted and stored in second bits of the encoded pointer. The method further includes decoding the encoded pointer to obtain the memory address of the memory location, using the memory address obtained by decoding the encoded pointer to access encrypted data at the memory location, and decrypting the encrypted data based on a first key and a first tweak value. The first tweak value includes one or more bits derived, at least in part, from the encoded pointer.
</abstract>

<claims>
1. A method, comprising: storing, in a register, an encoded pointer to a memory location, wherein first context information is stored in first bits of the encoded pointer and a slice of a memory address of the memory location is stored in second bits of the encoded pointer; decoding the encoded pointer to obtain the memory address of the memory location; using the memory address obtained by decoding the encoded pointer to access encrypted data at the memory location; and decrypting the encrypted data based on a first key and a first tweak, the first tweak including one or more bits derived, at least in part, from the encoded pointer.
2. The method of Claim 1, wherein the slice of the memory address stored in the second bits of the encoded pointer is encrypted, wherein the decoding the encoded pointer includes:
generating a decrypted slice of the memory address by decrypting the slice of the memory address in the encoded pointer based at least in part on a second tweak.
3. The method of Claim 2, wherein decrypting the slice of the memory address stored in the second bits of the encoded pointer is based in part on a second key, wherein one or more bits of the second tweak are obtained from at least one of a first register storing the encoded pointer, an operand of an instruction, and a control register.
4. The method of any one of Claims 2-3, wherein the second tweak includes at least one of: plaintext slice bits of the memory address; size bits indicating a number of bits of a particular plaintext slice of the memory address; memory allocation size bits indicating an amount of memory allocated at the memory location referenced by the encoded pointer; tag bits representing a random value associated with the encoded pointer; permission bits indicating a level of access authorized for the memory location; type bits indicating a class of the encrypted data in the memory location; version bits representing a deterministically different value associated with the encoded pointer; privilege level bits indicating a user level or a supervisor level; and crypto context identifier bits representing a unique value for particular group of functions.
5. The method of any one of Claims 2-4, wherein the decoding the encoded pointer further includes:
concatenating the decrypted slice of the memory address and a plaintext slice of the memory address, wherein the plaintext slice of the memory address is stored in the encoded pointer or in a second register.
6. The method of Claim 5, wherein the first tweak includes: the first context information stored in the first bits of the encoded pointer; and the decrypted slice of the memory address concatenated with the plaintext slice of the memory address.
7. The method of any one of Claims 1-6, wherein the first bits of the encoded pointer are randomized or sequentially incremented.
8. The method of any one of Claims 1-4, wherein a second slice of the memory address is stored in immutable plaintext bits of the encoded pointer, and wherein a third slice of the memory address is stored in mutable plaintext bits of the encoded pointer.
9. The method of Claim 8, wherein the first tweak includes the first bits of the encoded pointer, the second bits of the encoded pointer, the immutable plaintext bits of the encoded pointer, and the mutable plaintext bits of the encoded pointer.
10. The method of any one of Claims 8-9, wherein the first context information includes size metadata that indicates in a power of two, a first number of bits included in the immutable plaintext bits of the encoded pointer or in the mutable plaintext bits of the encoded pointer.
11. The method of Claim 10, wherein based on the size metadata indicating a number of bits that is greater than a maximum allowed number of bits for the immutable plaintext bits of the encoded pointer or for the mutable plaintext bits of the encoded pointer, the size metadata encodes a time dimension to the memory location.
12. The method of Claim 1, wherein the first bits of the encoded pointer are randomized and the memory address is stored in one or more other bits in the encoded pointer in a plaintext format.
13. The method of any one of Claims 1-12, wherein the encoded pointer includes third bits that indicate whether the encoded pointer is to be used with a legacy software program.
14. An apparatus, the apparatus comprising means for performing the method of any one of Claims 1-13, wherein the means for performing the method comprise a processor and at least one memory element.
15. At least one machine readable storage medium comprising instructions, wherein the instructions when executed implement the method as claimed in any one of Claims 1-13.
</claims>
</document>
