<document>

<filing_date>
2020-06-17
</filing_date>

<publication_date>
2020-12-24
</publication_date>

<priority_date>
2019-06-18
</priority_date>

<ipc_classes>
G06K9/48,G06K9/62
</ipc_classes>

<assignee>
NORTH CAROLINA STATE UNIVERSITY
</assignee>

<inventors>
SHEN, Xipeng
NING, Lin
</inventors>

<docdb_family_id>
74037574
</docdb_family_id>

<title>
ADAPTIVE DEEP REUSE: ACCELERATING CNN TRAINING ON THE FLY
</title>

<abstract>
An exemplary clustering and computation reuse method comprises providing an artificial convolutional neural network; detecting that neuron vectors associated with an input layer and/or a hidden layer of the convolutional neural network are similar to one another; detecting similarities among the neuron vectors associated with the input layer and/or the at least one hidden layer during execution of a computer program; clustering similar neuron vectors into groups; computing a centroid vector for each group; performing, by a computer processor, computations using the centroid vector associated with one of the groups as a representative for one of the members of the group to generate an output for the computation, wherein the output is generated during execution of the computer program; and reusing, by the computer processor, the output for the computation involving the centroid vector for another computation involving another member of the group.
</abstract>

<claims>
1. A method comprising:
providing a machine-learning computing system implementing an artificial convolutional neural network, the convolutional neural network comprising an input layer, at least one hidden layer, and an output layer;
detecting, by at least one computer processor of the machine-learning computing system, that neuron vectors associated with an input layer and/or a hidden layer are similar to one another;
detecting, by the at least one computer processor, similarities among the neuron vectors associated with the input layer and/or the at least one hidden layer, during execution of a computer program;
clustering, by the at least one computer processor, similar neuron vectors into groups;
computing, by the at least one computer processor, a centroid vector for each group;
performing, by the at least one computer processor, computations using the centroid vector associated with one of the groups as a representative for one of the members of the group to generate an output for the computation, wherein the output is generated during execution of the computer program; and
reusing, by the at least one computer processor, the output for the computation involving the centroid vector for another computation involving another member of the group.
2. The method of claim 1 , wherein a training of the convolutional neural network includes forward propagation and backward propagation, wherein the similarities and clustering results used in the forward propagation are reused during the backward propagation.
3. The method of claim 1 , further comprising adjusting parameters for the clustering operation to reduce errors in the generated output.
4. The method of claim 3, wherein the parameters include clustering granularity, a number of hashing functions, and a flag of cluster reuse.
5. The method of claim 1 , wherein the hidden layer comprises an activation map.
6. The method of claim 5, further wherein the detecting step comprises considering relations among the neuron vectors across activation maps generated in different runs of the convolutional neural network.
7. The method of claim 1 , wherein the input comprises an image.
8. The method of claim 1 , wherein a computation cost of the convolutional neural network is reduced by reusing computation outputs.
9. The method of claim 1 , wherein the clustering is performed using a
Locality Sensitive Hashing method.
10. The method of claim 1 , wherein the detection of similarities among the neuron vectors occurs across one input to the input layer.
11. The method of claim 1 , wherein the detection of similarities among the neuron vectors occurs across a batch of inputs to the input layer.
12. The method of claim 1 , wherein the detection of similarities among the neuron vectors occurs across batches of inputs to the input layer.
13. The method of claim 1 , wherein neuron vectors from different input batches share the computation results of the same cluster centroid.
14. The method of claim 1 , further comprising storing previously defined groups and storing outputs computed with centroid vectors for the previously defined groups.
15. The method of claim 1 , wherein the conventional neural network comprises a compressed conventional neural network.
16. The method of claim 1 , wherein the computation comprises a convolution between an input image and weight filters.
17. The method of claim 16, wherein the input image is formatted as an input matrix and the input matrix is multiplied against a weight filter matrix.
18. The method of claim 17, wherein neuron vectors in the input matrix are grouped into a number of groups, wherein for each new group formed, multiplications are computed between one centroid vector for each group and corresponding weight segments from the weight filter matrix to form an output result, wherein when calculating the multiplications between the same weight segments and another member of the same group, the output result is reused.
19. A machine-learning computing system having at least one computer processor that is configured to:
implement an artificial convolutional neural network, the convolutional neural network comprising an input layer, at least one hidden layer, and an output layer; detect that neuron vectors associated with the input layer and/or the at least one hidden layer are similar to one another;
detect similarities among neuron vectors associated with an input layer and/or a hidden layer, during execution of a computer program;
cluster similar neuron vectors into groups;
compute a centroid vector for each group;
perform computations using the centroid vector associated with one of the groups as a representative for one of the members of the group to generate an output for the computation, wherein the output is generated during execution of the computer program; and reuse the output for the computation involving the centroid vector for another computation involving another member of the group.
20. The system of claim 19, wherein a training of the convolutional neural network includes forward propagation and backward propagation, wherein the similarity and clustering results used in the forward propagation are reused during the backward propagation.
</claims>
</document>
