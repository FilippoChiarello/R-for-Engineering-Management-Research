<document>

<filing_date>
2019-04-30
</filing_date>

<publication_date>
2020-11-05
</publication_date>

<priority_date>
2019-04-30
</priority_date>

<ipc_classes>
G06F16/22,G06F7/08,G06T1/20
</ipc_classes>

<assignee>
EMC IP HOLDING COMPANY
</assignee>

<inventors>
KRASNER, JONATHAN I.
OUARRAOUI, CHAKIB
</inventors>

<docdb_family_id>
73016420
</docdb_family_id>

<title>
METHOD AND COMPUTING SYSTEM FOR SORTING POSITION-DEPENDENT DATA ARRAYS
</title>

<abstract>
A method and computing system for sorting position-dependent data arrays. Specifically, the method and computing system disclosed herein entail: first, sorting one position-dependent data array according to a desired sorting order; and second, permuting the remaining position-dependent data arrays, based on the sorted position-dependent data array, in order to maintain the same relative positions of the various data stored across the position-dependent data arrays. Through this aforementioned sorting of position-dependent data arrays, a GPU may produce sorted structure of arrays from unsorted structure of arrays.
</abstract>

<claims>
1. A method for producing a sorted structure of arrays (SoA), comprising: obtaining an unsorted SoA comprising a plurality of unsorted position-dependent data arrays; selecting an unsorted position-dependent data array from the plurality of unsorted position-dependent data arrays; sorting the unsorted position-dependent data array according to a preferred sorting order, to obtain a sorted position-dependent data array; and permuting each remaining unsorted position-dependent data array of the plurality of unsorted position-dependent data arrays, based at least on the sorted position-dependent data array, to produce the sorted SoA, wherein the sorted SoA is used to expedite data searching and access.
2. The method of claim 1, wherein the method is performed by a graphics processing unit (GPU).
3. The method of claim 1, wherein the preferred sorting order is one selected from a group consisting of an ascending order and a descending order.
4. The method of claim 1, further comprising: prior to selecting the unsorted position-dependent data array: identifying a common cardinality associated with the plurality of unsorted position-dependent data arrays; and generating an unsorted keys data array comprising a first collection of elements, wherein each element of the first collection of elements stores a numerical value indicating an element index associated with the element of the first collection of elements, wherein a cardinality of the first collection of elements matches the common cardinality.
5. The method of claim 4, further comprising: prior to permuting each remaining unsorted position-dependent data array: rearranging the first collection of elements of the unsorted keys data array based on the sorted position-dependent data array, to obtain a sorted keys data array comprising a second collection of elements.
6. The method of claim 5, wherein the second collection of elements stores a sequence of element indices that map to a sequence of element content stored by a third collection of elements, wherein the sequence of element content is produced by sorting the unsorted position-dependent data array according to the preferred sorting order, wherein the sorted position-dependent data array comprises the third collection of elements.
7. The method of claim 6, wherein permuting each remaining unsorted position-dependent data array based at least on the sorted position-dependent data array, to produce the sorted SoA, comprises: for each remaining unsorted position-dependent data array comprising a fourth collection of elements: rearranging the fourth collection of elements based on the sequence of element indices, to obtain a fifth collection of elements, wherein the sorted SoA comprises a plurality of sorted position-dependent data arrays.
8. A computing system, comprising: a first computer processor; and a memory accessible to the first computer processor, wherein the first computer processor is programmed to: obtain, from the memory, an unsorted structure of arrays (SoA) comprising a plurality of unsorted position-dependent data arrays; select an unsorted position-dependent data array from the plurality of unsorted position-dependent data arrays; sort the unsorted position-dependent data array according to a preferred sorting order, to obtain a sorted position-dependent data array; and permute each remaining unsorted position-dependent data array of the plurality of unsorted position-dependent data arrays, based at least on the sorted position-dependent data array, to produce a sorted SoA, wherein the sorted SoA is used to expedite data searching and access.
9. The computing system of claim 1, wherein the first computer processor is a graphics processing unit (GPU).
10. The computing system of claim 9, wherein the memory is a dedicated GPU memory accessible only to the GPU.
11. The computing system of claim 9, wherein the memory is a shared memory accessible to at least the GPU.
12. The computing system of claim 9, further comprising: a second computer processor operatively connected to the first computer processor, and programmed to invoke the first computer processor to produce the sorted SoA from the unsorted SoA.
13. The computing system of claim 12, wherein the second computer processor is a central processing unit (CPU).
14. A non-transitory computer readable medium (CRM) comprising computer readable program code, which when executed by a computer processor, enables the computer processor to: obtain an unsorted structure of arrays (SoA) comprising a plurality of unsorted position-dependent data arrays; select an unsorted position-dependent data array from the plurality of unsorted position-dependent data arrays; sort the unsorted position-dependent data array according to a preferred sorting order, to obtain a sorted position-dependent data array; and permute each remaining unsorted position-dependent data array of the plurality of unsorted position-dependent data arrays, based at least on the sorted position-dependent data array, to produce a sorted SoA, wherein the sorted SoA is used to expedite data searching and access.
15. The non-transitory CRM of claim 14, wherein the computer processor is a graphics processing unit (GPU).
16. The non-transitory CRM of claim 14, wherein the preferred sorting order is one selected from a group consisting of an ascending order and a descending order.
17. The non-transitory CRM of claim 14, further comprising computer readable program code, which when executed by the computer processor, further enables the computer processor to: prior to selecting the unsorted position-dependent data array: identify a common cardinality associated with the plurality of unsorted position-dependent data arrays; and generate an unsorted keys data array comprising a first collection of elements, wherein each element of the first collection of elements stores a numerical value indicating an element index associated with the element of the first collection of elements, wherein a cardinality of the first collection of elements matches the common cardinality.
18. The non-transitory CRM of claim 17, further comprising computer readable program code, which when executed by the computer processor, further enables the computer processor to: prior to permuting each remaining unsorted position-dependent data array: rearrange the first collection of elements of the unsorted keys data array based on the sorted position-dependent data array, to obtain a sorted keys data array comprising a second collection of elements.
19. The non-transitory CRM of claim 18, wherein the second collection of elements stores a sequence of element indices that map to a sequence of element content stored by a third collection of elements, wherein the sequence of element content is produced by sorting the unsorted position-dependent data array according to the preferred sorting order, wherein the sorted position-dependent data array comprises the third collection of elements.
20. The non-transitory CRM of claim 19, further comprising computer readable program code, which when executed by the computer processor, further enables the computer processor to: permute each remaining unsorted position-dependent data array comprising a fourth collection of elements by: rearranging the fourth collection of elements based on the sequence of element indices, to obtain a fifth collection of elements, wherein the sorted SoA comprises a plurality of sorted position-dependent data arrays.
</claims>
</document>
