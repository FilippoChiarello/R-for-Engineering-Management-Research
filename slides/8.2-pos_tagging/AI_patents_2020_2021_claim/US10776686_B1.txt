<document>

<filing_date>
2019-11-22
</filing_date>

<publication_date>
2020-09-15
</publication_date>

<priority_date>
2019-09-09
</priority_date>

<ipc_classes>
G06F3/0486,G06N3/04,G06N3/08,H04L12/24,H04L12/911,H04L29/08
</ipc_classes>

<assignee>
ITERATE STUDIO, INC.
</assignee>

<inventors>
SATHIANATHAN, BRAINERD
Jacob, Shomron
Chandrasekaran, Arulkumaran
Selvadurai, John
Samarasinghe, Chatura
Ruvalcaba Gonzalez, David
</inventors>

<docdb_family_id>
72425518
</docdb_family_id>

<title>
Container architecture for modular machine learning
</title>

<abstract>
The present disclosure relates generally to systems and methods that include a configuration server with a processing element operable to operate a plurality of containers. A plurality of functionality modules are operable to execute within respective containers of the plurality of containers. Each functionality module includes: an input, a functionality operable to be executed by the processing element to perform an artificial intelligence operation using the input, and an output produced by the functionality. The modular system includes a messaging object operable to connect the output of a first one of the plurality of functionality modules to the input of a second of the plurality of functionality modules. The modular system configures the messaging object to adapt the output of first functionality module to the input of the second functionality module.
</abstract>

<claims>
1. A modular system for creating applications comprising: a configuration server with a processing element operable to implement a plurality of containers; a plurality of functionality modules operable to execute within respective containers of the plurality of containers, each functionality module having: an input, a functionality operable to be executed by the processing element to perform an operation using the input, and an output produced by the functionality; and a messaging object operable to connect the output of a first one of the plurality of functionality modules to the input of a second of the plurality of functionality modules, wherein: the modular system configures the messaging object to adapt the output of the first functionality module executing in a first operating environment to the input of the second functionality module executing in a second operating environment different from the first operating environment by translating the output of the first functionality module to a format operable with the second operating environment to provide the input of the second functionality module, and one of the first functionality module and the second functionality module includes a function to perform an artificial intelligence operation.
2. The modular system of claim 1, wherein a first one of the plurality of containers executes machine readable instructions incompatible with a second one of the plurality of containers.
3. The modular system of claim 2, wherein the first one of the plurality of containers comprises an interpreter executing the first operating environment with the first functionality module and the second one of the plurality of containers comprises an interpreter executing the second operating environment with the second functionality module.
4. The modular system of claim 1, wherein the modular system configures the messaging object by adapting interfaces of the messaging object based on the output of the first functionality module and the input of the second functionality module.
5. The modular system of claim 1, wherein the modular system configures the messaging object based on a defined relationship between the first functionality module and the second functionality module.
6. The modular system of claim 1, wherein the modular system further comprises: a communication module operable to communicate the output of a workflow including the first functionality module, the second functionality module, and the messaging object to a user when the workflow is executed.
7. The modular system of claim 6, wherein the modular system configures the communication module to adapt a workflow output based on the output of the second functionality module for communication to the user.
8. The modular system of claim 1, wherein the artificial intelligence or machine learning operation includes an artificial neural network.
9. A method for generating an executable workflow comprising: implementing, responsive to a user request to add a first functionality module to the executable workflow, the first functionality module operable to execute within a first container and a first operating environment to perform an artificial intelligence operation; implementing, responsive to a user request to add a second functionality module to the executable workflow, the second functionality module operable to execute within a second container and a second operating environment incompatible with the first operating environment; and configuring, responsive to a user request to link the first functionality module with the second functionality module, a messaging object by adapting interfaces of the messaging object to translate an output of the first functionality module for compatibility with the second functionality module based on a defined relationship between the first functionality module and the second functionality module.
10. The method of claim 9, further comprising: configuring, in response to a user request to add a communication module to communicate an output of the workflow to an end user, the communication module to format the output of the workflow for presentation to the end user through a graphical interface.
11. The method of claim 9, further comprising: configuring, in response to a user request to add a communication module to communicate an output of the workflow to an end user, the communication module to format the output of the workflow for presentation to the end user through an audio interface.
12. The method of claim 9, further comprising: generating a workflow including the first functionality module, the second functionality module and the messaging object.
13. The method of claim 12, wherein generating the workflow comprises: implementing the first container to execute the first functionality module; and implementing the second container to execute the second functionality module.
14. The method of claim 13, wherein implementing the first container comprises configuring an instance of a first interpreter executing the first operating environment within the first container.
15. The method of claim 14, wherein implementing the second container comprises configuring an instance of a second interpreter executing the second operating environment within the second container.
16. The method of claim 9, wherein the defined relationship between the first functionality module and the second functionality module is defined based on a first interpreter of the first functionality module and the second interpreter of the second functionality module.
17. The method of claim 16, wherein the defined relationship between the first functionality module and the second functionality module is further defined based on the output of the first functionality and an input of the second functionality module.
18. A method for fulfilling a user request comprising: providing a first input based on the user request to a first functionality module executing within a first container and a first operating environment to perform an artificial intelligence operation to generate a first output; adapt the first output for input to a second functionality module using a messaging object configured based on at least one characteristic of the first functionality module and at least one characteristic of the second functionality module; providing the adapted first output to the second functionality module as a second input, wherein the second functionality module executes within a second container and a second operating environment incompatible with the first operating environment to generate a second output; and communicate a response to the user request using a communication module configured to use a communication input based at least on the second output, wherein the communication module is configured to translate the communication input to the response to the user request.
19. The method of claim 18, wherein providing the first input to the first functionality module further comprises configuring an instance of a first interpreter executing the first operating environment to execute the first functionality module.
20. The method of claim 19, wherein providing the adapted first output to the second functionality module further comprises configuring an instance of a second interpreter executing the second operating environment.
</claims>
</document>
