<document>

<filing_date>
2018-11-20
</filing_date>

<publication_date>
2020-05-21
</publication_date>

<priority_date>
2018-11-20
</priority_date>

<ipc_classes>
G06F16/901,G06N5/02
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
JUNKER, ULRICH M.
KORMANN, THIERRY
BERNELAS, JEAN-MICHEL G.B.
MOLINES, GUILHEM J.
</inventors>

<docdb_family_id>
70727974
</docdb_family_id>

<title>
CREATION OF SCOPE DEFINITIONS
</title>

<abstract>
A method for receiving an ownership graph, wherein the ownership graph comprises a first set of nodes and a first set of directional edges, and wherein each of the first set of directional edges connects two nodes and indicates ownership of a first node by a second node, each node having at most one owner, the ownership graph being acyclic. The method further includes receiving a dependency graph that also comprises a set of nodes and a set of directional edges. The method further includes creating a respective enumerating variable declaration for each node in a path from an owner node to a root node in the ownership graph. The method further includes creating a respective accessing variable declaration for each owner node in the dependency graph of the current node.
</abstract>

<claims>
1. A computer-implemented method comprising: receiving an ownership graph, wherein the ownership graph comprises a first set of nodes and a first set of directional edges, wherein each of the first set of directional edges connects two nodes and indicates ownership of a first node by a second node, each node having at most one owner, the ownership graph being acyclic; receiving a dependency graph, wherein the dependency graph comprises a second set of nodes and a second set of directional edges, wherein each node of the second set of nodes in the dependency graph corresponds to a node of the first set of nodes in the ownership graph, wherein each of the second set of directional edges connects two nodes and indicates a dependency of the first node on the second node, the dependency graph being acyclic; for each node in the dependency graph with an incoming edge: creating a respective enumerating variable declaration for each node in a path from an owner node of a current node to a root node in the ownership graph, wherein the respective enumerating variable declaration comprises a variable name, a variable type, and a path expression specifying a variable range; and creating a respective accessing variable declaration for each owner node in the dependency graph of the current node, wherein the respective accessing variable declaration comprises a second variable name, and a second path expression specifying one or more values for the variable.
2. The computer-implemented method according to claim 1, further comprising: creating a scope definition for each node in the dependency graph with an incoming edge; and populating the created scope definition with the respective enumerating variable declaration and the respective accessing variable declaration for the current node.
3. The computer-implemented method according to claim 2, further comprising: creating a scoped dependency graph comprising the nodes of the dependency graph and the respective scope definitions for each node in the dependency graph with an incoming edge.
4. The computer-implemented method according to claim 3, further comprising: receiving a plurality of decision logics, each decision logic for a respective node in the dependency graph with an incoming edge; expanding each scope definition in the scoped dependency graph with a respective decision logic; and generating a set of rules, each rule comprising a scope definition expanded by the respective decision logic.
5. The computer-implemented method according to claim 4, further comprising: supplying the generated set of rules to a rules engine; receiving a set of data; and operating the generated set of rules across the received set of data.
6. A system, comprising an enumerator builder and an informational-scope builder, arranged for: receiving an ownership graph comprising a first set of nodes and a first set of directional edges, wherein each of the first set of directional edges connects two nodes and indicates ownership of a first node by a second node, each node having at most one owner, the ownership graph being acyclic; receiving a dependency graph comprising a second set of nodes and a second set of directional edges, wherein each node of the second set of nodes in the dependency graph corresponds to a node in the first set of nodes in the ownership graph, wherein each of the second set of directional edges connects two nodes and indicates a dependency of the first node on the second node, the dependency graph being acyclic; for each node in the dependency graph with an incoming edge, the enumerator builder is arranged to create a respective enumerating variable declaration for each node in a path from an owner node of a current node to a root node in the ownership graph, wherein the respective enumerating variable declaration comprises a variable name, a variable type, and a path expression specifying a variable range; and the informational-scope builder is arranged to create a respective accessing variable declaration for each owner node in the dependency graph of the current node, wherein the respective accessing variable declaration comprises a second variable name, and a second path expression specifying one or more values for the variable.
7. The system according to claim 6, further comprising: creating a scope definition for each node in the dependency graph with an incoming edge; and populating the created scope definition with the respective enumerating variable declaration and the respective accessing variable declaration for the current node.
8. The system according to claim 7, further comprising: creating a scoped dependency graph comprising the nodes of the dependency graph and the respective scope definitions for each node in the dependency graph with an incoming edge.
9. The system according to claim 8, further comprising: receiving a plurality of decision logics, each decision logic for a respective node in the dependency graph with an incoming edge; expanding each scope definition in the scoped dependency graph with the respective decision logic; and generating a set of rules, each rule comprising a scope definition expanded by the respective decision logic.
10. The system according to claim 9, further comprising: supplying the generated set of rules to a rules engine; receiving a set of data; and operating the generated set of rules across the received set of data.
11. A computer program product for controlling a system comprising a processor, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by the processor to cause the processor to: receive an ownership graph, wherein the ownership graph comprises a first set of nodes and a first set of directional edges, wherein each of the first set of directional edges connects two nodes and indicates ownership of a first node by a second node, each node having at most one owner, the ownership graph being acyclic; receive a dependency graph, wherein the dependency graph comprises a second set of nodes and a second set of directional edges, wherein each node of the second set of nodes in the dependency graph corresponds to a node of the first set of nodes in the ownership graph, wherein each of the second set of directional edges connects two nodes and indicates a dependency of the first node on the second node, the dependency graph being acyclic; for each node in the dependency graph with an incoming edge: create a respective enumerating variable declaration for each node in a path from an owner node of a current node to a root node in the ownership graph, wherein the respective enumerating variable declaration comprises a variable name, a variable type, and a path expression specifying a variable range; and create a respective accessing variable declaration for each owner node in the dependency graph of the current node, wherein the respective accessing variable declaration comprises a second variable name and a second path expression specifying one or more values for the variable.
12. The computer program product according to claim 11, further comprising: creating a scope definition for each node in the dependency graph with an incoming edge; and populating the created scope definition with the respective enumerating variable declaration and the respective accessing variable declaration for the current node.
13. The computer program product according to claim 12, further comprising: creating a scoped dependency graph comprising the nodes of the dependency graph and the respective scope definitions for each node in the dependency graph with an incoming edge.
14. The computer program product according to claim 13, further comprising: receiving a plurality of decision logics, each decision logic for a respective node in the dependency graph with an incoming edge; expanding each scope definition in the scoped dependency graph with a respective decision logic; and generating a set of rules, each rule comprising a scope definition expanded by the respective decision logic.
15. The computer program product according to claim 14, further comprising: supplying the generated set of rules to a rules engine; receiving a set of data; and operating the generated set of rules across the received set of data.
</claims>
</document>
