<document>

<filing_date>
2018-10-09
</filing_date>

<publication_date>
2020-02-18
</publication_date>

<priority_date>
2018-10-09
</priority_date>

<ipc_classes>
G06F11/36,G06F8/60,G06F8/77,G06F9/44,G06N20/00
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
SOBRAN, ALEXANDER
ZHANG, BO
HERRIN, BRADLEY C.
ZHU, XIANJUN
</inventors>

<docdb_family_id>
69528285
</docdb_family_id>

<title>
Providing cognitive intelligence across continuous delivery pipeline data
</title>

<abstract>
A method, system and computer program product for detecting potential failures in a continuous delivery pipeline. A machine learning model is created to predict whether changed portion of codes under development at various stages of the continuous delivery pipeline will result in a pipeline failure. After creating the machine learning model, log file(s) may be received that were generated by development tool(s) concerning a changed portion of code under development at a particular stage of the continuous delivery pipeline. The machine learning model provides relationship information between the log file(s) and the changed portion of code. A message is then generated and displayed based on this relationship information, where the message may provide a prediction or a recommendation concerning potential failures in the continuous delivery pipeline. In this manner, the potential failures in the continuous delivery pipeline may be prevented without requiring context switching.
</abstract>

<claims>
1. A method for detecting potential failures in a continuous delivery pipeline, the method comprising: receiving a definition of said continuous delivery pipeline comprising stages; receiving a list of development tools used in association with said stages; monitoring web browsing performed by a plurality of users in producing software; identifying at least one development tool used in association with said continuous delivery pipeline that is not included in said received list of development tools based on said monitoring of said web browsing performed by said plurality of users in producing software; adding said identified at least one development tool to said list of development tools to form an updated list of development tools; creating a machine learning model to predict whether changed portions of code under development at various stages of said continuous delivery pipeline will result in a pipeline failure; receiving a changed portion of code under development at a particular stage of said continuous delivery pipeline; receiving one or more log files generated by one or more development tools involving said changed portion of code under development at said particular stage of said continuous delivery pipeline; receiving relationship information between entries in said one or more log files and said changed portion of code under development at said particular stage of continuous delivery pipeline from said machine learning model, wherein said relationship information comprises information pertaining to the behavior of said changed portion of code in connection with said particular stage of continuous delivery pipeline; and generating and displaying a message based on said received relationship information, wherein said message comprises a prediction or a recommendation concerning potential failures in said continuous delivery pipeline.
2. The method as recited in claim 1 further comprising: receiving log files generated by one or more development tools listed in said updated list of development tools involving code under development at various stages of said continuous delivery pipeline; and creating said machine learning model using said received log files.
3. The method as recited in claim 1, wherein said change to said portion of code under development is received at a first stage of said continuous delivery pipeline, wherein a log entry in a log file of said one or more log files is received at a second stage, wherein said first stage precedes said second stage.
4. The method as recited in claim 1, wherein said message is one of the following: a prediction of whether said changed portion of code will pass a quality test at a following stage, a prediction of whether a module of software will fail to run at a following stage, a prediction of whether a module of software will perform incorrectly at a following stage, and a recommendation to one of said plurality of users to change a different portion of code at a following stage, wherein said different portion of code being code other than said changed portion of code under development.
5. The method as recited in claim 1, wherein said changed portion of code under development comprises one of the following: an infrastructure code, an application code and a framework code.
6. The method as recited in claim 1, wherein said message is generated in one of the following environments: an integrated development environment and a text editor.
7. A computer program product for detecting potential failures in a continuous delivery pipeline, the computer program product comprising a computer readable storage medium having program code embodied therewith, the program code comprising the programming instructions for: receiving a definition of said continuous delivery pipeline comprising stages; receiving a list of development tools used in association with said stages; monitoring web browsing performed by a plurality of users in producing software; identifying at least one development tool used in association with said continuous delivery pipeline that is not included in said received list of development tools based on said monitoring of said web browsing performed by said plurality of users in producing software; adding said identified at least one development tool to said list of development tools to form an updated list of development tools; creating a machine learning model to predict whether changed portions of code under development at various stages of said continuous delivery pipeline will result in a pipeline failure; receiving a changed portion of code under development at a particular stage of said continuous delivery pipeline; receiving one or more log files generated by one or more development tools involving said changed portion of code under development at said particular stage of said continuous delivery pipeline; receiving relationship information between entries in said one or more log files and said changed portion of code under development at said particular stage of continuous delivery pipeline from said machine learning model, wherein said relationship information comprises information pertaining to the behavior of said changed portion of code in connection with said particular stage of continuous delivery pipeline; and generating and displaying a message based on said received relationship information, wherein said message comprises a prediction or a recommendation concerning potential failures in said continuous delivery pipeline.
8. The computer program product as recited in claim 7, wherein the program code further comprises the programming instructions for: receiving log files generated by one or more development tools listed in said updated list of development tools involving code under development at various stages of said continuous delivery pipeline; and creating said machine learning model using said received log files.
9. The computer program product as recited in claim 7, wherein said change to said portion of code under development is received at a first stage of said continuous delivery pipeline, wherein a log entry in a log file of said one or more log files is received at a second stage, wherein said first stage precedes said second stage.
10. The computer program product as recited in claim 9, wherein said message is one of the following: a prediction of whether said changed portion of code will pass a quality test at a following stage, a prediction of whether a module of software will fail to run at a following stage, a prediction of whether a module of software will perform incorrectly at a following stage, and a recommendation to one of said plurality of users to change a different portion of code at a following stage, wherein said different portion of code being code other than said changed portion of code under development.
11. The computer program product as recited in claim 7, wherein said changed portion of code under development comprises one of the following: an infrastructure code, an application code and a framework code.
12. The computer program product as recited in claim 7, wherein said message is generated in one of the following environments: an integrated development environment and a text editor.
13. A system, comprising: a memory for storing a computer program for detecting potential failures in a continuous delivery pipeline; and a processor connected to said memory, wherein said processor is configured to execute the program instructions of the computer program comprising: receiving a definition of said continuous delivery pipeline comprising stages; receiving a list of development tools used in association with said stages; monitoring web browsing performed by a plurality of users in producing software; identifying at least one development tool used in association with said continuous delivery pipeline that is not included in said received list of development tools based on said monitoring of said web browsing performed by said plurality of users in producing software; adding said identified at least one development tool to said list of development tools to form an updated list of development tools; creating a machine learning model to predict whether changed portions of code under development at various stages of said continuous delivery pipeline will result in a pipeline failure; receiving a changed portion of code under development at a particular stage of said continuous delivery pipeline; receiving one or more log files generated by one or more development tools involving said changed portion of code under development at said particular stage of said continuous delivery pipeline; receiving relationship information between entries in said one or more log files and said changed portion of code under development at said particular stage of continuous delivery pipeline from said machine learning model, wherein said relationship information comprises information pertaining to the behavior of said changed portion of code in connection with said particular stage of continuous delivery pipeline; and generating and displaying a message based on said received relationship information, wherein said message comprises a prediction or a recommendation concerning potential failures in said continuous delivery pipeline.
14. The system as recited in claim 13, wherein the program instructions of the computer program further comprise: receiving log files generated by one or more development tools listed in said updated list of development tools involving code under development at various stages of said continuous delivery pipeline; and creating said machine learning model using said received log files.
15. The system as recited in claim 13, wherein said change to said portion of code under development is received at a first stage of said continuous delivery pipeline, wherein a log entry in a log file of said one or more log files is received at a second stage, wherein said first stage precedes said second stage.
16. The system as recited in claim 15, wherein said message is one of the following: a prediction of whether said changed portion of code will pass a quality test at a following stage, a prediction of whether a module of software will fail to run at a following stage, a prediction of whether a module of software will perform incorrectly at a following stage, and a recommendation to one of said plurality of users to change a different portion of code at a following stage, wherein said different portion of code being code other than said changed portion of code under development.
17. The system as recited in claim 13, wherein said changed portion of code under development comprises one of the following: an infrastructure code, an application code and a framework code.
</claims>
</document>
