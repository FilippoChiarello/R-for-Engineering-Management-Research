<document>

<filing_date>
2020-03-17
</filing_date>

<publication_date>
2020-10-08
</publication_date>

<priority_date>
2019-04-01
</priority_date>

<ipc_classes>
G06F16/242,G06F16/36,G06F16/532,G06F16/732,G06F40/211
</ipc_classes>

<assignee>
NEC LABORATORIES AMERICA
</assignee>

<inventors>
COSATTO, ERIC
NICULESCU-MIZIL, ALEXANDRU
</inventors>

<docdb_family_id>
72607939
</docdb_family_id>

<title>
MULTI-DETECTOR PROBABILISTIC REASONING FOR NATURAL LANGUAGE QUERIES
</title>

<abstract>
Systems and methods for solving queries on image data are provided. The system includes a processor device coupled to a memory device. The system includes a detector manager (710) with a detector application programming interface (API) to allow external detectors to be inserted into the system by exposing capabilities of the external detectors and providing a predetermined way to execute the external detectors. An ontology manager (720) exposes knowledge bases regarding ontologies to a reasoning engine. A query parser (730) transforms a natural query into query directed acyclic graph (DAG). The system includes a reasoning engine (740) that uses the query DAG, the ontology manager and the detector API to plan an execution list of detectors. The reasoning engine (750) uses the query DAG, a scene representation DAG produced by the external detectors and the ontology manager to answer the natural query.
</abstract>

<claims>
1. A computer system for solving queries on image data, comprising:
a processor device operatively coupled to a memory device, the processor device being configured to implement:
a detector manager (710) with a detector application programming interface (API) to allow at least one external detector to be inserted into the computer system by exposing capabilities of the at least one external detector and providing a predetermined way to execute the at least one external detector;
an ontology manager (720) to expose knowledge bases regarding at least one ontology to a reasoning engine;
a query parser (730) to transform at least one natural query into a query directed acyclic graph (DAG); and
the reasoning engine to:
use (740) the query DAG, the ontology manager and the detector API to plan an execution list of detectors, and
use (750) the query DAG, a scene representation DAG produced by the at least one external detector and the ontology manager to answer the at least one natural query.
2. The system of claim 1, where the reasoning engine is a probabilistic logic solver.
3. The system of claim 1, where the query parser is further configured to use at least one trained language model.
4. The system of claim 1 , where the at least one ontology extends at least one capability of the at least one detector by describing higher level concepts in terms of basic objects.
5. The system of claim 1, where the detector manager is further configured to encapsulate additional detectors in the detector API.
6. The system of claim 1 , where the reasoning engine is further configured to convert the query DAG into logic facts using rules.
7. The system of claim 1, wherein the processor device is further configured to implement:
a grounding unit that performs query expansion on the query DAG by extending the at least one natural query by related terms retrieved from at least one ontology.
8. The system of claim 7, wherein the processor device is further configured to: translate the at least one natural query, at least one dependency and at least one data type, and at least one retrieved ontology rule to a corresponding logic language for grounding.
9. The system of claim 7, wherein the grounding unit is further configured to perform inference passing over all possible combinations to achieve the original query; record at least one different combination; and
combine the at least one different combination into the execution list.
10. The system of claim 1, wherein the processor device is further configured to: determine a premature execution list of corresponding detectors to answer the at least one natural query; and
pass the premature execution list to an execution planner for final assembly and enrichment via input backtracking to ensure that detectors that cannot run on a ROOT image bounding box can receive a bounding box containing an input concept type that the detectors understand.
11. The system of claim 1 , wherein the processor device is further configured to: return answers to the at least one natural query in a predetermined format that highlights at least one subject of the at least one natural query.
12. A method for solving queries on image data, comprising:
implementing (710) a detector manager with a detector application programming interface (API) to allow at least one external detector to be inserted into the computer system by exposing capabilities of the at least one external detector and providing a predetermined way to execute the at least one external detector;
implementing (720) an ontology manager to expose knowledge bases regarding at least one ontology to a reasoning engine;
implementing (730) a query parser to transform at least one natural query into a query directed acyclic graph (DAG); and
implementing the reasoning engine to: use (740) the query DAG, the ontology manager and the detector API to plan an execution list of detectors, and
use (750) the query DAG, a scene representation DAG produced by the at least one external detector and the ontology manager to answer the at least one natural query.
13. The method of claim 12, wherein the reasoning engine is a probabilistic logic solver.
14. The method of claim 12, further comprising:
using at least one trained language model.
15. The method of claim 12, wherein the at least one ontology extends at least one capability of the at least one detector by describing higher level concepts in terms of basic objects.
16. The method of claim 12, further comprising:
encapsulating, by the detector manager, additional detectors in the detector API.
17. The method of claim 12, further comprising:
converting, via the reasoning engine, the query DAG into logic facts using rules.
18. The method of claim 12, further comprising: performing, via a grounding unit, query expansion on the query DAG by extending the at least one natural query by related terms retrieved from at least one ontology.
19. The method of claim 12, further comprising:
translating the at least one natural query, at least one dependency and at least one data type, and at least one retrieved ontology rule to a corresponding logic language for grounding.
20. A computer program product for domain adaptation, the computer program product comprising a non-transitory computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computing device to cause the computing device to perform the method comprising: implementing (710) a detector manager with a detector application programming interface (API) to allow at least one external detector to be inserted into the computer system by exposing capabilities of the at least one external detector and providing a predetermined way to execute the at least one external detector;
implementing (720) an ontology manager to expose knowledge bases regarding at least one ontology to a reasoning engine;
implementing (730) a query parser to transform at least one natural query into a query directed acyclic graph (DAG); and
implementing the reasoning engine to:
use (740) the query DAG, the ontology manager and the detector API to plan an execution list of detectors, and use (750) the query DAG, a scene representation DAG produced by the at least one external detector and the ontology manager to answer the at least one natural query.
</claims>
</document>
