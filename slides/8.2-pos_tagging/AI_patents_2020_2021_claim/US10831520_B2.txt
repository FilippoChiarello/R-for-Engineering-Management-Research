<document>

<filing_date>
2018-02-26
</filing_date>

<publication_date>
2020-11-10
</publication_date>

<priority_date>
2018-01-11
</priority_date>

<ipc_classes>
G06F8/65,G06F9/455,G06F9/50
</ipc_classes>

<assignee>
NICIRA
</assignee>

<inventors>
PATIL, RAYANAGOUDA BHEEMANAGOUDA
MUSALAY, GORESH
SHARMA, NIDHI
</inventors>

<docdb_family_id>
67140744
</docdb_family_id>

<title>
Object to object communication between hypervisor and virtual machines
</title>

<abstract>
A system and method of communicating between a hypervisor and virtual machines using object agents within the hypervisor and the virtual machines. Further, the hypervisor and virtual machines include similar datastore mappings that allow the hypervisor and virtual machines to communicate with each other. The object agent of a virtual machine communicates information corresponding to a first object to the object agent of the hypervisor, and the object agent of the hypervisor updates a datastore mapping of the hypervisor. The hypervisor then communicates the information corresponding to the first object to an object agent of another virtual machine.
</abstract>

<claims>
1. A method of datastore management within a computer system having a hypervisor running virtual machines, the method comprising: communicating information corresponding to a first object of a first virtual machine of the virtual machines from an object agent in the first virtual machine to an object agent in the hypervisor; updating, by the object agent in the hypervisor, a datastore mapping of the hypervisor based on the information corresponding to the first object; communicating the information from the object agent in the hypervisor to an object agent in a second virtual machine of the virtual machines; and updating, by the object agent of the second virtual machine, a datastore mapping within the second virtual machine with the information corresponding to the first object.
2. The method of claim 1, wherein the datastore mapping within the hypervisor associates each object of the hypervisor with at least one of a unique identifier, an object size, the number of virtual machine references, an object flag, and referencing virtual machine information.
3. The method of claim 1, wherein a datastore mapping within the first virtual machine associates each object of the first virtual machine with at least one of a unique identifier, an object size, an associated mapping with the hypervisor object agent, an object flag, and one or more parameters.
4. The method of claim 1, further comprising identifying another virtual machine having the first object.
5. The method of claim 1, wherein communicating the information corresponding to the first object comprises communicating a verdict of an anti-virus scan, and communicating the change of the first object to the second virtual machine comprises communicating the verdict to the second virtual machine.
6. The method of claim 5, wherein communicating the verdict to the second virtual machine comprises instructing the second virtual machine to delete the first object when the verdict indicates the object is infected.
7. The method of claim 1, wherein communicating the information corresponding to the first object to the object agent of the hypervisor comprises communicating a notification of a software update, and communicating the change of the first object to the second virtual machine comprises communicating the software update to the second virtual machine.
8. The method of claim 1, further comprising providing, by the object agent of the hypervisor, node information from a first virtual machine to a second virtual machine based on a restore request from the second virtual machine.
9. The method of claim 1, further comprising delinking the first virtual machine from a third virtual machine of the virtual machines, wherein the first and third virtual machines are clones.
10. A system for datastore management, the system comprising: a memory; and at least one processor coupled to the memory, the memory and the at least one processor being configured to: run a hypervisor comprising: a first datastore mapping; and a first object agent; and run a first virtual machine configured to run on the hypervisor, the first virtual machine comprising: a second datastore mapping; a first plurality of objects; and a second object agent communicatively coupled to the first object agent and configured to: communicate information corresponding to a first object of the first plurality of objects to the first object agent, run a second virtual machine configured to run on the hypervisor, the second virtual machine comprising: a third datastore mapping; a second plurality of objects; and a third object agent communicatively coupled to the first object agent and configured to: receive the information corresponding to the first object and update a corresponding object of the second plurality of objects.
11. The system of claim 10, wherein the first object agent is further configured to update the first datastore mapping based on the information corresponding to the first object.
12. The system of claim 10, wherein communicating the information corresponding to the first object to the first object agent comprises communicating a verdict of an anti-virus scan, and the first object agent is configured to communicate the verdict to the third object agent of the second virtual machine.
13. The system of claim 10, wherein communicating the information corresponding to the first object to the first object agent comprising communicating a software update, and the first object agent is configured to co communicate the software update to the third object agent of the second virtual machine.
14. The system of claim 10, wherein the first object agent is further configured to provide node information from a first virtual machine to the third object agent of the second virtual machine based on a restore request from the second virtual machine.
15. The system of claim 10, wherein the first object agent is further configured to delink the first virtual machine from a third virtual machine, wherein the first and third virtual machines are clones.
16. A non-transitory computer-readable storage medium containing instructions for controlling a computer processor to: communicate information corresponding to the first object in a first virtual machine from an object agent in the first virtual machine to an object agent in a hypervisor; update, by the object agent in the hypervisor, a datastore mapping within the hypervisor based on the information corresponding to the first object; communicate the information corresponding to the first object from the object agent in the hypervisor to an object agent in a second virtual machine; and update, by the third object agent, a datastore mapping within the second virtual machine with the information corresponding to the first object.
17. The non-transitory computer-readable storage medium of claim 16, wherein communicating the information corresponding to the first object comprises communicating a verdict of an anti-virus scan, and communicating the change of the first object to the second virtual machine comprises communicating the verdict to the second virtual machine.
18. The non-transitory computer-readable storage medium of claim 16, wherein communicating the information corresponding to the first object to the object agent of the hypervisor comprises communicating a notification of a software update, and communicating the change of the first object to the second virtual machine comprises communicating the software update to the second virtual machine.
19. The non-transitory computer-readable storage medium of claim 16, further providing, by the object agent of the hypervisor, node information from a first virtual machine to a second virtual machine based on a restore request from the second virtual machine.
20. The non-transitory computer-readable storage medium of claim 16, further comprising delinking the first virtual machine from a third virtual machine, wherein the first and third virtual machines are clones.
</claims>
</document>
