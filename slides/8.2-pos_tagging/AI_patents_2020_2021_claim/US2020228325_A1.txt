<document>

<filing_date>
2018-12-13
</filing_date>

<publication_date>
2020-07-16
</publication_date>

<priority_date>
2017-12-14
</priority_date>

<ipc_classes>
G06F17/16,G06N20/00,H04L9/00,H04L9/08,H04L9/32
</ipc_classes>

<assignee>
ROBERT BOSCH
</assignee>

<inventors>
FAN, XINXIN
GUAJARDO MERCHAN, JORGE
ZHENG QINGJI
</inventors>

<docdb_family_id>
64899276
</docdb_family_id>

<title>
Method for Faster Secure Multiparty Inner Product with SPDZ
</title>

<abstract>
A method for implementing a secure multiparty inner product computation between two parties using an SPDZ protocol involves having a first party and a second party compute, for i=k, a vector (I)=(II) based on a vector (x={1, . . . , xN}), and a vector (w={W1, WN}), respectively, where (I)=(X2i−X2i) (III)=W2i−1W2i, N is the total number of elements in the vectors k=N/2. The vectors (I), and (III) are securely shared between the parties. The parties then jointly compute SPDZ protocol Add([w2i], [x2i−1]) and Add([w2i], [x2i−1]) to determine shares [w2i−1+x2i] and [w2i+x2i−1] respectively, and then compute, for i=1, . . . , k, inner product shares [di] by performing SPDZ protocol Mult([w2i31 1+x2i], [w2i+x2i−1]). SPDZ protocol ([Add d1],. . . , [dk], −(IV), . . . , −(V), −(VI), −, (VII)) is
</abstract>

<claims>
1. A method for implementing a secure multiparty inner product computation protocol wherein a first computational party holds a first private vector (x={x1, . . ., xN}) and a second computational party holds a second private vector (w={w1, . . . , wN}), the first private vector and the second private vector each having a number N of values, wherein the first computational party and the second computational party want to jointly compute an inner product (d) of the first private vector and the second private vector such that x1w1+ . . . +xNwN=xiwi, without the first computational party learning the second private vector and the second computational party learning the first private vector, the method comprising: using an SPDZ protocol to securely share the first private vector having a from the first computational party to the second computational party; computing, for i=1, . . . , k, a vector xl={x1, . . . , xk} for the first computational party, where k=N/2 and the value xl=x2i−1x2i, and using the SPDZ protocol to securely share the vector xl with the second computational party; using the SPDZ protocol to securely share the second private vector from the first computational party to the second computational party; computing, for i=1, . . . , k, a vector wl={w1, . . . , wk} for the second computational party, where the value wl=w2i−1w2i, and using the SPDZ protocol to securely share the vector W, with the first computational party; computing, for i=1, . . . , k, shares [w2i−1+x2i] and [w2i30 x2i−1] by performing SPDZ protocol Add([w2i], [x2i−1]) and Add([w2i], [x2i−1]), respectively, with the first computational party and the second computational party, the shares [w2i−1+x2i] and [w2i+x2i−1] being shares of (w2i−1+x2i) and (w2i+x2i−1), respectively; computing, for i=1, . . . , k, inner product shares [di] by performing SPDZ protocol Mult([w2i−1+x2i], [w2i+x2i−1]) with the first computational party and the second computational party; and computing the inner product (d) by performing SPDZ protocol Add([d1], . . . , [dk], −[x1], . . . , −[xk], −[w1], . . . , −[wk]) with the first computational party and the second computational party.
2. The method of claim 1, wherein the first private vector is data owned by the first computational party and the second private vector is a weight vector.
3. The method of claim 2, wherein the second computational party is a machine learning service provider.
4. The method of claim 1, wherein the SPDZ sharing protocol is an additive secret sharing protocol.
5. The method of claim 4, wherein the first computational party has a first message authentication code (MAC) key share of a MAC key and the second computational party has a second MAC key share of the MAC key such that the first MAC key share and the second MAC key share added together results in the MAC key.
6. The method of claim 5, wherein the first MAC key is shared by the first computational party to the second computational party and the second MAC key is shared by the second computational party to the first computational party as part of the SPDZ sharing protocol.
7. The method of claim 1, wherein computing the shares [w2i−1+x2i] and [w2i+x2i−1], inner product shares [di], and the inner product (d) occurs during an online phase of the SPDZ protocol.
8. The method of claim 7, wherein both the first computational party and the second computational party generate Beaver triples during an offline phase of the SPDZ protocol which are used by the first computational party and the second computational party during the online phase.
9. A multiparty computation system comprising: a first computational party having a first private vector (x={x1, . . . , xN}), where N is a predetermined number; a second computational party having a second vector (w={w1, . . . , wN}); and at least one secure communication channel via which the first computational party and the second computational party can securely transmit messages to each other; wherein the first computational party and the second computational party are configured to perform a secure multiparty inner product computation based on an SPDZ protocol. to jointly compute an inner product (d) of the first private vector and the second private vector such that x1w1+ . . . +xNwN=Σi=1Nxiwi, without the first computational party learning the second private vector and the second computational party learning the first private vector, wherein the secure multiparty inner product computation includes: using the SPDZ protocol to securely share the first private vector having a from the first computational party to the second computational party, computing, for i=1, . . . , k, a vector xl={x1, . . . , xk} for the first computational party, where k=N/2 and the value xl=x2i−1x2i, and using the SPDZ protocol to securely share the vector xl with the second computational party, using the SPDZ protocol to securely share the second private vector from the first computational party to the second computational party, computing, for i=1, . . . , k, a vector wl={w1, . . . , wk} for the second computational party, where the value W, =w2i−1w2i, and using the SPDZ protocol to securely share the vector W, with the first computational party, computing, for i=1, . . ., k, shares [w2i−1+x2i] and [w2i+x2i−1] by performing SPDZ protocol Add([w2i], [x2i−1]) and Add([w2i], [x2i−1]), respectively, with the first computational party and the second computational party, the shares [w2i−1+x2i] and [w2i+x2i−1] being shares of (w2i−1+x2i) and (w2i+x2i−1), respectively, computing, for i=1, . . . , k, inner product shares [di] by performing SPDZ protocol Mult([w2i−1+x2i], [w2i+x2i−1]) with the first computational party and the second computational party, and computing the inner product (d) by performing SPDZ protocol Add([d1], . . . , [dk], −[x1], . . . , −[xk], −[w1], . . . , −[wk]) with the first computational party and the second computational party.
10. The system of claim 9, wherein the first private vector is data owned by the first computational party and the second private vector is a weight vector.
11. The system of claim 10, wherein the second computational party is a machine learning service provider.
12. The system of claim 9, wherein the SPDZ sharing protocol is an additive secret sharing protocol.
13. The system of claim 12, wherein the first computational party has a first message authentication code (MAC) key share of a MAC key and the second computational party has a second MAC key share of the MAC key such that the first MAC key share and the second MAC key share added together results in the MAC key.
14. The system of claim 13, wherein the first MAC key is shared by the first computational party to the second computational party and the second MAC key is shared by the second computational party to the first computational party as part of the SPDZ sharing protocol.
15. The system of claim 9, wherein computing the shares [w2i−1+x2i] and [w2i+x2i−1], inner product shares [di], and the inner product (d) occurs during an online phase of the SPDZ protocol.
16. The system of claim 15, wherein both the first computational party and the second computational party generate Beaver triples during an offline phase of the SPDZ protocol which are used by the first computational party and the second computational party during the online phase.
</claims>
</document>
