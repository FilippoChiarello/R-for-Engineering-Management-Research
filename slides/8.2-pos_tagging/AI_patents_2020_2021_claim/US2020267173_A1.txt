<document>

<filing_date>
2020-02-13
</filing_date>

<publication_date>
2020-08-20
</publication_date>

<priority_date>
2008-09-12
</priority_date>

<ipc_classes>
G06F21/53,G06F21/55,G06F9/455,H04L29/06
</ipc_classes>

<assignee>
GEORGE MASON RESEARCH FOUNDATION
</assignee>

<inventors>
HUANG, YIH
WANG JIANG
STAVROU, ANGELOS
GHOSH, ANUP
</inventors>

<docdb_family_id>
42166401
</docdb_family_id>

<title>
METHODS AND APPARATUS FOR APPLICATION ISOLATION
</title>

<abstract>
Processor(s) for detecting malicious software. A hardware virtual machine monitor (HVMM) operates under a host OS. Container(s) initialized with network application template(s) operate under a guest OS VM. A detection module operates under the guest OS VM includes a trigger detection module, a logging module and a container command module. The trigger detection module monitors activity on container(s) for a trigger event. The logging module writes activity report(s) in response to trigger event(s). The container command module issues command(s) in response to trigger event(s). The command(s) include a container start, stop and revert commands. A virtual machine control console operates under the host OS and starts/stops the HVMM. A container control module operates under the guest OSVM and controls container(s) in response to the command(s). The server communication module sends activity report(s) to a central collection network appliance that maintains a repository of activities for infected devices.
</abstract>

<claims>
1. 1.-20. (canceled)
21. A non-transitory processor-readable medium storing code representing instructions to be executed by a hardware processor, the code comprising code to cause the hardware processor to: execute a first browser instance within a first virtual environment from a plurality of virtual environments based on the first browser instance accessing a first link, the first link being associated with a first class of links, the plurality of virtual environments providing a first level of virtualization within a second level of virtualization; execute a second browser instance within a second virtual environment from the plurality of virtual environments based on the second browser instance accessing a second link, the second link being associated with a second class of links different from the first class of links, the second virtual environment isolating the second browser instance from the first browser instance; monitor behavior of the first browser instance and the second browser instance to detect unauthorized activity of at least one of the first browser instance or the second browser instance; and discard the first virtual environment without discarding the second virtual environment when unauthorized activity of the first browser instance is detected and unauthorized activity of the second browser instance is not detected.
22. The non-transitory processor-readable medium of claim 21, wherein the first link is associated with a private website and the second link is associated with a public website.
23. The non-transitory processor-readable medium of claim 21, wherein each virtual environment from the plurality of virtual environments is associated with a different semi-persistent storage than the remaining virtual environments from the plurality of virtual environments such that data in a semi-persistent storage associated with the first virtual environment is not accessible to the remaining virtual environments from the plurality of virtual environments.
24. The non-transitory processor-readable medium of claim 21, wherein the second link is from a plurality of links accessed by the second browser instance within the second virtual environment.
25. The non-transitory processor-readable medium of claim 21, wherein the first virtual environment shares a persistent storage with the second virtual environment.
26. The non-transitory processor-readable medium of claim 21, wherein the code further comprises code to cause the processor to: initiate, at a first time and as a background process, the first browser instance within the first virtual environment; receive, at a second time after the first time, an indication from a user to initiate a browser to access the first link; and present the first browser instance to the user as the browser.
27. The non-transitory processor-readable medium of claim 21, wherein the code further comprises code to cause the processor to: receive an indication from a user to access a third link, the third link associated with the first class of links; and initiate a third virtual environment from the plurality of virtual environments such that each browser instance accessing a link from the first class of links is within a separate virtual environment.
28. The non-transitory processor-readable medium of claim 21, wherein the code further comprises code to cause the processor to: receive an indication from a user to access a third link, the third link associated with the second class of links; and accessing the third link within the second virtual environment such that each link from the second class of links that is accessed is accessed within a common virtual environment.
29. An apparatus, comprising: a memory; and a hardware processor communicatively coupled to the memory, the hardware processor configured to execute a plurality of virtual environments, each virtual environment from the plurality of virtual environments executing a browser instance accessing a link from a first class of links, each virtual environment from the plurality of virtual environments isolating, from the remaining virtual environments from the plurality of virtual environments, the browser instance executed by that virtual environment, the hardware processor configured to execute a virtual environment associated with a second class of links, the hardware processor configured to access in the virtual environment associated with the second class of links each link from a plurality of links associated with the second class of links, the hardware processor configured to monitor behavior within the virtual environment and each virtual environment from the plurality of virtual environments to detect unauthorized activity.
30. The apparatus of claim 29, wherein each virtual environment from the plurality of virtual environments executes a browser instance associated with a private link, the plurality of links associated with the second class of links being public links.
31. The apparatus of claim 29, wherein the hardware processor is configured to: initiate, at a first time and as a background process, a browser instance within the virtual environment; receive, at a second time after the first time, an indication from a user to initiate a browser to access a link associated with the second class of links; and present the browser instance to the user as the browser.
32. The apparatus of claim 29, wherein each virtual environment from the plurality of virtual environments is associated with a different semi-persistent storage than the remaining virtual environments from the plurality of virtual environments such that data in a semi-persistent storage associated with each virtual environment from the plurality of virtual environments is not accessible to the remaining virtual environments from the plurality of virtual environments.
33. The apparatus of claim 29, wherein the hardware processor is configured to discard a virtual environment from the plurality of virtual environments in response to detecting unauthorized activity within that virtual environment.
34. The apparatus of claim 29, wherein each of the virtual environment and the plurality of virtual environments provide a first level of virtualization within a second level of virtualization.
35. A method, comprising: receiving an indication from a user to access a first link, the first link being associated with a first class of links; accessing the first link in a first virtual environment from a plurality of virtual environments; receiving an indication from the user to access a second link, the second link being associated with the first class of links; accessing the second link in a second virtual environment from the plurality of virtual environments to isolate a browser instance accessing the first link from a browser instance accessing the second link; receiving an indication from the user to access a third link, the third link being associated with a second class of links different from the first class of links; accessing the third link in a third virtual environment from the plurality of virtual environments; receiving an indication from the user to access a fourth link, the fourth link being associated with the second class of links; accessing the fourth link in the third virtual environment based on both the third link and the fourth link being from the second class of links such that a browser instance accessing the third link is not isolated from a browser instance accessing the fourth link; monitoring behavior within each virtual environment from the plurality of virtual environments to detect unauthorized activity; and discarding a virtual environment from the plurality of virtual environments in response to detecting unauthorized activity within that virtual environment.
36. The method of claim 35, wherein the plurality of virtual environments provides a first level of virtualization within a second level of virtualization.
37. The method of claim 35, wherein the first class of links is associated with private websites and the second class of links is associated with public websites.
38. The method of claim 35, further comprising: initiating, at a first time and as a background process, a browser within the first virtual environment, the receiving the indication from the user to access the first link being at a second time; and presenting the browser to the user as the browser instance accessing the first link.
39. The method of claim 35, wherein the first virtual environment is associated with a first semi-persistent storage, the second virtual environment is associated with a second semi-persistent storage different from the first semi-persistent storage, and the third virtual environment is associated with a third semi-persistent storage different from the first semi-persistent storage and the second semi-persistent storage such that data is isolated between the first semi-persistent storage, the second semi-persistent storage, and the third semi-persistent storage.
40. The method of claim 35, wherein the first virtual environment, the second virtual environment and the third virtual environment share a persistent storage.
</claims>
</document>
