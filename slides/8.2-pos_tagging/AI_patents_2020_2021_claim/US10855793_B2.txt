<document>

<filing_date>
2017-09-25
</filing_date>

<publication_date>
2020-12-01
</publication_date>

<priority_date>
2017-09-25
</priority_date>

<ipc_classes>
H04L12/24,H04L29/08
</ipc_classes>

<assignee>
SPLUNK
</assignee>

<inventors>
KRUEGER, BRIAN
MUNGEL, NIKHIL
</inventors>

<docdb_family_id>
65808254
</docdb_family_id>

<title>
Proxying hypertext transfer protocol (HTTP) requests for microservices
</title>

<abstract>
In various embodiments, a gateway application generates an outgoing Hypertext Transmission Protocol (HTTP) request based on an incoming HTTP request. In operation, the gateway application receives the incoming HTTP request and identifies an upstream service based on at least one of an HTTP method and a header included in the incoming HTTP request. Subsequently, the gateway application generates an outgoing HTTP request based on the upstream service and the incoming HTTP request. Finally, the gateway application issues the outgoing HTTP request. The outgoing HTTP request causes the upstream service to perform an action requested in the incoming HTTP request. Advantageously, the gateway application enables underlying upstream services to perform actions specified via incoming HTTP requests without directly exposing the upstream services to users.
</abstract>

<claims>
1. A computer-implemented method, comprising: identifying a first host and a first path associated with an upstream service that executes on at least one computing system, wherein identifying the first host and the first path comprises: determining a tenant identifier based on information specified in an incoming Hypertext Transmission Protocol (HTTP) request, and applying a rule included in a plurality of rules based on (1) an HTTP method and a second path specified in the incoming HTTP request and (2) the tenant identifier, wherein the rule maps the HTTP method, the second path, and the tenant identifier to a Uniform Resource Identifier (URI) that is associated with the upstream service and includes the first host and the first path; generating an outgoing HTTP request based on the incoming HTTP request, wherein generating the outgoing HTTP request comprises replacing a second host and the second path specified in the incoming HTTP request with the first host and the first path, respectively; and issuing the outgoing HTTP request to cause the upstream service to perform an action requested in the incoming HTTP request.
2. The computer-implemented method of claim 1, further comprising, prior to generating the outgoing HTTP request, performing one or more authorization operations based on the incoming HTTP request to determine that the incoming HTTP request is authorized.
3. The computer-implemented method of claim 1, further comprising, prior to generating the outgoing HTTP request, performing one or more authentication operations based on the incoming HTTP request to determine that the incoming HTTP request is authentic.
4. The computer-implemented method of claim 1, wherein the tenant identifier is determined based on information specified in an authorization header included in the incoming HTTP request.
5. The computer-implemented method of claim 1, wherein the rule is further applied based information specified in a custom header included in the incoming HTTP request.
6. The computer-implemented method of claim 1, wherein generating the outgoing HTTP request further comprises: generating at least one of a tenancy header or a user header based on the incoming HTTP request; and adding the at least one of the tenancy header or the user header to the outgoing HTTP request.
7. The computer-implemented method of claim 1, wherein the upstream service comprises one of a first microservice, a first service, or a first container executing on an upstream server.
8. The computer-implemented method of claim 1, wherein the upstream service comprises a microservice executing on an upstream server and included in a data storage system that stores data as a plurality of time-indexed events including respective segments of raw machine data.
9. The computer-implemented method of claim 1, wherein performing the action requested in the incoming HTTP request comprises executing one or more search operations or executing one or more storage operations.
10. The computer-implemented method of claim 1, further comprising receiving the incoming HTTP request from a load balancing application.
11. The computer-implemented method of claim 1, further comprising: receiving a second HTTP request; determining that the second HTTP request is not valid; and issuing an HTTP response indicating that the second HTTP request was not successfully processed.
12. A non-transitory computer-readable storage medium including instructions that, when executed by a processor, cause the processor to perform the steps of: identifying a first host and a first path associated with an upstream service that executes on at least one computing system , wherein identifying the first host and the first path comprises: determining a tenant identifier based on information specified in an incoming Hypertext Transmission Protocol (HTTP) request, and applying a rule included in a plurality of rules based on (1) an HTTP method and a second path specified in the incoming HTTP request and (2) the tenant identifier, wherein the rule maps the HTTP method, the second path, and the tenant identifier to a Uniform Resource Identifier (URI) that is associated with the upstream service and includes the first host and the first path; generating an outgoing HTTP request based on the incoming HTTP request, wherein generating the outgoing HTTP request comprises replacing a second host and the second path specified in the incoming HTTP request with the first host and the first path, respectively; and issuing the outgoing HTTP request to cause the upstream service to perform an action requested in the incoming HTTP request.
13. The non-transitory computer-readable storage medium of claim 12, the steps further comprising, prior to generating the outgoing HTTP request, performing one or more authorization operations based on the incoming HTTP request to determine that the incoming HTTP request is authorized.
14. The non-transitory computer-readable storage medium of claim 12, the steps further comprising, prior to generating the outgoing HTTP request, performing one or more authentication operations based on the incoming HTTP request to determine that the incoming HTTP request is authentic.
15. The non-transitory computer-readable storage medium of claim 12, wherein the tenant identifier is determined based on information specified in an authorization header included in the incoming HTTP request.
16. The non-transitory computer-readable storage medium of claim 12, wherein generating the outgoing HTTP request further comprises: generating at least one of a tenancy header or a user header based on the incoming HTTP request; and adding the at least one of the tenancy header or the user header to the outgoing HTTP request.
17. The non-transitory computer-readable storage medium of claim 12, wherein the upstream service comprises one of a first microservice, a first service, a first database, or a first container executing on an upstream server.
18. The non-transitory computer-readable storage medium of claim 12, the steps further comprising: receiving a second HTTP request; determining that the second HTTP request is not valid; and issuing an HTTP response indicating that the second HTTP request was not successfully processed.
19. A computing device comprising: a memory storing a gateway application; and a processor coupled to the memory, wherein, when executed by the processor, the gateway application causes the processor to: identify a first host and a first path associated with an upstream service that executes on at least one computing system, wherein identifying the first host and the first path comprises: determining a tenant identifier based on information specified in an incoming Hypertext Transmission Protocol (HTTP) request, and applying a rule included in a plurality of rules based on (1) an HTTP method and a second path specified in the incoming HTTP request and (2) the tenant identifier, wherein the rule maps the HTTP method, the second path, and the tenant identifier to a Uniform Resource Identifier (URI) that is associated with the upstream service and includes the first host and the first path, generate an outgoing HTTP request based on the incoming HTTP request, wherein generating the outgoing HTTP request comprises replacing a second host and the second path specified in the incoming HTTP request with the first host and the first path, respectively, and issue the outgoing HTTP request to cause the upstream service to perform an action requested in the incoming HTTP request.
20. The computing device of claim 19, wherein prior to generating the outgoing HTTP request, the gateway application further causes the processor to perform one or more authorization operations based on the incoming HTTP request to determine that the incoming HTTP request is authorized.
21. The computing device of claim 19, wherein prior to generating the outgoing HTTP request, the gateway application further causes the processor to perform one or more authentication operations based on the incoming HTTP request to determine that the incoming HTTP request is authentic.
22. The computing device of claim 19, wherein the tenant identifier is determined based on information specified in an authorization header included in the incoming HTTP request.
23. The computing device of claim 19, wherein generating the outgoing HTTP request further comprises: generating at least one of a tenancy header or a user header based on the incoming HTTP request; and adding the at least one of the tenancy header or the user header to the outgoing HTTP request.
24. The computing device of claim 19, wherein the upstream service comprises one of a first microservice, a first service, a first database, or a first container executing on an upstream server.
</claims>
</document>
