<document>

<filing_date>
2019-10-07
</filing_date>

<publication_date>
2020-03-10
</publication_date>

<priority_date>
2017-07-25
</priority_date>

<ipc_classes>
B60W50/02,B60W50/04,G06F11/07,G06F11/16,G06F11/36,G06F12/06,G06F16/188,G06F21/57,G06F8/60,G06F8/65,G06F8/654,G06F8/656,G06F8/658,G06F8/71,G06F9/4401,G06F9/445,G06F9/455,G06N20/00
</ipc_classes>

<assignee>
AURORA LABS
</assignee>

<inventors>
FOX, ZOHAR
</inventors>

<docdb_family_id>
65037881
</docdb_family_id>

<title>
Self-healing learning system for one or more controllers
</title>

<abstract>
Disclosed embodiments relate to automatically providing updates to at least one vehicle. Operations may include receiving, at a server remote from the at least one vehicle, Electronic Control Unit (ECU) activity data from the at least one vehicle, the ECU activity data corresponding to actual operation of the ECU in the at least one vehicle; determining, at the server and based on the ECU activity data, a software vulnerability affecting the at least one vehicle, the software vulnerability being determined based on a deviation between the received ECU activity data and expected ECU activity data; identifying, at the server, an ECU software update based on the determined software vulnerability; and sending, from the server, a delta file configured to update software on the ECU with a software update corresponding to the identified ECU software update.
</abstract>

<claims>
1. A non-transitory computer readable medium including instructions that, when executed by at least one processor, cause the at least one processor to perform operations for automatically providing software changes, comprising: identifying controller activity data from a first controller; identifying a software vulnerability affecting the first controller, the software vulnerability being identified based on a deviation between the identified controller activity data and expected controller activity data; identifying a controller software change based on the identified software vulnerability, wherein the identified controller software change is configured to adjust the first controller from executing a first version of controller software to a second version of controller software; sending, to the first controller, a multi-dimensional delta file configured based on the identified controller software change; configuring the first version of controller software on the first controller to become non-executable; determining that a memory of the first controller is utilized above a threshold; deleting content from the memory based on the determination that the memory is utilized above the threshold; identifying a second controller determined to be similar to the first controller; and sending the multi-dimensional delta file to the second controller based on the determined similarity.
2. The non-transitory computer readable medium of claim 1, wherein the multi-dimensional delta file comprises position-independent code.
3. The non-transitory computer readable medium of claim 1, wherein the multi-dimensional delta file comprises at least one of: a binary data dimension, a source attribute dimension, and a map file dimension.
4. The non-transitory computer readable medium of claim 1, wherein the expected controller activity data comprises an expected envelope of operational attributes of the first controller.
5. The non-transitory computer readable medium of claim 1, the operations further comprising generating an alert associated with the first controller based on the identified software vulnerability.
6. The non-transitory computer readable medium of claim 1, the operations further comprising blocking an instruction sent from the first controller based on the identified software vulnerability.
7. The non-transitory computer readable medium of claim 1, wherein the first controller is part of a plurality of controllers being monitored as a group.
8. The non-transitory computer readable medium of claim 7, wherein the second controller is part of another plurality of controllers being monitored as a group, and the first and second controllers are of a common controller type.
9. A method for performing operations for automatically providing software changes, the method comprising: identifying controller activity data from a first controller; identifying a software vulnerability affecting the first controller, the software vulnerability being identified based on a deviation between the identified controller activity data and expected controller activity data; identifying a controller software change based on the identified software vulnerability, wherein the identified controller software change is configured to adjust the first controller from executing a first version of controller software to a second version of controller software; sending, to the first controller, a multi-dimensional delta file configured based on the identified controller software change; configuring the first version of controller software on the first controller to become non-executable; determining that a memory of the first controller is utilized above a threshold; deleting content from the memory based on the determination that the memory is utilized above the threshold; identifying a second controller determined to be similar to the first controller; and sending the multi-dimensional delta file to the second controller based on the determined similarity.
10. The method of claim 9, wherein the multi-dimensional delta file comprises position-independent code.
11. The method of claim 9, wherein the multi-dimensional delta file comprises at least one of: a binary data dimension, a source attribute dimension, and a map file dimension.
12. The method of claim 9, wherein the expected controller activity data comprises an expected envelope of operational attributes of the first controller.
13. The method of claim 9 further comprising generating an alert associated with the first controller based on the identified software vulnerability.
14. The method of claim 9 further comprising blocking an instruction sent from the first controller based on the identified software vulnerability.
15. The method of claim 9, wherein the first controller is part of a plurality of controllers being monitored as a group.
16. The method of claim 15, wherein the second controller is part of another plurality of controllers being monitored as a group, and the first and second controllers are of a common controller type.
</claims>
</document>
