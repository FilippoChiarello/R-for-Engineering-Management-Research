<document>

<filing_date>
2018-12-17
</filing_date>

<publication_date>
2020-12-01
</publication_date>

<priority_date>
2018-12-17
</priority_date>

<ipc_classes>
G06F11/34,G06F11/36,G06F3/0481
</ipc_classes>

<assignee>
SHUTTERSTOCK
</assignee>

<inventors>
Beaman, Roger Wilbur
Dean, III, John Holmes
Hazes, Rachel Judith
</inventors>

<docdb_family_id>
73554871
</docdb_family_id>

<title>
Recording and playback of a web browser session
</title>

<abstract>
A method including capturing a document object model event from a user accessing a document in an application is provided. The method includes identifying a window for the application in a display, identifying a relative position of a cursor from the user within the window, and detecting a resolution for the display within the window. The method also includes inserting a time-stamp for the document object model event and adding the document object model event, the relative position of the cursor, the resolution for the display, and the time-stamp in a playback code. The method also includes playing back the document object model event in a sequence according to the time-stamp, the relative position of the cursor, and the resolution for the display, in a second display. A system and a non-transitory, computer-readable medium to perform the above method are also provided.
</abstract>

<claims>
1. A computer-implemented method, comprising: capturing a document object model event from a user accessing a document in an application; identifying a window for the application in a display; identifying a relative position of a cursor from the user within the window; detecting a resolution for the display within the window; inserting a time-stamp for the document object model event according to a time interval that captures the document object model event at a pre-determined frequency; adding the document object model event, the relative position of the cursor, the resolution for the display, and the time-stamp in a playback code; finding the smallest number of identifiers for each event to define a unique node path that comprises multiple sequential events having a common parent event and a common identifier including a class name and a node type; and playing back the document object model event in a sequence according to the time-stamp, the relative position of the cursor, and the resolution for the display, in a second display, wherein inserting the time-stamp for the document object model event comprises creating an artificial tick to set multiple events within the artificial tick with a same time-stamp.
2. The computer-implemented method of claim 1, further comprising receiving an acceptance input from the user before capturing the document object model event.
3. The computer-implemented method of claim 1, wherein the application is a browser accessing an internet-based network, and the computer-implemented method further comprises gathering a data accessed by the user with the browser.
4. The computer-implemented method of claim 1, wherein the application is a browser accessing an internet-based network, and the computer-implemented method further comprises retrieving an image accessed by the user with the browser and placing the image within a canvas in the window.
5. The computer-implemented method of claim 1, further comprising inserting a metadata in the playback code based on the time-stamp and the document object model event, wherein the metadata is indicative of a characteristic of a user session within the application.
6. The computer-implemented method of claim 1, wherein playing back the document object model event comprises playing, at least partially, a tour of the application for a potential user.
7. The computer-implemented method of claim 1, wherein playing back the document comprises testing the application.
8. The computer-implemented method of claim 1, further comprising evaluating a user-interface interaction based on the playing back the document object model event.
9. The computer-implemented method of claim 1, further comprising storing the playback code in an executable file and providing the executable file for the user.
10. The computer-implemented method of claim 1, wherein playing back the document object model event comprises delaying the document object model event based on the time-stamp and a second time-stamp for a second document object model event.
11. The computer-implemented method of claim 1, further comprising creating a fake document object model event interpolated between a first document object model event and a second document object model event.
12. The computer-implemented method of claim 1, further comprising restoring the application to an original state after playing back the document object model event.
13. A system, comprising: one or more processors; and a memory coupled to the one or more processors, the memory including instructions that, when executed by the one or more processors, cause the system to: capture a document object model event from a user accessing a document in an application; identify a window for the application in a display; identify a relative position of a cursor from the user within the window; detect a resolution for the display within the window; insert a time-stamp for the document object model event according to a time interval that captures the document object model event at a pre-determined frequency; include the document object model event, the relative position of the cursor, the resolution for the display, and the time-stamp in a playback code; find a smallest number of identifiers for each event to define a unique node path that comprises multiple sequential events having a common parent event and a common identifier including a class name and a node type; and play back the document object model event in a sequence according to the time-stamp, the relative position of the cursor, and the resolution for the display, in a second display, wherein to insert the time-stamp for the document object model event the one or more processors execute instructions to create an artificial tick to set multiple events within the artificial tick with the same time-stamp.
14. The system of claim 13, wherein the application is a browser accessing an internet-based network, and the one or more processors further execute instructions to retrieve an image accessed by the user with the browser and placing the image within a canvas in the window.
15. The system of claim 13, wherein to play back the document object model event the one or more processors further execute instructions to delay the document object model event based on the time-stamp and a second time-stamp for a second document object model event.
16. A non-transitory, computer-readable medium storing instructions which, when executed by a processor, cause a computer to perform a method, the method comprising: capturing a document object model event from a user accessing a document in an application; identifying a window for the application in a display; identifying a relative position of a cursor from the user within the window; detecting a resolution for the display within the window; inserting a time-stamp for the document object model event according to a time interval that captures the document object model event at a pre-determined frequency; including the document object model event, the relative position of the cursor, the resolution for the display, and the time-stamp in a playback code; finding a smallest number of identifiers for each event to define a unique node path that comprises multiple sequential events having a common parent event and a common identifier including a class name and a node type; and playing back the document object model event in a sequence according to the time-stamp, the relative position of the cursor, and the resolution for the display, in a second display wherein inserting the time-stamp for the document object model event comprises creating an artificial tick to set multiple events within the artificial tick with a same time-stamp.
17. The non-transitory, computer-readable medium of claim 16, wherein the application is a browser accessing an internet-based network, and the method further comprises retrieving an image accessed by the user with the browser and placing the image within a canvas in the window.
</claims>
</document>
