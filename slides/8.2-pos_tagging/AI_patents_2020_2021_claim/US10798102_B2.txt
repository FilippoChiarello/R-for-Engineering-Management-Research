<document>

<filing_date>
2017-11-14
</filing_date>

<publication_date>
2020-10-06
</publication_date>

<priority_date>
2017-11-14
</priority_date>

<ipc_classes>
G06F21/62,G06F21/78,G06N3/04,G06N3/08,H04L12/58,H04L29/06,H04L29/08
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
RUEGER, ERIK
SCHMITT, CHRISTOF
</inventors>

<docdb_family_id>
66431458
</docdb_family_id>

<title>
Protecting data at an object level
</title>

<abstract>
A computer-implemented method according to one embodiment includes identifying an object within a system, determining metadata associated with the object, calculating a logical protection level for the object, utilizing the metadata, and implementing a physical protection level for the object within the system, utilizing the logical protection level for the object.
</abstract>

<claims>
1. A computer-implemented method, comprising: identifying an object within a system; extracting metadata associated with the object by identifying one or more characteristics of the object; providing as input, to an artificial neural network (ANN), the metadata associated with the object; receiving as output, from the ANN, a logical protection level for the object; identifying a predetermined mapping between the logical protection level and a physical protection level; identifying the physical protection level for the object within the system, based on the predetermined mapping; and implementing, via data storage techniques including a hardware level of protection and a software level of protection, the physical protection level for the object within the system, based on the logical protection level for the object.
2. The computer-implemented method of claim 1, wherein the metadata includes: a time and date of a creation of the object; a time and date of an accessing of the object; and a time and date of a modifying of the object.
3. The computer-implemented method of claim 1, wherein the metadata includes: one or more identifiers of data within the object; a file extension for data within the object; a size of the object; a user ID associated with the object; and a group ID associated with the object.
4. The computer-implemented method of claim 1, wherein the metadata includes: a user defined protection level; a location associated with the object; a folder in which the object is currently stored; and a multipurpose internet mail extensions (MIME) type of the object.
5. The computer-implemented method of claim 1, wherein the logical protection level indicates a level of security to be implemented for the object.
6. The computer-implemented method of claim 1, wherein the metadata includes: a time and date of a creation of the object, a time and date of an accessing of the object, a time and date of a modifying of the object, one or more identifiers of data within the object, a file extension for data within the object, a size of the object, a user ID associated with the object, a group ID associated with the object, a user defined protection level, a location associated with the object, a folder in which the object is currently stored, and a multipurpose internet mail extensions (MIME) type of the object.
7. The computer-implemented method of claim 1, wherein the ANN is trained using training data and manual annotations.
8. The computer-implemented method of claim 1, wherein the predetermined mapping is adjusted dynamically based on machine learning.
9. The computer-implemented method of claim 1, wherein implementing the physical protection level for the object includes storing the object within the system, utilizing a data storage technique associated with the physical protection level.
10. The computer-implemented method of claim 9, wherein the data storage technique includes a type of hardware RAID to be used to store the object.
11. The computer-implemented method of claim 9, wherein the data storage technique includes a type of software RAID to be used to store the object.
12. The computer-implemented method of claim 9, wherein the data storage technique includes a type of erasure code to be used to store the object as well as hardware storage necessary to implement the type of erasure code.
13. A computer program product for protecting data at an object level, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, wherein the computer readable storage medium is not a transitory signal per se, the program instructions executable by a processor to cause the processor to perform a method comprising: identifying an object within a system, utilizing the processor; extracting metadata associated with the object by identifying one or more characteristics of the object, utilizing the processor; providing as input, to an artificial neural network (ANN), the metadata associated with the object, utilizing the processor; receiving as output, from the ANN, a logical protection level for the object, utilizing the processor; identifying a predetermined mapping between the logical protection level and a physical protection level, utilizing the processor; identifying, utilizing the processor, the physical protection level for the object within the system, based on the predetermined mapping; and implementing, via data storage techniques including a hardware level of protection and a software level of protection, the physical protection level for the object within the system, utilizing the processor and the logical protection level for the object.
14. The computer program product of claim 13, wherein implementing the physical protection level includes storing the object within the system, using a data storage technique having a predetermined hardware level of protection and a predetermined software level of protection.
15. The computer program product of claim 14, wherein the predetermined hardware level of protection includes a RAID configuration, and the predetermined software level of protection includes an erasure code.
16. A system, comprising: a hardware processor; and logic integrated with the hardware processor, executable by the hardware processor, or integrated with and executable by the hardware processor, the logic being configured to: identify an object within a system; extract metadata associated with the object by identifying one or more characteristics of the object; provide as input, to an artificial neural network (ANN), the metadata associated with the object; receive as output, from the ANN, a logical protection level for the object; identify a predetermined mapping between the logical protection level and a physical protection level; identify the physical protection level for the object within the system, based on the predetermined mapping; and implement, via data storage techniques including a hardware level of protection and a software level of protection, the physical protection level for the object within the system, based on the logical protection level for the object.
</claims>
</document>
