<document>

<filing_date>
2019-06-27
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-27
</priority_date>

<ipc_classes>
G06F11/07,G06F11/30,G06F16/906,G06F16/951,G06F9/38,G06F9/54,G06N20/00
</ipc_classes>

<assignee>
CAPITAL ONE SERVICES
</assignee>

<inventors>
BARNUM, ERIC K.
BALASUBRAMANIAN, MURALIDHARAN
WATSON, DAVID
DALLEN, JULIE
</inventors>

<docdb_family_id>
74043644
</docdb_family_id>

<title>
BASELINE MODELING FOR APPLICATION DEPENDENCY DISCOVERY, REPORTING, AND MANAGEMENT TOOL
</title>

<abstract>
Techniques for monitoring operating statuses of an application and its dependencies are provided. A monitoring application may collect and report the operating status of the monitored application and each dependency. Through use of existing monitoring interfaces, the monitoring application can collect operating status without requiring modification of the underlying monitored application or dependencies. The monitoring application may determine a problem service that is a root cause of an unhealthy state of the monitored application. Dependency analyzer and discovery crawler techniques may automatically configure and update the monitoring application. Machine learning techniques may be used to determine patterns of performance based on system state information associated with performance events and provide health reports relative to a baseline status of the monitored application. Also provided are techniques for testing a response of the monitored application through modifications to API calls. Such tests may be used to train the machine learning model.
</abstract>

<claims>
1. A computer-implemented method comprising: configuring a monitoring application to monitor a first application and a plurality of dependencies of the first application using a plurality of monitoring interfaces; collecting, by one or more data collecting agents and at a first time, first system state information corresponding to the first application and each of the plurality of dependencies, wherein the first application has a healthy status at the first time; detecting, by the monitoring application and based on the plurality of monitoring interfaces, that the first application has an unhealthy operating status at a second time; collecting, by the one or more data collecting agents and based on detecting that the first application has the unhealthy operating status, second system state information corresponding to the first application and each of the plurality of dependencies; storing the collected first system state information and second system state information in a database as a first status record and a second status record, respectively; training a machine learning model based on a plurality of status records including the first status record and the second status record, wherein training the machine learning model comprises: clustering incident events corresponding to status records associated with the first application having an unhealthy status, wherein clustering the incident events is based on attributes of system state information, of a corresponding status record, corresponding to each of the plurality of dependencies; determining one or more patterns of performance based on the clustered incident events and the first system state information, wherein a first pattern of performance of the one or more patterns of performance indicates a potential correlation between a first attribute of the system state information corresponding to a first dependency and the first application having the unhealthy operating status; and updating the machine learning model based on the determined patterns of performance; generating, using the machine learning model and based on the first pattern of performance, a health report for the first application and the plurality of dependencies, wherein the health report indicates a likelihood that the first application will enter an unhealthy status.
2. The method of claim 1, further comprising: detecting, by the monitoring application and based on the plurality of monitoring interfaces, a current operating status of the first application and the plurality of dependencies, wherein generating the health report for the first application and the plurality of dependencies is further based on the current operating status of the first application and the plurality of dependencies.
3. The method of claim 1, wherein the health report indicates at least one metric associated with the first dependency.
4. The method of claim 1, wherein the health report comprises a visualization of the plurality of dependencies.
5. The method of claim 1, wherein the health report indicates a likelihood that a current condition of the first dependency will cause the first application to enter an unhealthy state.
6. The method of claim 1, further comprising: determining a likelihood that a current condition of each dependency of the plurality of dependencies will cause the first application to enter an unhealthy state, wherein the health report indicates that a second dependency, of the plurality of dependencies, is a most critical dependency based on the second dependency having a highest likelihood of causing the first application to enter an unhealthy state.
7. The method of claim 1, further comprising: determining, using the machine learning model, a second dependency of the plurality of dependencies that corresponds to a source of risk for the first application; and generating, using the machine learning model, a suggested action to mitigate a risk associated with the second dependency.
8. The method of claim 1, wherein the first dependency corresponds to an Application Programming Interface (API) associated with a resource utilized by the first application, and wherein a second dependency corresponds to a network utilized by the first application to communicate with the first dependency.
9. The method of claim 1, wherein the first application is determined to have an unhealthy status based on whether one or more metrics associated with the first application satisfy one or more operating status thresholds.
10. The method of claim 1, wherein the first system state information corresponding to the first dependency comprises information indicating one or more of: whether a resource associated with the first dependency is accessible; a response latency associated with requests to the first dependency; an error rate associated with requests to the first dependency; or an error state or error message provided by the first dependency.
11. The method of claim 1, wherein the plurality of monitoring interfaces comprises a first monitoring interface configured to enable monitoring of the first dependency, wherein the first monitoring interface is generated by a monitoring interface application and is configured to determine at least one metric associated with the first dependency.
12. The method of claim 11, wherein configuring the monitoring application to monitor the first application and the plurality of dependencies comprises: configuring the monitoring application to utilize the first monitoring interface through at least one monitoring query associated with the monitoring interface application.
13. The method of claim 1, wherein the first pattern of performance is a pattern of failure and indicates a potential correlation between the first attribute of the system state information corresponding to the first dependency and the first application entering the unhealthy operating status.
14. The method of claim 1, wherein the first pattern of performance is a pattern of risk and indicates a potential correlation between the first attribute of the system state information corresponding to the first dependency and a level of security risk to the first application.
15. The method of claim 1, wherein the first pattern of performance is a pattern of latency and indicates a potential correlation between the first attribute of the system state information corresponding to the first dependency and a latency associated with requests to the first application.
16. The method of claim 1, further comprising: determining, using the machine learning model and based on the status records, at least one attribute of a second dependency of the plurality of dependencies that is correlated with performance of the first application; generating, using the machine learning model, at least one recommended new monitoring interface to monitor the at least one attribute of the second dependency; and configuring the monitoring application to monitor the at least one recommended new monitoring interface.
17. A system comprising: a first application having a plurality of dependencies, wherein a first dependency of the plurality of dependencies comprises an Application Programming Interface (API) utilized by the first application; a monitoring interface application providing a plurality of monitoring interfaces, wherein a first monitoring interface of the plurality of monitoring interfaces is configured to retrieve operating status information for the first application and a second monitoring interface of the plurality of monitoring interfaces is configured to retrieve operating status information for the first dependency; a database configured to store a plurality of status records associated with the first application; and a monitoring device implementing a monitoring application and comprising one or more processors and memory storing instructions that, when executed by the one or more processors, cause the monitoring device to: configure a monitoring application to monitor the first application and the plurality of dependencies of the first application using the plurality of monitoring interfaces; collect, by one or more data collecting agents and at a first time, first system state information corresponding to the first application and each of the plurality of dependencies, wherein the first application has a healthy status at the first time; detect, by the monitoring application and based on the plurality of monitoring interfaces, that the first application has an unhealthy operating status at a second time; collect, by the one or more data collecting agents and based on detecting that the first application has the unhealthy operating status, second system state information corresponding to the first application and each of the plurality of dependencies; storing the collected first system state information and second system state information in a database as a first status record and a second status record, respectively; training a machine learning model based on the plurality of status records including the first status record and the second status record, wherein the instructions cause the monitoring device to train the machine learning model by causing the monitoring device to: cluster incident events corresponding to status records associated with the first application having an unhealthy status, wherein clustering the incident events is based on attributes of system state information, of a corresponding status record, corresponding to each of the plurality of dependencies; determine one or more patterns of performance based on the clustered incident events and the first system state information, wherein a first pattern of performance of the one or more patterns of performance indicates a potential correlation between a first attribute of the system state information corresponding to a first dependency and the first application having the unhealthy operating status; and update the machine learning model based on the determined patterns of performance; generate, using the machine learning model and based on the first pattern of performance and the status records, a health report for the first application and the plurality of dependencies, wherein the health report indicates a likelihood that the first application will enter an unhealthy status.
18. The system of claim 17, wherein the instructions further cause the monitoring device to: detect, by the monitoring application and based on the plurality of monitoring interfaces, a current operating status of the first application and the plurality of dependencies, wherein generating the health report for the first application and the plurality of dependencies is further based on the current operating status of the first application and the plurality of dependencies.
19. The system of claim 18, wherein the health report indicates a likelihood that the current operating status of the first dependency will cause the first application to enter an unhealthy state.
20. One or more non-transitory computer readable media storing instructions that, when executed by one or more processors, cause a monitoring device to perform steps comprising: configuring a monitoring application to monitor a first application and a plurality of dependencies of the first application using a plurality of monitoring interfaces, wherein: each monitoring interface of the plurality of monitoring interfaces is associated with a monitoring interface application, and the monitoring application is configured to use the plurality of monitoring interfaces through a plurality of queries based on a query protocol associated with the monitoring interface application; collecting, by one or more data collecting agents and at a first time, first system state information corresponding to the first application and each of the plurality of dependencies, wherein the first application has a healthy status at the first time; detecting, by the monitoring application and based on the plurality of monitoring interfaces, that the first application has an unhealthy operating status at a second time; collecting, by the one or more data collecting agents and based on detecting that the first application has the unhealthy operating status, second system state information corresponding to the first application and each of the plurality of dependencies; storing the collected first system state information and second system state information in a database as a first status record and a second status record, respectively; training a machine learning model based on a plurality of status records including the first status record and the second status record, wherein training the machine learning model comprises: clustering incident events corresponding to status records associated with the first application having an unhealthy status, wherein clustering the incident events is based on attributes of system state information, of a corresponding status record, corresponding to each of the plurality of dependencies; determining one or more patterns of performance based on the clustered incident events and the first system state information, wherein a first pattern of performance of the one or more patterns of performance indicates a potential correlation between a first attribute of the system state information corresponding to a first dependency and the first application having the unhealthy operating status; and updating the machine learning model based on the determined patterns of performance; detecting, by the monitoring application and based on the plurality of monitoring interfaces, a current operating status of the first application and the plurality of dependencies; and generating, using the machine learning model and based on the first pattern of performance and the current operating status, a health report for the first application and the plurality of dependencies, wherein the health report indicates a likelihood that the first application will enter an unhealthy status and comprises a visualization of each of the plurality of dependencies.
</claims>
</document>
