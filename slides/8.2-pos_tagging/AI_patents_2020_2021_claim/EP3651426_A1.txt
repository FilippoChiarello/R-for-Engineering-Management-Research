<document>

<filing_date>
2018-11-06
</filing_date>

<publication_date>
2020-05-13
</publication_date>

<priority_date>
2018-11-06
</priority_date>

<ipc_classes>
H04L29/06,H04L29/12
</ipc_classes>

<assignee>
EFFICIENT IP
</assignee>

<inventors>
GALLIANO, SYLVAIN
BISIAUX, JEAN-YVES
</inventors>

<docdb_family_id>
64556645
</docdb_family_id>

<title>
METHOD AND SYSTEM FOR DETECTING AND BLOCKING DATA TRANSFER USING DNS PROTOCOL
</title>

<abstract>
Method(s) and a domain name server (DNS) (104) for detecting and blocking DNS query raised by a computing device (102) are described. In an example implementation, the DNS (104) may implement a method that includes monitoring DNS queries received from a computing device (102) at the DNS (104). The DNS identifies if a fully qualified domain name (FQDN) associated with the DNS query is not present in a cache (208) of the DNS (104) and DNS responses received by the computing device (102) in response to the DNS queries whose FQDN is not present in the cache (208). An exfiltration, an infiltration or a tunneling event is detected based on a summation of size of the DNS queries, DNS responses or both. Accordingly, further DNS queries from the computing device (102) may be blocked.
</abstract>

<claims>
1. A method comprising: monitoring, by a domain name server (DNS) (104), DNS queries raised by a DNS client (102) communicatively coupled to the DNS (104); identifying, by the DNS (104), from amongst the DNS queries, at least one DNS query whose fully qualified domain name (FQDN) is not present in a cache (208) of the DNS (104); detecting, for the DNS client (102), an exfiltration event based on a size of the at least one DNS query whose FQDN is not present in the cache (208) of the DNS (104); and blocking, based on the detection of the exfiltration event, a further DNS query from the DNS client (102).
2. The method as claimed in claim 1, further comprising: inspecting, by the DNS (104), a FQDN associated with the further DNS query from the DNS client (102); and allowing the further DNS query if the FQDN is present in the cache (208) of the DNS (104).
3. The method as claimed in claim 1, further comprising: providing, by the DNS (104), an alert to a third-party computing device, wherein the third-party computing device is accessible by an administrator of the DNS (104) or the DNS client (102).
4. The method as claimed in claim 1, wherein the at least one DNS query include same Top Level Domain (TLD) and different Second Level Domain (SLD).
5. The method as claimed in claim 1, further comprising: monitoring, by the DNS (104), DNS responses received by the DNS client (102), wherein the DNS responses are received in response to the at least DNS query whose FQDN is not present in the cache (208) of the DNS (104); detecting, an infiltration event based on a size of the DNS responses; and blocking, based on the detection of the infiltration event, the further DNS query from the DNS client (102).
6. A domain name server (DNS) (104) for executing DNS queries initiating from a DNS client (102), the DNS (104) comprising: a processor (202) a memory (206) coupled to the processor (202), wherein the memory (206) comprises a cache (208); a machine learning module (224) coupled to the processor (202), wherein the machine learning module (224) is to identify, from amongst DNS queries raised by the DNS client (102), at least one DNS query whose fully qualified domain name (FQDN) is not present in the cache (208) of the DNS (104); a recursor module (212), coupled to the processor (202), to search an external DNS server for a response to the at least one DNS query whose fully qualified domain name (FQDN) is not present in the cache (208) of the DNS (104); a trigger module (214), coupled to the processor (202), wherein the trigger module (214) is to detect an exfiltration event based on a size of the at least one DNS query whose FQDN is not present in the cache (208) of the DNS (104); a blocking module (220) coupled to the processor (202), wherein the blocking module (220) is to block, based on the detection of the exfiltration event, a further DNS query from the DNS client toward the recursor module (212).
7. The DNS (104) as claimed in claim 6, wherein the trigger module (214) is further to detect an infiltration event based on a size of the DNS responses, and wherein
the blocking module (220) is to block, based on the detection of the infiltration event, the further DNS query from the DNS client (102) to the recursor module (212).
8. The DNS (104) as claimed in claim 6, wherein the trigger module (214) is further to detect a tunneling event based on the size of the least one DNS queries as well as a size of DNS responses, the DNS responses being received in response to the at least DNS query whose FQDN is not present in the cache (208) of the DNS (104), wherein
the blocking module (220) is to block, based on the detection of the tunneling event, the further DNS query from the DNS client (102) toward the recursor module (212).
9. The DNS (104) as claimed in claim 6 further comprising an event module (216) coupled to the processor (202), wherein the event module (216) is further to alert a third-party computing device, wherein the third-party DNS client is accessible by an administrator of the DNS (104) or the DNS client (102).
10. The DNS as claimed in claim 6 further comprising a switcher module (218), coupled to the processor (202), wherein the switcher module (218) is to deny access of a backend server to the DNS client (102), wherein the DNS client (102), is to access the backend server to extract a DNS response to the at least one DNS query whose FQDN is not present in the cache (208) of the DNS (104).
11. The DNS (104) as claimed in claim 6, wherein the blocking module (214) is to allow the further DNS query if the FQDN is present in the cache (208) of the DNS (104).
12. A non-transitory computer-readable medium comprising instructions executable by a processing resource to: monitor DNS queries generated by a DNS client (102) communicatively coupled to a DNS (104), wherein the DNS queries are associated with a fully qualified domain name (FQDN) not present in a cache (208) of the DNS; and identify, DNS responses received by the computing device, wherein the DNS responses are received in response to the DNS queries whose FQDN is not present in the cache (208) of the DNS; determine, at least one of a size of the DNS queries and the size of the DNS responses; and block, based on the determining, a further DNS query from the DNS client (102).
13. The non-transitory computer-readable medium as claimed in claim 12, further comprising instructions executable by a processing resource to: inspect a FQDN associated with the further DNS query from the DNS client (102); and allow the further DNS query if the FQDN is present in the cache (208) of the DNS (204).
14. The non-transitory computer-readable medium as claimed in claim 12, further comprising instructions executable by a processing resource to: provide, based on the determining, an alert to a third-party DNS client (102), wherein the third-party DNS client is accessible by an administrator of the DNS (104) or the DNS client (102).
15. The non-transitory computer-readable medium as claimed in claim 12, further comprising instructions executable by a processing resource to identify a Top Level Domain (TLD) and a Second Level Domain (SLD) associated with each of the DNS queries.
</claims>
</document>
