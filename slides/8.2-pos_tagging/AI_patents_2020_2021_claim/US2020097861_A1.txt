<document>

<filing_date>
2018-09-25
</filing_date>

<publication_date>
2020-03-26
</publication_date>

<priority_date>
2018-09-25
</priority_date>

<ipc_classes>
G06N99/00
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
HASSANZADEH, OKTIE
DASH, SARTHAK
GLIOZZO, ALFIO MASSIMILIANO
MIHINDUKULASOORIYA, NANDANA SAMPATH
</inventors>

<docdb_family_id>
69883251
</docdb_family_id>

<title>
NOISE DETECTION IN KNOWLEDGE GRAPHS
</title>

<abstract>
Techniques regarding autonomous classification and/or identification of various types of noise comprised within a knowledge graph are provided. For example, one or more embodiments described herein can comprise a system, which can comprise a memory that can store computer executable components. The system can also comprise a processor, operably coupled to the memory, and that can execute the computer executable components stored in the memory. The computer executable components can comprise a knowledge extraction component, operatively coupled to the processor, that can classify a type of noise comprised within a knowledge graph. The type of noise can be generated by an information extraction process.
</abstract>

<claims>
1. A system, comprising: a memory that stores computer executable components; and a processor that executes the computer executable components stored in the memory, wherein the computer executable components comprise: a knowledge extraction component, operatively coupled to the processor, that classifies a type of noise comprised within a knowledge graph, wherein the type of noise is generated by an information extraction process.
2. The system of claim 1, wherein the knowledge extraction component classifies the type of noise as a noise selected from a group consisting of inconsistent noise, generic noise, and factually false noise.
3. The system of claim 1, wherein the computer executable components further comprise: an inconsistent component, operatively coupled to the processor, that identifies a knowledge base triple comprised within the knowledge graph as inconsistent noise by ontology mapping the knowledge graph to a second knowledge graph and analyzing an axiom of the ontology mapping.
4. The system of claim 3, wherein the axiom defines a formal conceptualization selected from a group consisting of a domain type of the knowledge graph and a range type of the knowledge graph.
5. The system of claim 4, wherein the inconsistent component analyzes a plurality of axioms of the ontology mapping, wherein the axiom is from the plurality of axioms, and wherein a second axiom from the plurality of axioms defines a common pattern.
6. The system of claim 1, wherein the computer executable components further comprise: a generic component, operatively coupled to the processor, that identifies a knowledge base triple comprised within the knowledge graph as generic noise based on a presence of a common noun comprising the knowledge base triple.
7. The system of claim 6, wherein the generic component determines whether the knowledge base triple comprises the common noun using a natural language processing tool to perform part-of-speech tagging.
8. The system of claim 1, wherein the computer executable components further comprise: a factual component, operatively coupled to the processor, that identifies a knowledge base triple comprised within the knowledge graph as factually false noise based on a search for evidence in a second knowledge graph that confirms a correctness of the knowledge base triple.
9. The system of claim 8, wherein the factual component uses a disambiguation technique and a relation mapping technique to perform the search.
10. A computer-implemented method, comprising: classifying, by a system operatively coupled to a processor, a type of noise comprised within a knowledge graph, wherein the type of noise is generated by an information extraction process.
11. The computer-implemented method of claim 10, wherein the classifying comprises classifying the type of noise as noise selected from a group consisting of inconsistent noise, generic noise, and factually false noise.
12. The computer-implemented method of claim 11, further comprising: identifying, by the system, a first knowledge base triple comprised within the knowledge graph as the inconsistent noise by ontology mapping the knowledge graph to a second knowledge graph and analyzing an axiom of the ontology mapping.
13. The computer-implemented method of claim 12, further comprising: identifying, by the system, a second knowledge base triple comprised within the knowledge graph as the generic noise based on a presence of a common noun comprising the second knowledge base triple.
14. The computer-implemented method of claim 12, further comprising: identifying, by the system, a third knowledge base triple comprised within the knowledge graph as the factually false noise based on a search for evidence in an external knowledge graph that confirms a correctness of the third knowledge base triple.
15. A computer program product that autonomously classifies noise in a knowledge graph, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to: classify, by a system operatively coupled to the processor, a type of noise comprised within the knowledge graph, wherein the type of noise is generated by an information extraction process.
16. The computer program product of claim 15, wherein the program instructions cause the processor to classify the type of noise as noise selected from a group consisting of inconsistent noise, generic noise, and factually false noise.
17. The computer program product of claim 16, wherein the program instructions further cause the processor to: identify, by the system, a first knowledge base triple comprised within the knowledge graph as the inconsistent noise by ontology mapping the knowledge graph to a second knowledge graph and analyzing an axiom of the ontology mapping.
18. The computer program product of claim 17, wherein the ontology mapping is performed in a cloud computing environment.
19. The computer program product of claim 17, wherein the program instructions further cause the processor to: identify, by the system, a second knowledge base triple comprised within the knowledge graph as the generic noise based on a presence of a common noun comprising the second knowledge base triple.
20. The computer program product of claim 19, wherein the program instructions further cause the processor to: identify, by the system, a third knowledge base triple comprised within the knowledge graph as the factually false noise based on a search for evidence in an external knowledge graph that confirms a correctness of the knowledge base triple.
</claims>
</document>
