<document>

<filing_date>
2019-07-25
</filing_date>

<publication_date>
2021-01-28
</publication_date>

<priority_date>
2019-07-25
</priority_date>

<ipc_classes>
G06K9/62,G06Q30/02
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
Pfitzmann, Birgit Monika
Maddipatla, Anil
NANAVATI, AMIT
</inventors>

<docdb_family_id>
74190617
</docdb_family_id>

<title>
GENERATING DECISION TREES FROM DIRECTED ACYCLIC GRAPH (DAG) KNOWLEDGE BASES
</title>

<abstract>
A computer-implemented method of automatically identifying a product offering for a customer using a generated decision tree from a directed acyclic graph knowledge base is described. The method includes, by a processor, identifying a set of product offerings, where each product offering is described by a file. The method converts each file into a Directed Acyclic Graph (DAG) and clusters the DAGs. For each cluster, the processor creates a decision tree to distinguish between the product offerings.
</abstract>

<claims>
1. A computer-implemented method comprising, by a processor: identifying a set of product offerings, where each product offering is described by a file; converting each file into a Directed Acyclic Graph (DAG); grouping the DAGs into clusters; and for each cluster, creating a decision tree to distinguish between the product offerings.
2. The computer-implemented method of claim 1, further comprising forming a composite product offering for a cluster, wherein the composite product offering comprises all attributes for each product offering represented in the cluster.
3. The computer-implemented method of claim 2, wherein any attribute in the composite product offering not possessed by a given DAG is assigned a null value.
4. The computer-implemented method of claim 2, wherein each attribute is assigned a weight.
5. The computer-implemented method of claim 4, wherein each weight is assigned by a user.
6. The computer-implemented method of claim 4, wherein each weight is assigned using a Term Frequency-Inverse Document Frequency (TF-IDF) operation.
7. The computer-implemented method of claim 1, wherein the DAGs are clustered based on having a difference under a threshold amount.
8. The computer-implemented method of claim 7, further comprising calculating a separation between two DAGs as a sum of all attribute differences between the two DAGs.
9. The computer-implemented method of claim 1, further comprising receiving a new product offering and, in response, updating each cluster and each decision tree.
10. A computer program product for identifying a product offering for a user, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to: identify a set of Directed Acyclic Graphs (DAGs), wherein each DAG represents a product offering; group the set of DAGs into clusters based on attribute similarities between the DAGs; for at least one cluster, create a decision tree to select a particular DAG, wherein the decision tree selects first based on a weight of attributes and second based on a level in a hierarchy; and identify a closest product offering for a user based on the user traversing the decision tree.
11. The computer program product of claim 10, wherein grouping the set of DAGs into clusters based on attribute similarities between the DAGS comprises calculating attribute similarities based on weights.
12. The computer program product of claim 10, wherein at least one split in the decision tree is based on the weight of attributes and at least one split in the decision tree is based on the level in the hierarchy.
13. A system for identifying a product offering for a user, the system comprising: a processor; and a data storage device functionally connected to the processor, wherein the processor: identifies a set of product offerings; converts each product offering into a Directed Acyclic Graph (DAG); clusters multiple DAGs into clusters; for at least one cluster, creates a decision tree, wherein steps of the decision tree are determined based on a weight of attributes and then by a level in a hierarchy; receives user input to traverse the decision tree; and provides a product offering to the user based on an output of the decision tree.
14. The system of claim 13, wherein the product offerings of the set of product offerings are Global Trade Services (GTS) Solution Modules (GSMs).
15. The system of claim 13, wherein the decision tree for the at least one cluster has fewer levels than a decision tree for all the set of product offerings.
16. The system of claim 13, wherein the decision tree comprises at least one tiebreaker based on the weight and at least one tiebreaker based on the level in the hierarchy.
17. The system of claim 13, wherein the processor modifies the clustering to control a mean size of the clusters.
18. The system of claim 13, wherein clustering the multiple DAGs into clusters comprises: identifying a weight for each attribute of any DAG; assigning a null value to any attribute of a DAG without a value; calculating distances between DAGs based on a sum over all attributes of differences of weights, wherein a cluster comprises a set of DAGs where all separations of DAGs within the set of DAGs are less than a threshold; and dynamically adjusting the threshold to produce a distribution of clusters, wherein each cluster in the distribution of clusters contains no more than a fixed number of DAGs.
19. The system of claim 18, wherein the weight for each attribute is obtained from a file.
20. The system of claim 18, wherein the weight for each attribute is obtained using a Term Frequency-Inverse Document Frequency (TF-IDF) algorithm.
</claims>
</document>
