<document>

<filing_date>
2018-12-10
</filing_date>

<publication_date>
2020-06-11
</publication_date>

<priority_date>
2018-12-10
</priority_date>

<ipc_classes>
G06F11/14,G06F9/30
</ipc_classes>

<assignee>
ZOOX
</assignee>

<inventors>
HAGGBLADE, MICHAEL
LI, HAO
MORALES MORALES, ANDRES GUILLERMO
DREYFUSS, ETHAN PETRICK
</inventors>

<docdb_family_id>
70971909
</docdb_family_id>

<title>
DATA PROCESSING PIPELINE FAILURE RECOVERY
</title>

<abstract>
Techniques are disclosed for re-executing a data processing pipeline following a failure of at least one of its components. The techniques may include a syntax for defining a compute graph associated with the data processing pipeline and receiving such a compute graph in association with a specific data processing pipeline. The technique may include executing the data processing pipeline, determining that a component of the data processing pipeline failed, and determining a portion of the data processing pipeline to execute/re-execute based at least in part on dependencies defined by the data processing pipeline in association with the failed component. Re-executing the one or more components may comprise retrieving an output saved in association with a component upon which the failed component depends.
</abstract>

<claims>
1. A method comprising: receiving a compute graph associated with a data processing pipeline, the compute graph identifying one or more computer-executable components of the data processing pipeline and dependencies therebetween; causing the data processing pipeline to execute; storing, based at least in part on receiving a first exit code received responsive to causing the data processing pipeline to execute, a first indication that a first component of the data processing pipeline executed successfully; storing a first output received from the first component responsive to execution of the first component; storing, based at least in part on receiving a second exit code responsive to causing the data processing pipeline to execute, a second indication that a second component of the data processing pipeline failed to execute successfully; determining to re-execute a portion of the data processing pipeline based at least in part on the second indication, the portion comprising at least one of the second component or one or more additional components downstream of the second component; and causing the portion to re-execute according to the compute graph.
2. The method of claim 1, wherein causing the portion to re-execute according to the compute graph comprises: causing the second component to re-execute; and at least one of providing the first output as input to the second component or sequencing execution of the second component relative to another component, wherein the compute graph indicates that the second component is dependent upon the first component.
3. The method of claim 1, wherein causing the portion to re-execute comprises: causing the second component to re-execute one or more times until the second component successfully completes or based at least in part on determining that a number of re-executions meets a number of retries specified by the compute graph in association with the second component.
4. The method of claim 3, wherein causing the portion to re-execute further comprises: causing the one or more additional components to at least one of execute or re-execute based at least in part on the second component successfully executing or re-executions meeting the number of retries.
5. The method of claim 3, wherein, based at least in part on determining that the number of re-executions meets the number of retries, at least one of: transmitting a default output to one or more components downstream from the second component, or preventing the one or more components downstream from the second component from executing.
6. The method of claim 1, wherein the compute graph further identifies at least one of: a computer-executable instruction associated with the second component, one or more constraints associated with executing the second component, a minimum set of inputs required to execute the second component, a first instruction associated with failure of the second component, a second instruction associated with a fatal failure of the second component, or a number of re-execution attempts associated with generating a fatal failure indication.
7. A system comprising: one or more processors; and memory storing processor-executable instructions that, when executed by the one or more processors, cause the system to perform operations comprising: receiving a compute graph associated with a data processing pipeline, the compute graph identifying one or more components of the data processing pipeline and dependencies therebetween; causing the one or more components to execute; storing, based at least in part on receiving a first exit code in association with execution of a first component, a first indication that execution of the first component of the one or more components executed successfully; storing, based at least in part on the execution of the first component, an output from the first component; storing, based at least in part on receiving a second exit code in association with execution of a second component, a second indication that the second component of the one or more components failed to execute successfully; retrieving, as a retrieved output, the output; and causing the second component to re-execute, as a re-execution, based at least in part on the retrieved output.
8. The system of claim 7, wherein the operations further comprise: storing, based at least in part on receiving a third exit code in association with the re-execution of the second component, a third indication that the second component executed successfully; storing, based at least in part on the re-execution of the second component, a second output from the second component; and causing one or more components downstream from the second component to execute or re-execute based at least in part on the second output.
9. The system of claim 7, wherein the compute graph further identifies at least one of: a set of computer readable instructions associated with the second component, one or more constraints associated with executing the second component, a minimum set of inputs required to execute the second component, a first instruction associated with failure of the second component, a second instruction associated with a fatal failure of the second component, or a number of re-execution attempts associated with generating a fatal error indication.
10. The system of claim 9, wherein the second instruction causes the re-execution of the second component to at least one of: cause one or more components downstream from the second component to execute or re-execute based at least in part on a default output associated with the second component, alter a computational environment of the re-execution compared to a prior execution of the second component.
11. The system of claim 9, wherein the first instruction or the second instruction alters a computational environment associated with re-execution of the second component compared to a prior execution of the second component, wherein altering the computational environment comprises altering at least one of: a type of hardware associated with re-execution of the second component; an operating system associated with re-execution of the second component; a network associated with re-execution of the second component; a memory associated with re-execution of the second component; a hypervisor associated with re-execution of the second component; a machine that re-executes the second component; a cluster that comprises the machine re-executing the second component; a physical threshold associated with re-execution of the second component; a minimum security requirement associated with re-execution of the second component; a licensing requirement associated with re-execution of the second component; or a budgetary constraint associated with re-execution of the second component.
12. The system of claim 9, wherein the operations further comprise: causing the second component to re-execute until the second component successfully executes or determining that a number of re-executions meets a number of retries specified by the compute graph in association with the second component.
13. A non-transitory computer-readable medium comprising processor-executable instructions that, when executed by one or more processors, cause the processors perform operations comprising: receiving a compute graph associated with a job, the compute graph identifying two or more components of the job and dependencies therebetween; causing the one or more components to execute; storing, based at least in part on receiving a first exit code in association with execution of a first component, a first indication that the execution of the first component of the one or more components executed successfully; storing, based at least in part on the execution of the first component, an output from the first component; storing, based at least in part on receiving a second exit code in association with execution of a second component, a second indication that the second component of the one or more components failed to execute successfully; and causing the second component to re-execute, based at least in part on the second indication.
14. The non-transitory computer-readable medium of claim 13, wherein the operations further comprise: determining that the compute graph indicates a dependency of the second component on the first component; wherein causing the second component to re-execute further comprises providing the output to the second component.
15. The non-transitory computer-readable medium of claim 13, wherein the operations further comprise: storing, based at least in part on receiving a third exit code in association with the re-execution of the second component, a third indication that the second component executed successfully; storing, based at least in part on the re-execution of the second component, a second output from the second component; and causing one or more components downstream from the second component to execute or re-execute based at least in part on the second output.
16. The non-transitory computer-readable medium of claim 13, wherein the compute graph further identifies at least one of: a computer-executable instruction associated with the second component, one or more constraints associated with executing the second component, a minimum set of inputs required to execute the second component, a first instruction associated with failure of the second component, a second instruction associated with a fatal failure of the second component, or a number of re-execution attempts associated with generating a fatal error indication.
17. The non-transitory computer-readable medium of claim 16, wherein the one or more constraints comprises at least one of: a preferred or required type of hardware; an operating system; a network requirement; a memory requirement; a virtual machine requirement; a machine topology; a cluster topology; a physical threshold; a security requirement; a licensing requirement; or a budgetary constraint.
18. The non-transitory computer-readable medium of claim 16, wherein the second instruction causes the re-execution of the second component to at least one of: output a default output stored in a portion of memory associated with the second component, or alter a computational environment of the re-execution compared to a prior execution of the second component.
19. The non-transitory computer-readable medium of claim 13, wherein the operations further comprise: causing the second component to re-execute until the second component successfully executes or determining that a number of re-executions meets a number of retries specified by the compute graph in association with the second component.
20. The non-transitory computer-readable medium of claim 18, wherein the operations further comprise: causing one or more components downstream from the second component to at least one of: execute or re-execute based at least in part on the second component successfully executing or re-executions meeting the number of retries, or prevent the one or more components downstream from the second component from executing.
21. The non-transitory computer-readable medium of claim 13, wherein the operations further comprise: receiving, after the one or more components executed, an indication that an additional component replaced, as a replacement, the second component or was added; updating the compute graph to reflect the replacement; determining, based at least in part on the compute graph, whether a downstream component depends on the replacement for input and whether the replacement depends on an upstream component for input; and at least one of causing the additional component to execute based at least in part on retrieving a first input associated with a previous successful execution of the upstream component, or re-executing the downstream component based at least in part on a second output associated with a successful execution of the replacement.
</claims>
</document>
