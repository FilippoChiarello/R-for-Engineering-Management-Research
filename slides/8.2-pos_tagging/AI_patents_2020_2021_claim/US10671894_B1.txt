<document>

<filing_date>
2020-03-06
</filing_date>

<publication_date>
2020-06-02
</publication_date>

<priority_date>
2018-06-28
</priority_date>

<ipc_classes>
G06K9/00,G06K9/62,G06N20/00
</ipc_classes>

<assignee>
SCHNEIDER ELECTRIC SYSTEMS USA
</assignee>

<inventors>
BHATTACHARYYA, AMITABHA
JAGANNATH, VENKATESH
KONDEJKAR, SAMEER
PATIL, ASHISH
SINHA, BHASKAR
</inventors>

<docdb_family_id>
68987546
</docdb_family_id>

<title>
Machine learning analysis of piping and instrumentation diagrams
</title>

<abstract>
Automated evaluation and extraction of information from piping and instrumentation diagrams (P&IDs). Aspects of the systems and methods utilize machine learning and image processing techniques to extract relevant information, such as tag names, tag numbers, and symbols, and their positions, from P&IDs. Further aspects feed errors back to a machine learning system to update its learning and improve operation of the systems and methods.
</abstract>

<claims>
1. A system, comprising: a piping and instrumentation diagram (P&ID) analysis processor; and a computer-readable storage device storing processor-executable instructions, wherein the processor-executable instructions, when executed by the processor, comprise: an image converter configured to receive a P&ID in an electronic format and convert the P&ID into a compute image; one or more filtering algorithms configured to process the compute image to obtain an approximate size of a symbol therein; a symbol extractor configured to extract the symbol from the compute image and store the extracted symbol on the computer-readable storage device; one or more tag pre-processing algorithms configured to remove symbol lines from the symbol in the compute image; a tag extractor configured to extract a tag component of the symbol in the compute image and store the extracted tag on the computer-readable storage device; and an intelligent system configured to: receive symbol feedback from the one or more filtering algorithms, receive tag feedback from the one or more tag pre-processing algorithms, retrain the symbol extractor based on the received symbol feedback, and retrain the tag extractor based on the received tag feedback.
2. The system of claim 1, wherein the one or more filtering algorithms comprise at least one of a window sliding algorithm, a symbol identification algorithm, and a circle detection algorithm configured to determine a scale of the image of the P&ID.
3. The system of claim 1, wherein the one or more tag pre-processing algorithms comprise at least one of an algorithm for removing symbol lines from the symbol, an algorithm for segmenting characters of the tag, and an algorithm for executing a sliding window segmentation on the tag.
4. The system of claim 1, wherein the symbol extractor comprises a first convolutional neural network, and wherein the tag extractor comprises a second convolutional neural network.
5. The system of claim 1, wherein the tag extractor comprises a character recognition network, and wherein the character recognition network comprises one or more of a decider convolutional neural network, a single character convolutional neural network, and an auxiliary word convolutional neural network.
6. The system of claim 1, wherein the intelligent system is further configured to receive symbol feedback and tag feedback from a user and further retrain the symbol extractor and the tag extractor based on the feedback received from the user.
7. The system of claim 1, wherein the processor-executable instructions, when executed by the processor, execute a machine learning system configured to access the compute image of the P&ID.
8. The system of claim 7, wherein the machine learning system includes the symbol extractor and wherein the processor-executable instructions, when executed by the processor, configure the machine learning system to execute the symbol extractor for determining whether the accessed image includes a symbol indicative of a process control element, the symbol extractor being trained, using supervised learning, to classify images into a plurality of classes based on whether the accessed image includes the symbol indicative of the process control element and a relative position of the symbol in the P&ID.
9. The system of claim 8, wherein the machine learning system includes the tag extractor and wherein the processor-executable instructions, when executed by the processor, configure the machine learning system to execute the tag extractor for determining whether the accessed image includes a tag corresponding to the symbol, the tag extractor being trained, using supervised learning, to classify images into a plurality of classes based on whether the accessed image includes the tag corresponding to the symbol.
10. A method, comprising: receiving a digitized piping and instrumentation diagram (P&ID); analyzing, using a symbol engine, the digitized P&ID to identify and extract a symbol from the digitized P&ID, wherein said analyzing results in at least one symbol error; analyzing, using a tag engine, the digitized P&ID to identify and extract a tag from the digitized P&ID, wherein said analyzing results in at least one tag error; storing the extracted symbol and tag on a computer-readable storage medium; retraining the symbol engine based on the at least one symbol error; and retraining the tag engine based on the at least one tag error.
11. The method of claim 10, wherein said analyzing the digitized P&ID using the symbol engine comprises executing one or more of a window sliding algorithm, a symbol identification technique, and a circle detection algorithm configured to determine a scale of the digitized P&ID.
12. The method of claim 10, wherein said analyzing the digitized P&ID using the tag engine includes at least one of removing symbol lines from the symbol, segmenting characters of the tag, and executing a sliding window segmentation algorithm on the tag.
13. The method of claim 10, wherein the symbol engine comprises a first convolutional neural network and an adapted you-only-look-once (YOLO) algorithm configured to determine a scale of the digitized P&ID, and wherein the tag engine comprises a second convolutional neural network.
14. The method of claim 10, wherein the tag engine comprises a character recognition network, and wherein the character recognition network comprises one or more of a decider convolutional neural network, a single character convolutional neural network, and an auxiliary word convolutional neural network.
15. The method of claim 10, further comprising: receiving symbol feedback from a user; and retraining the symbol engine based on the at least one symbol error and the symbol feedback.
16. The method of claim 10, further comprising: receiving tag feedback from a user; and retraining the tag engine based on the at least one tag error and the tag feedback.
17. The method of claim 10, wherein receiving the digitized PI&D diagram comprises accessing, by a machine learning system executing on a computing device, an image of the PI&D diagram.
18. The method of claim 17, wherein the machine learning system includes the symbol engine and wherein analyzing the digitized P&ID to identify and extract the symbol comprises determining, using the symbol engine of the machine learning system, whether the accessed image includes a symbol indicative of a process control element, the symbol engine being trained, using supervised learning, to classify images into a plurality of classes based on whether the accessed image includes the symbol indicative of the process control element and a relative position of the symbol in the P&ID.
19. The method of claim 18, wherein the machine learning system includes the tag engine and wherein analyzing the digitized P&ID to identify and extract the tag comprises determining, using the tag engine of the machine learning system, whether the accessed image includes a tag corresponding to the symbol, the tag engine being trained, using supervised learning, to classify images into a plurality of classes based on whether the accessed image includes the tag corresponding to the symbol.
</claims>
</document>
