<document>

<filing_date>
2018-11-09
</filing_date>

<publication_date>
2020-08-04
</publication_date>

<priority_date>
2018-11-09
</priority_date>

<ipc_classes>
G06T1/20,G06T1/60
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
GRAJEWSKI, SLAWOMIR
SURPRISE, JASON
WATERS, ZACK
APODACA, MIKE
</inventors>

<docdb_family_id>
70550716
</docdb_family_id>

<title>
Interface apparatus and method resilient to graphics hardware changes
</title>

<abstract>
Apparatus and method for resilient interface for updating a graphics processor. For example, one embodiment of an apparatus comprises a graphics processor; and a configuration memory of the graphics processor to be subdivided into a plurality of configuration regions associated with a corresponding plurality of graphics pipeline stages and/or functional units, wherein a host processor executing a graphics driver is to submit a graphics processor configuration update to a command buffer, the graphics processor configuration update including at least one logical memory address associated with a logical view of the configuration memory and configuration data to be used to modify at least one configuration region associated with the at least one logical memory address, and wherein the logical memory address is to be used to identify a corresponding physical memory address for at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units, the at least one configuration region to be responsively updated.
</abstract>

<claims>
1. An apparatus comprising: a graphics processor; a configuration memory of the graphics processor to be subdivided into a plurality of configuration regions associated with a corresponding plurality of graphics pipeline stages and/or functional units; and a logical-to-physical mapping data structure of the graphics processor to store a mapping of logical memory addresses to physical memory addresses of the configuration memory; wherein a host processor executing a graphics driver is to submit a graphics processor configuration update to a command buffer, the graphics processor configuration update including at least one logical memory address associated with a logical view of the configuration memory and configuration data to be used to modify at least one configuration region associated with the at least one logical memory address, and wherein the logical memory address in the graphics processor configuration update is to be used to identify, in the logical-to-physical mapping data structure, a corresponding physical memory address for at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units, the at least one configuration region to be responsively updated.
2. The apparatus of claim 1 wherein the graphics driver is to use the logical memory address to identify the corresponding physical memory address for the at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units.
3. The apparatus of claim 1 wherein a mask is to be stored to control updates to the at least one configuration region, the mask having bits associated with each portion of the graphics processor configuration, wherein the updating of the at least one configuration region is to be performed or not performed based on a corresponding value in the mask.
4. The apparatus of claim 3 wherein a master bitmask is to be used with the mask to determine whether to perform or not perform an update, the master bitmask to indicate unused hardware stages of the graphics processor.
5. The apparatus of claim 1 wherein the configuration memory comprises a memory integral to or coupled to the graphics processor.
6. The apparatus of claim 1 wherein the at least one logical memory address associated with the logical view of the configuration memory comprises an offset value to the at least one configuration region or an indirect update value pointing to a region of system memory which stores the offset value.
7. The apparatus of claim 1 wherein the host processor comprises a central processing unit (CPU).
8. A method comprising: submitting a graphics processor configuration update to a command buffer, the graphics processor configuration update including at least one logical memory address associated with a logical view of a configuration memory of the graphics processor and configuration data to be used to modify at least one configuration region of the configuration memory associated with the at least one logical memory address; performing a lookup using the logical memory address in the graphics processor configuration update to identify a corresponding physical memory address for at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units, wherein performing a lookup comprises reading a logical-to-physical mapping data structure of the graphics processor storing a mapping of logical memory addresses to physical memory addresses of the configuration memory; and responsively updating the at least one configuration region.
9. The method of claim 8 further comprising: using the logical memory address to identify a corresponding physical memory address for the at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units.
10. The method of claim 8 wherein the updating of the at least one configuration region is to be performed or not performed based on a corresponding value in the mask having bits associated with each portion of the graphics processor configuration.
11. The method of claim 10 wherein a master bitmask is to be used with the mask to determine whether to perform or not perform an update, the master bitmask to indicate unused hardware stages of the graphics processor.
12. The method of claim 8 wherein the configuration memory comprises a memory integral to or coupled to the graphics processor.
13. The method of claim 8 wherein the at least one logical memory address associated with the logical view of the configuration memory comprises an offset value to the at least one configuration region or an indirect update value pointing to a region of system memory which stores the offset value.
14. The method of claim 8 wherein the operation of submitting is performed by a host processor executing a graphics driver.
15. A non-transitory machine-readable medium having program code stored thereon which, when executed by a machine, causes the machine to perform the operations of: submitting a graphics processor configuration update to a command buffer, the graphics processor configuration update including at least one logical memory address associated with a logical view of a configuration memory and configuration data to be used to modify at least one configuration region of the configuration memory associated with the at least one logical memory address; performing a lookup using the logical memory address in the graphics processor configuration update to identify a corresponding physical memory address for at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units, wherein performing a lookup comprises reading a logical-to-physical mapping data structure of the graphics processor storing a mapping of logical memory addresses to physical memory addresses of the configuration memory; and responsively updating the at least one configuration region.
16. The non-transitory machine-readable medium of claim 15 further comprising program code to cause the machine to perform the operations of: using the logical memory address to identify a corresponding physical memory address for the at least one configuration region corresponding to at least one of the graphics pipeline stages and/or functional units.
17. The non-transitory machine-readable medium of claim 15 wherein the updating of the at least one configuration region is to be performed or not performed based on a corresponding value in the mask having bits associated with each portion of the graphics processor configuration.
18. The non-transitory machine-readable medium of claim 17 wherein a master bitmask is to be used with the mask to determine whether to perform or not perform an update, the master bitmask to indicate unused hardware stages of the graphics processor.
19. The non-transitory machine-readable medium of claim 15 wherein the configuration memory comprises a memory integral to or coupled to the graphics processor.
20. The non-transitory machine-readable medium of claim 15 wherein the at least one logical memory address associated with the logical view of the configuration memory comprises an offset value to the at least one configuration region or an indirect update value pointing to a region of system memory which stores the offset value.
21. The non-transitory machine-readable medium of claim 15 wherein the operation of submitting is performed by a host processor executing a graphics driver.
</claims>
</document>
