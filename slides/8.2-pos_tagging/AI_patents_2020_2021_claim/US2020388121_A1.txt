<document>

<filing_date>
2019-06-10
</filing_date>

<publication_date>
2020-12-10
</publication_date>

<priority_date>
2019-06-10
</priority_date>

<ipc_classes>
G06F9/54,G08B13/14
</ipc_classes>

<assignee>
PURDUE RESEARCH FOUNDATION
</assignee>

<inventors>
KAK, AVINASH
Sarkar, Rohan
</inventors>

<docdb_family_id>
73651650
</docdb_family_id>

<title>
SCALABLE EVENT-DRIVEN SOFTWARE ARCHITECTURE FOR THE AUTOMATION OF PEOPLE-CENTRIC SYSTEMS
</title>

<abstract>
A method, processing system, and tracking system for monitoring person-object interactions in an environment is disclosed. In particular, software architecture is provided for processing tracking and event information provided by independent trackers to identify basic interactions between the people in the environment and objects or storage entities in the environment. Based on the identified person-object interactions, the software architecture can associate individual persons with object and storage entities, detect and infer outcomes of their basic interactions, infer higher-level interactions, and detect any anomalous interactions. The software architecture is advantageously highly modular, scalable, and decentralized, and is designed to be substantially domain agnostic, such that it can be used to automate a wide variety of human-centric applications that involve humans interacting with objects.
</abstract>

<claims>
1. A method for tracking person-object interactions in an environment, the method comprising: receiving, with at least one processor, (i) event data with respect to a plurality of person entities and a plurality of storage entities in the environment and (ii) storage content data with respect to the storage entities, the event data identifying times at which particular person entities in the plurality of person entities moved an extremity into particular storage entities in the plurality of storage entities, the event data identifying times at which particular person entities in the plurality of person entities removed an extremity from particular storage entities in the plurality of storage entities, the storage content data including a plurality of lists identifying object entities in a plurality of object entities that are located within particular storage entities in the plurality of storage entities at different times; and determining, with the at least one processor, based on the event data and the storage content data, at least one of (i) at least one first object entity that was added to a first storage entity in the plurality of storage entities and (ii) at least one second object entity that was removed from the first storage entity, as a result of an interaction in which a first person entity in the plurality of person entities moved an extremity into the first storage entity and subsequently removed an extremity from the first storage entity.
2. The method according to claim 1 further comprising: assigning, with the at least one processor, to each person entity in the plurality of person entities, an individual process or thread that is executed on the at least one processor; assigning, with the at least one processor, to each storage entity in the plurality of storage entities, an individual process or thread that is executed on the at least one processor; and assigning, with the at least one processor, to each object entity in the plurality of object entities, an individual process or thread that is executed on the at least one processor.
3. The method according to claim 1 further comprising: communicating, with the at least one processor, between the individual processes or threads assigned to the plurality of person entities, the plurality of storage entities, and the plurality of object entities, using either a message passing interface or an inter-thread communication framework.
4. The method according to claim 1, the receiving the event data and the storage content data further comprising: receiving the event data and the storage content data from at least one tracker device, the tracker device being configured to determine the event data and the storage content data by monitoring the environment with at least one sensor.
5. The method according to claim 1, the receiving the event data and the storage content data further comprising: encoding and writing, in a temporally sequenced manner, the event data and the storage content data to at least one file stored on a memory.
6. The method according to claim 1 further comprising: storing, with the at least one processor, in a first buffer on a memory, in response to each time the first person entity moved an extremity into a respective storage entity in the plurality of storage entities, a respective first list identifying object entities in the plurality of object entities that were located within the respective storage entity before the first person entity moved the extremity into the respective storage entity, each respective first list being assigned a unique key pair identifying the first person entity and the respective storage entity; and storing, with the at least one processor, in a second buffer on the memory, in response to each time the first person entity removed an extremity from a respective storage entity in the plurality of storage entities, a respective second list identifying object entities in the plurality of object entities that were located within the respective storage entity after the first person entity removed the extremity from the respective storage entity, each respective second list being assigned a unique key pair identifying the first person entity and the respective storage entity.
7. The method according to claim 6 further comprising: detecting, with the at least one processor, an interaction in which the first person entity moved an extremity into the first storage entity and subsequently removed an extremity from the first storage entity in response to determining that a list of the first lists in the first buffer has a matching unique key pair with a list of the second lists in the second buffer, the matching unique key pair identifying the first storage entity.
8. The method according to claim 7, further comprising storing, in a memory, in at least one ownership log, at least one of (i) an identification of which person entity in the plurality of person entities owns each object entity in the plurality of object entities and (ii) an identification of which person entity in plurality of person entities owns each storage entity in the plurality of storage entities; determining, with the at least one processor, whether the interaction was an anomalous interaction based at least one of (i) which person entity in plurality of person entities owns each object entity added to or removed from the first storage entity as a result of the interaction and (ii) which person entity in plurality of person entities owns the first storage entity; and outputting, with an output device, a warning in response to determining that the respective interaction was an anomalous interaction.
9. The method according to claim 1, the determining the at least one of (i) the at least one object entity that was added to the first storage entity and (ii) the at least one second object entity that was removed from the first storage entity further comprising: fetching, from the storage content data, a first list identifying object entities in the plurality of object entities that were located within the first storage entity before the first person entity moved an extremity into the first storage entity; fetching, from the storage content data, a second list identifying object entities in the plurality of object entities that were located within the first storage entity after the first person entity removed an extremity from the first storage entity; and determining the at least one of (i) the at least one object entity that was added to the first storage entity and (ii) the at least one second object entity that was removed from the first storage entity by comparing the first list with the second list.
10. The method according to claim 1, the determining the at least one of (i) the at least one object entity that was added to the first storage entity and (ii) the at least one second object entity that was removed from the first storage entity further comprising: determining, with the at least one processor, for each interaction in which the first person entity moved an extremity into a respective storage entity in the plurality of storage entities and subsequently removed an extremity from the respective storage entity, at least one of (i) at least one object entity that was added to the respective storage entity and (ii) at least one second object entity that was removed from the respective storage entity; and recording, with the at least one processor, in a first interaction log associated with the first person entity on a memory, for each interaction in which the first person entity moved an extremity into the respective storage entity and subsequently removed an extremity from the respective storage entity, the at least one of (i) the at least one object entity that was added to the respective storage entity and (ii) at least one second object entity that was removed from the respective storage entity.
11. The method according to claim 10 further comprising: determining, with the at least one processor, for each interaction in the first interaction log associated with the first person entity and for each object entity added or removed with each respective interaction, an application-specific quality of the respective interaction based on whether the respective object entity was added or removed during the respective interaction; and performing, with the at least one processor, at least one operation based on the application-specific quality of each interaction.
12. The method according to claim 11, wherein the event data identifies times at which particular person entities in the plurality of person entities exited the environment, the method further comprising: determining, with the at least one processor, based on the event data, that the first person entity exited the environment, wherein the determining, for each interaction in the first interaction log associated with the first person entity and for each object entity added or removed with each respective interaction, the application-specific quality is performed in response to determining that the first person entity exited the environment
13. The method according to claim 11, the determining the application-specific quality of each interaction further comprising: determining, for each interaction in the first interaction log associated with the first person entity and for each object entity added or removed with each respective interaction, the application-specific quality of the respective interaction based on (i) whether the respective object entity was added or removed during the respective interaction, (ii) whether the respective object entity was added or removed during an interaction in the first interaction log that is previous in time to respective interaction, and (iii) whether the respective object entity was added or removed during an interaction in the first interaction log that is subsequent in time to respective interaction.
14. The method according to claim 11 further comprising: storing, in a memory, in at least one ownership log, an identification of which person entity in the plurality of person entities owns each object entity in the plurality of object entities; determining, with the at least one processor, for each interaction in the first interaction log associated with the first person entity and for each object entity added or removed with each interaction, whether the respective interaction was an anomalous interaction based on the application-specific quality of the respective interaction and which person entity in the plurality of person entities owns the respective object entity added or removed with the respective interaction; and outputting, with an output device, a warning in response to determining that the respective interaction was an anomalous interaction.
15. The method according to claim 14 further comprising: modifying the at least one ownership log to set, with the at least one processor, the first person entity as owning a respective object entity in the plurality of object entities, in response to a respective interaction in the first interaction log being a first interaction with the respective object entity.
16. The method according to claim 11 further comprising: storing, in a memory, in at least one ownership log, an identification of which person entity in the plurality of person entities owns each storage entity in the plurality of storage entities; determining, with the at least one processor, for each interaction in the first interaction log associated with the first person entity and for each object entity added or removed with each interaction, whether the respective interaction was an anomalous interaction based on the application-specific quality of the respective interaction and which person entity in the plurality of person entities owns the respective storage entity into which the respective object entity was added or from which the respective object entity was removed; and outputting, with an output device, a warning in response to determining that the respective interaction was an anomalous interaction.
17. The method according to claim 16 further comprising: modifying the at least one ownership log to set, with the at least one processor, the first person entity as owning a respective storage entity in the plurality of storage entities, in response to a respective interaction in the first interaction log being a first interaction with the respective storage entity.
18. The method according to claim 11 further comprising: storing, in a memory, in at least one ownership log, an identification of which storage entity in the plurality of storage entities owns each object entity in the plurality of object entities; determining, with the at least one processor, for each interaction in the first interaction log associated with the first person entity and for each object entity added or removed with each interaction, whether the respective interaction was an anomalous interaction based on the application-specific quality of the respective interaction and which storage entity in the plurality of storage entities owns the respective object entity added or removed with the respective interaction; and outputting, with an output device, a warning in response to determining that the respective interaction was an anomalous interaction.
19. A processing system for tracking person-object interactions in an environment, the processing system comprising: at least one memory configured to store (i) program instructions, (ii) event data with respect to a plurality of person entities and a plurality of storage entities in the environment, and (iii) storage content data with respect to the storage entities, the event data identifying times at which particular person entities in the plurality of person entities moved an extremity into particular storage entities in the plurality of storage entities, the event data identifying times at which particular person entities in the plurality of person entities removed an extremity from particular storage entities in the plurality of storage entities, the storage content data including a plurality of lists identifying object entities in a plurality of object entities that are located within particular storage entities in the plurality of storage entities at different times; and at least one processor configured to execute the program instructions to: receive, and store in the memory, the event data and the storage content data; and determine, based on the event data and the storage content data, at least one of (i) at least one first object entity that was added to a first storage entity in the plurality of storage entities and (ii) at least one second object entity that was removed from the first storage entity, as a result of an interaction in which a first person entity in the plurality of person entities moved an extremity into the first storage entity and subsequently removed an extremity from the first storage entity.
20. A system for tracking person-object interactions in an environment, the system comprising: a least one tracker device configured to determine (i) event data with respect to a plurality of person entities and a plurality of storage entities in the environment and (ii) storage content data with respect to the storage entities, by monitoring the environment with at least one sensor, the event data identifying times at which particular person entities in the plurality of person entities moved an extremity into particular storage entities in the plurality of storage entities, the event data identifying times at which particular person entities in the plurality of person entities removed an extremity from particular storage entities in the plurality of storage entities, the storage content data including a plurality of lists identifying object entities in a plurality of object entities that are located within particular storage entities in the plurality of storage entities at different times; and a processing system having: at least one memory configured to store (i) program instructions, (ii) the event data, and (iii) the storage content data; and at least one processor configured to execute the program instructions to: receive, and store in the memory, the event data and the storage content data; and determine, based on the event data and the storage content data, at least one of (i) at least one first object entity that was added to a first storage entity in the plurality of storage entities and (ii) at least one second object entity that was removed from the first storage entity, as a result of an interaction in which a first person entity in the plurality of person entities moved an extremity into the first storage entity and subsequently removed an extremity from the first storage entity.
</claims>
</document>
