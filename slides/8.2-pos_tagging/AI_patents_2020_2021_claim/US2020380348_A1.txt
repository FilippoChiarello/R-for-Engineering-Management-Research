<document>

<filing_date>
2019-05-31
</filing_date>

<publication_date>
2020-12-03
</publication_date>

<priority_date>
2019-05-31
</priority_date>

<ipc_classes>
G06N3/063,G06N3/08
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
GOKMEN, TAYFUN
RASCH, MALTE
</inventors>

<docdb_family_id>
73550855
</docdb_family_id>

<title>
Noise and Signal Management for RPU Array
</title>

<abstract>
Advanced noise and signal management techniques for RPU arrays during ANN training are provided. In one aspect of the invention, a method for ANN training includes: providing an array of RPU devices with pre-normalizers and post-normalizers; computing and pre-normalizing a mean and standard deviation of all elements of an input vector x to the array that belong to the set group of each of the pre-normalizers; and computing and post-normalizing the mean p and the standard deviation a of all elements of an output vector y that belong to the set group of each of the post-normalizers.
</abstract>

<claims>
1. A method for artificial neural network (ANN) training with noise and signal management, the method comprising the steps of: providing an array of resistive processing unit (RPU) devices with pre-normalizers configured to handle a set group of size g of n elements of an input vector x to the array and post-normalizers configured to handle a set group of size g of m elements of an output vector y from the array, wherein the array represents a weight matrix W of the ANN having m rows and n columns, and wherein weight values w of weight matrix W are stored as resistive values of the RPU devices; computing a mean μ and a standard deviation σ of all elements of the input vector x that belong to the set group of each of the pre-normalizers across N vectors producing current mean μ and standard deviation σ values for the pre-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g input values; updating previously stored mean μ and standard deviation σ values for the pre-normalizers with a discounting factor α and the current mean μ and standard deviation σ values for the pre-normalizers producing updated stored mean μ and standard deviation σ values for the pre-normalizer; pre-normalizing the N times g input values using the updated stored mean μ and standard deviation σ values for the pre-normalizers producing N normalized input vectors xnorm from all of the pre-normalizers, to compute W*xnorm with analog noise in a forward cycle pass through the array; computing the mean μ and the standard deviation σ of all elements of the output vector y that belong to the set group of each of the post-normalizers across the N vectors producing current mean μ and standard deviation σ values for the post-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g output values; updating previously stored mean μ and standard deviation σ values for the post-normalizers with the discounting factor α and the current mean μ and standard deviation σ values for the post-normalizers producing updated stored mean μ and standard deviation σ values for the post-normalizer; post-normalizing the N times g output values using the updated stored mean μ and standard deviation σ values for the post-normalizers producing N normalized output vectors ynorm, from all of the post-normalizers; transforming N input vectors d using the previous standard deviation σ producing N transformed input vectors dnorm to compute WT*dnorm with analog noise in a backward cycle pass through the array; and transforming N output vectors d′ using the previous standard deviation σ for the pre-normalizers to produce N transformed output vectors d′norm.
2. The method of claim 1, further comprising the step of: initializing each of the pre-normalizers and the post-normalizers to have a stored mean value set to 0, and a stored standard deviation value set to 1.
3. The method of claim 1, further comprising the step of: updating the array in an update cycle pass with xnorm from the forward cycle pass and with dnorm from the backward cycle pass.
4. The method of claim 1, further comprising the step of: updating the previously stored mean μ and standard deviation σ values for the pre-normalizers using the discounting factor α as (1−α)*vold+α*vnew, wherein vold is the previous mean and standard deviation for the pre-normalizers, and vnew is the mean and standard deviation computed for the elements of the input vector x.
5. The method of claim 4, further comprising the step of: initially setting the discounting factor σ to a value that is larger than 0 and less than 1.
6. The method of claim 1, further comprising the step of: updating the previously stored mean μ and standard deviation σ values for the post-normalizers using the discounting factor α as (1−α)*vold+α*vnew, wherein vold is the previous mean and standard deviation for the post-normalizers, and vnew is the mean and standard deviation computed for the elements of the output vector y.
7. The method of claim 6, further comprising the step of: initially setting the discounting factor σ to a value that is larger than 0 and less than 1.
8. The method of claim 1, wherein the pre-normalizing step comprises the steps of: subtracting, for each of the pre-normalizers, the N times g values by the previous mean μ of the pre-normalizers to obtain a result; and dividing the result by the previous standard deviation σ of the pre-normalizers.
9. The method of claim 1, further comprising the steps of: converting the N normalized input vectors dnorm to analog pulse widths; computing WT*dnorm with analog noise using the array; and representing the output vector y from the array in digital.
10. The method of claim 1, further comprising the steps of: converting the N normalized input vectors xnorm to analog pulse widths; computing W*xnorm with analog noise using the array; and representing the N output vectors d′ from the array in digital.
11. The method of claim 1, wherein the step of transforming the N input vectors d comprises the step of: dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm.
12. The method of claim 1, further comprising the step of: initializing each of the pre-normalizers and post-normalizers to have a stored value v set to 0, and a stored value Δ set to 1.
13. The method of claim 12, wherein the step of transforming the N input vectors d comprises the steps of: computing v, via the post-normalizers, as the mean μ of the N times g output values of the N input vectors d; computing, via the post-normalizers, a cross-correlation A between the N times g output values of the N input vectors d with values of the output vector y from the forward cycle pass; subtracting, via the post-normalizers, each of the N times g output values of the N input vectors d by a first term computed as α times v, and then by a second term computed as α times Δ times the values of the output vector y from the forward cycle pass; and dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm.
14. The method of claim 11, wherein the step of transforming the N output vectors d′ of the backward cycle pass comprises the step of: dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm.
15. The method of claim 13, wherein the step of transforming the N output vectors d′ comprises the steps of: computing v, via the post-normalizers, as the mean μ of the N times g output values of the N input vectors d; computing, via the post-normalizers, a cross-correlation A between the N times g output values of the N input vectors d with values of the output vector y from the forward cycle pass; subtracting, via the post-normalizers, each of the N times g output values of the N input vectors d by the first term computed as α times v, and then by the second term computed as α times Δ times the values of the output vector y from the forward cycle pass; and dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm.
16. A method for ANN training with noise and signal management, the method comprising the steps of: providing an array of RPU devices with pre-normalizers configured to handle a set group of size g of n elements of an input vector x to the array and post-normalizers configured to handle a set group of size g of m elements of an output vector y from the array, wherein the array represents a weight matrix W of the ANN having m rows and n columns, and wherein weight values w of weight matrix W are stored as resistive values of the RPU devices; computing a mean μ and a standard deviation σ of all elements of the input vector x that belong to the set group of each of the pre-normalizers across N vectors producing current mean μ and standard deviation σ values for the pre-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g input values; updating previously stored mean μ and standard deviation σ values for the pre-normalizers with a discounting factor α and the current mean μ and standard deviation σ values for the pre-normalizers producing updated stored mean μ and standard deviation σ values for the pre-normalizer; pre-normalizing the N times g input values using the updated stored mean μ and standard deviation σ values for the pre-normalizers producing N normalized input vectors xnorm from all of the pre-normalizers, to compute W*xnorm with analog noise in a forward cycle pass through the array; computing the mean μ and the standard deviation σ of all elements of the output vector y that belong to the set group of each of the post-normalizers across the N vectors producing current mean μ and standard deviation σ values for the post-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g output values; updating previously stored mean μ and standard deviation σ values for the post-normalizers with the discounting factor α and the current mean μ and standard deviation σ values for the post-normalizers producing updated stored mean μ and standard deviation σ values for the post-normalizer; post-normalizing the N times g output values using the updated stored mean μ and standard deviation σ values for the post-normalizers producing N normalized output vectors ynorm from all of the post-normalizers; transforming N input vectors d using the previous standard deviation σ producing N transformed input vectors dnorm to compute WT*dnorm with analog noise in a backward cycle pass through the array by dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm; and transforming N output vectors d′ using the previous standard deviation σ for the pre-normalizers to produce N transformed output vectors d′norm by dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm.
17. The method of claim 16, further comprising the steps of: converting the N normalized input vectors dnorm to analog pulse widths; computing WT*dnorm, with analog noise using the array; and representing the output vector y from the array in digital.
18. The method of claim 16, further comprising the steps of: converting the N normalized input vectors xnorm to analog pulse widths; computing W*xnorm with analog noise using the array; and representing the N output vectors d′ from the array in digital.
19. A method for ANN training with noise and signal management, the method comprising the steps of: providing an array of RPU devices with pre-normalizers configured to handle a set group of size g of n elements of an input vector x to the array and post-normalizers configured to handle a set group of size g of m elements of an output vector y from the array, wherein the array represents a weight matrix W of the ANN having m rows and n columns, and wherein weight values w of weight matrix W are stored as resistive values of the RPU devices; initializing each of the pre-normalizers and post-normalizers to have a stored value v set to 0, and a stored value Δ set to 1; computing a mean μ and a standard deviation σ of all elements of the input vector x that belong to the set group of each of the pre-normalizers across N vectors producing current mean μ and standard deviation σ values for the pre-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g input values; updating previously stored mean μ and standard deviation σ values for the pre-normalizers with a discounting factor α and the current mean μ and standard deviation σ values for the pre-normalizers producing updated stored mean μ and standard deviation σ values for the pre-normalizer; pre-normalizing the N times g input values using the updated stored mean μ and standard deviation σ values for the pre-normalizers producing N normalized input vectors xnorm from all of the pre-normalizers, to compute W*xnorm with analog noise in a forward cycle pass through the array; computing the mean μ and the standard deviation σ of all elements of the output vector y that belong to the set group of each of the post-normalizers across the N vectors producing current mean μ and standard deviation σ values for the post-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g output values; updating previously stored mean μ and standard deviation σ values for the post-normalizers with the discounting factor α and the current mean μ and standard deviation σ values for the post-normalizers producing updated stored mean μ and standard deviation σ values for the post-normalizer; post-normalizing the N times g output values using the updated stored mean μ and standard deviation σ values for the post-normalizers producing N normalized output vectors ynorm from all of the post-normalizers; transforming N input vectors d using the previous standard deviation σ producing N transformed input vectors dnorm to compute WT*dnorm with analog noise in a backward cycle pass through the array by i) computing v as the mean μ of the N times g output values of the N input vectors d, computing a cross-correlation A between the N times g output values of the N input vectors d with values of the output vector y from the forward cycle pass, subtracting each of the N times g output values of the N input vectors d by a first term computed as α times v, and then by a second term computed as α times Δ times the values of the output vector y from the forward cycle pass, and dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm; and transforming N output vectors d′ using the previous standard deviation σ for the pre-normalizers to produce N transformed output vectors d′norm by computing v as the mean μ of the N times g output values of the N input vectors d, computing a cross-correlation A between the N times g output values of the N input vectors d with values of the output vector y from the forward cycle pass, subtracting each of the N times g output values of the N input vectors d by the first term computed as α times v, and then by the second term computed as α times Δ times the values of the output vector y from the forward cycle pass, and dividing the N input vectors d by the previous standard deviation σ for the post-normalizers to produce the N transformed input vectors dnorm.
20. The method of claim 19, further comprising the steps of: converting the N normalized input vectors dnorm to analog pulse widths; computing WT*dnorm with analog noise using the array; and representing the output vector y from the array in digital.
21. The method of claim 19, further comprising the steps of: converting the N normalized input vectors xnorm to analog pulse widths; computing W*xnorm with analog noise using the array; and representing the N output vectors d′ from the array in digital.
22. A computer program product for ANN training with noise and signal management, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computer to cause the computer to perform the steps of: using an array of RPU devices with pre-normalizers configured to handle a set group of size g of n elements of an input vector x to the array and post-normalizers configured to handle a set group of size g of m elements of an output vector y from the array to represent a weight matrix W of the ANN having m rows and n columns, wherein weight values w of weight matrix W are stored as resistive values of the RPU devices; computing a mean μ and a standard deviation σ of all elements of the input vector x that belong to the set group of each of the pre-normalizers across N vectors producing current mean μ and standard deviation σ values for the pre-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g input values; updating previously stored mean μ and standard deviation σ values for the pre-normalizers with a discounting factor α and the current mean μ and standard deviation σ values for the pre-normalizers producing updated stored mean μ and standard deviation σ values for the pre-normalizer; pre-normalizing the N times g input values using the updated stored μ and standard deviation σ values for the pre-normalizers producing N normalized input vectors xnorm from all of the pre-normalizers, to compute W*xnorm with analog noise in a forward cycle pass through the array; computing the mean μ and the standard deviation σ of all elements of the output vector y that belong to the set group of each of the post-normalizers across the N vectors producing current mean μ and standard deviation σ values for the post-normalizers, wherein the mean μ and the standard deviation σ are computed over N times g output values; updating previously stored mean μ and standard deviation σ values for the post-normalizers with the discounting factor α and the current mean μ and standard deviation σ values for the post-normalizers producing updated stored mean μ and standard deviation σ values for the post-normalizer; post-normalizing the N times g output values using the updated stored mean μ and standard deviation σ values for the post-normalizers producing N normalized output vectors ynorm from all of the post-normalizers; transforming N input vectors d using the previous standard deviation σ producing N transformed input vectors dnorm to compute WT*dnorm with analog noise in a backward cycle pass through the array; and transforming N output vectors d′ using the previous standard deviation σ for the pre-normalizers to produce N transformed output vectors d′norm.
</claims>
</document>
