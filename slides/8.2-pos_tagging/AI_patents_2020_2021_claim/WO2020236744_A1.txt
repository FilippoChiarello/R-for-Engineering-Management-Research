<document>

<filing_date>
2020-05-18
</filing_date>

<publication_date>
2020-11-26
</publication_date>

<priority_date>
2019-05-21
</priority_date>

<ipc_classes>
G06F8/70,G06N20/00
</ipc_classes>

<assignee>
X DEV LLC
</assignee>

<inventors>
NI BIN
SCHILLINGS BENOIT
EVANGELOPOULOS GEORGIOS
ZHANG QIANYU
BRONEVETSKY GRIGORY
HATALSKY OLIVIA
</inventors>

<docdb_family_id>
70978664
</docdb_family_id>

<title>
AUTOMATED IDENTIFICATION OF CODE CHANGES
</title>

<abstract>
Implementations are described herein for automatically identifying, recommending, and/or effecting changes to a legacy source code base by leveraging knowledge gained from prior updates made to other similar legacy code bases. In some implementations, data associated with a first version source code snippet may be applied as input across a machine learning model to generate a new source code embedding in a latent space. Reference embedding(s) may be identified in the latent space based on their distance(s) from the new source code embedding in the latent space. The reference embedding(s) may be associated with individual changes made during the prior code base update(s). Based on the identified one or more reference embeddings, change(s) to be made to the first version source code snippet to create a second version source code snippet may be identified, recommended, and/or effected.
</abstract>

<claims>
What is claimed is:
1. A method implemented using one or more processors, comprising:
applying data associated with a first version source code snippet as input across one or more machine learning models to generate a new source code embedding in a latent space; identifying one or more reference embeddings in the latent space based on one or more distances between the one or more reference embeddings and the new source code embedding in the latent space, wherein each of the one or more reference embeddings is generated by applying data indicative of a change made to a reference first version source code snippet to yield a reference second version source code snippet, as input across one or more of the machine learning models; and
based on the identified one or more reference embeddings, identifying one or more changes to be made to the first version source code snippet to create a second version source code snippet.
2. The method of claim 1, wherein the data associated with the first version source code snippet comprises an abstract syntax tree ("AST") generated from the first version source code snippet.
S. The method of any of claims 1-2, wherein one or more of the machine learning models comprises a graph neural network ("GNN").
4. The method of any of claims 1-3, wherein the one or more changes are identified based on one or more lookup tables associated with the one or more reference embeddings.
5. The method of any of claims 1-4, further comprising generating output to be rendered on one or more computing devices, wherein the output, when rendered,
recommends that the one or more changes be considered for the first version source code snippet.
6. The method of any of claims 1-5, further comprising automatically effecting the one or more changes in the first version source code snippet.
7. The method of any of claims 1-6, wherein the first version source code snippet comprises a source code file.
8. A method implemented using one or more processors, comprising: obtaining data indicative of a change between a first version source code snippet and a second version source code snippet;
labeling the data indicative of the change with a change type;
applying the data indicative of the change as input across a machine learning model to generate a new embedding in a latent space;
determining a distance in the latent space between the new embedding and a previous embedding in the latent space associated with the same change type; and
training the machine learning model based at least in part on the distance.
9. The method of claim 8, wherein the machine learning model comprises a graph neural network ("GNN").
10. The method of claim 8, wherein the data indicative of the change comprises a change graph.
11. The method of claim 10, wherein the change graph is generated from a first abstract syntax tree ("AST") generated from the first version source code snippet and a second AST generated from the second version source code snippet.
12. The method of any of claims 8-11, wherein the distance comprises a first distance, and the method further comprises:
determining a second distance in the latent space between the new embedding and another previous embedding in the latent space associated with a different change type; and computing, using a loss function, an error based on the first distance and the second distance;
wherein the training is based on the error.
13. The method of any of claims 8-11, wherein the data indicative of the change comprises first data indicative of a first change, the new embedding comprises a first new embedding, and the method further comprises:
obtaining second data indicative of a second change between the first version source code snippet and the second version source code snippet;
labeling the second data indicative of the second change with a second change type; applying the second data indicative of the second change as input across the machine learning model to generate a second new embedding in the latent space;
determining an additional distance in the latent space between the second new embedding and a previous embedding in the latent space associated with the second change type; and
training the machine learning model based at least in part on the additional distance.
14. A system comprising one or more processors and memory storing instructions that, in response to execution of the instructions by the one or more processors, cause the one or more processors to:
apply data associated with a first version source code snippet as input across one or more machine learning models to generate a new source code embedding in a latent space; identify one or more reference embeddings in the latent space based on one or more distances between the one or more reference embeddings and the new source code embedding in the latent space, wherein each of the one or more reference embeddings is generated by applying data indicative of a change, made to a reference first version source code snippet to yield a reference second version source code snippet, as input across one or more of the machine learning models; and
based on the identified one or more reference embeddings, identify one or more changes to be made to the first version source code snippet to create a second version source code snippet.
15. The system of claim 14, wherein the data associated with the first version source code snippet comprises an abstract syntax tree ("AST") generated from the first version source code snippet.
16. The system of any of claims 14-15, wherein one or more of the machine learning models comprises a graph neural network ("GNN").
17. The system of any of claims 14-16, wherein the one or more changes are identified based on one or more lookup tables associated with the one or more reference embeddings.
18. The system of any of claims 14-17, further comprising instructions to generate output to be rendered on one or more computing devices, wherein the output, when rendered, recommends that the one or more changes be considered for the first version source code snippet.
19. The system of any of claims 14-18, further comprising instructions to automatically effect the one or more changes in the first version source code snippet.
20. The system of any of claims 14-19, wherein the first version source code snippet comprises a source code file.
</claims>
</document>
