<document>

<filing_date>
2018-04-13
</filing_date>

<publication_date>
2020-12-01
</publication_date>

<priority_date>
2018-04-13
</priority_date>

<ipc_classes>
G06F11/36,G06F21/52
</ipc_classes>

<assignee>
WEBROOT
</assignee>

<inventors>
SANDOVAL, ANDREW
</inventors>

<docdb_family_id>
68160424
</docdb_family_id>

<title>
Stack pivot exploit detection and mitigation
</title>

<abstract>
Examples of the present disclosure describe systems and methods for detecting and mitigating stack pivoting exploits. In aspects, various "checkpoints" may be identified in software code. At each checkpoint, the current stack pointer, stack base, and stack limit for each mode of execution may be obtained. The current stack pointer for each mode of execution may be evaluated to determine whether the stack pointer falls within a stack range between the stack base and the stack limit of the respective mode of execution. When the stack pointer is determined to be outside of the expected stack range, a stack pivot exploit is detected and one or more remedial actions may be automatically performed.
</abstract>

<claims>
1. A system comprising: at least one processor; and memory coupled to the at least one processor, the memory comprising computer executable instructions executable by the at least one processor to: for each software checkpoint encountered by an executing process: identifying a current stack pointer and a stack range for each of a kernel execution mode, a 32-bit execution mode, and a 64-bit execution mode associated with the process, wherein each of the stack ranges indicates a set of memory addresses between a respective stack base and a respective stack limit; evaluating the current stack pointer for each of the kernel, 32-bit, and 64-bit execution modes against the corresponding stack range to determine whether the respective current stack pointer is within the corresponding stack range; and when at least one of the current stack pointers is determined to be outside the corresponding stack range, performing one or more remedial actions.
2. The system of claim 1, further comprising exploit prevention software, wherein the exploit prevention software implements a set of software checkpoints to detect process behavior.
3. The system of claim 2, wherein the software checkpoints include at least two of: process creation events, thread creation events, library file load events, registry access events, file system access events, object manager events, and memory operation events.
4. The system of claim 1, wherein each of the execution modes is associated with a stack memory.
5. The system of claim 1, wherein each of the current stack pointers refers to a register storing a memory address of a last function call made by a thread of execution in a program, and each of the stack limits refers to the current lowest address of a stack.
6. The system of claim 1, wherein identifying each of the current stack pointers and each of the stack ranges comprises accessing at least one of a thread information block and one or more operating system APIs for determining the respective stack base and the respective stack limit.
7. The system of claim 1, wherein evaluating each of the current stack pointers against the corresponding stack range comprises using at least one of: a rule set and an evaluation model.
8. The system of claim 1, wherein determining whether each respective current stack pointer is within the range of the respective stack limit comprises comparing a memory address of the respective current stack pointer to a range of memory addresses associated with the corresponding stack range.
9. The system of claim 1, wherein the one or more remedial actions comprise at least one of: displaying a warning, terminating the process, modifying a set of privileges, and quarantining a file associated with the process.
10. A method comprising: for each software checkpoint encountered by an executing process: identifying a current stack pointer and a stack range for each of a kernel execution mode, a 32-bit execution mode, and a 64-bit execution mode associated with the process, wherein each of the stack ranges indicates a set of memory addresses between a respective stack base and a respective stack limit; evaluating the current stack pointer for each of the kernel, 32-bit, and 64-bit execution modes against the corresponding stack range to determine whether the respective current stack pointer is within the corresponding stack range; and when at least one of the current stack pointers is determined to be outside the range of the respective stack limit, performing one or more remedial actions.
11. The method of claim 10 further comprising exploit prevention software, wherein the exploit prevention software implements a set of software checkpoints to detect process behavior.
12. The method of claim 11, wherein the software checkpoints include at least two of: process creation events, thread creation events, library file load events, registry access events, file system access events, object manager events, and memory operation events.
13. The method of claim 10, wherein each of the execution modes is associated with a stack memory.
14. The method of claim 10, wherein each of the current stack pointers refers to a machine register storing a current top memory address of a current stack, each of the stack bases refers to the lowest memory address currently allocated to the respective current stack, and each of the stack limits refers to the highest memory address currently allocated to the respective current stack.
15. The method of claim 10, wherein identifying each of the current stack pointers and each of the stack ranges comprises accessing at least one of a thread information block and one or more operating system APIs for determining the corresponding stack range.
16. The method of claim 10, wherein evaluating each of the current stack pointers against the corresponding stack range comprises using at least one of: a rule set and an evaluation model.
17. The method of claim 10, wherein determining whether each respective current stack pointer is within the range of the corresponding stack range comprises comparing a memory address of the respective current stack pointer to a range of memory addresses associated with the corresponding stack range.
18. The method of claim 10, wherein the one or more remedial actions comprise at least one of: displaying a warning, terminating the process, modifying a set of privileges, and quarantining a file associated with the process.
19. A non-transitory computer-readable media storing computer executable instructions that when executed cause a computing system to perform a method comprising: for each software checkpoint encountered by an executing process: identifying a current stack pointer and a stack range for each of a kernel execution mode, a 32-bit execution mode, and a 64-bit execution mode associated with the process, wherein each of the stack ranges indicates a set of memory addresses between a respective stack base and a respective stack limit; evaluating the current stack pointer for each of the kernel, 32-bit, and 64-bit execution modes against the corresponding stack range to determine whether the respective current stack pointer is within the range of the corresponding stack range; and when at least one of the current stack pointers is determined to be outside the range of the corresponding stack rage, performing one or more remedial actions.
20. The non-transitory computer-readable media of claim 19, wherein determining whether each respective current stack pointer is within the corresponding stack range comprises determining whether a memory address of the respective current stack pointer matches a memory address within the corresponding stack range.
</claims>
</document>
