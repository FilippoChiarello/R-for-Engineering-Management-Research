<document>

<filing_date>
2019-06-05
</filing_date>

<publication_date>
2020-12-10
</publication_date>

<priority_date>
2019-06-05
</priority_date>

<ipc_classes>
G06F16/23,G06F16/901
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
Ford, Daniel
</inventors>

<docdb_family_id>
73650561
</docdb_family_id>

<title>
RESOLUTION OF ORDERING INVERSIONS
</title>

<abstract>
An example operation may include one or more of monitoring, by a resolution node, transaction sequences on a blockchain network, constructing, by the resolution node, a directed acyclic graph (DAG) based on the transaction sequences, computing, by the resolution node, a total order of the transaction sequences from the DAG, maintaining, by the resolution node, local partial orders in final total orderings of blocks, and resolving, by the resolution node, transaction ordering inversions from the local partial orders.
</abstract>

<claims>
1. A system, comprising: a processor of a resolution node; a memory on which are stored machine readable instructions that when executed by the processor, cause the processor to: monitor transaction sequences on a blockchain network; construct a directed acyclic graph (DAG) based on the transaction sequences; compute a total order of the transaction sequences from the DAG; maintain local partial orders in final total orderings of blocks; and resolve transaction ordering inversions from the local partial orders.
2. The system of claim 1, wherein the instructions further cause the processor to maintain the final total orderings of blocks in Merkle DAG data structures.
3. The system of claim 2, wherein the instructions further cause the processor to examine a creation order of two blocks with the same consensus timestamp from the Merkle DAG data structures.
4. The system of claim 3, wherein the instructions further cause the processor to select a block from the two blocks that was created first as the block to be ordered before other block with the same consensus timestamp to resolve the transaction ordering inversions.
5. The system of claim 4, wherein the instructions further cause the processor to determine a creation order of the blocks based on creation timestamps of the blocks and based on an index of the blocks when both blocks are created by the same node.
6. The system of claim 4, wherein the instructions further cause the processor to determine a creation order of the blocks by a path from one block to another block.
7. The system of claim 1, wherein the DAG reflects temporal transaction relationships.
8. A method, comprising: monitoring, by a resolution node, transaction sequences on a blockchain network; constructing, by the resolution node, a directed acyclic graph (DAG) based on the transaction sequences; computing, by the resolution node, a total order of the transaction sequences from the DAG; maintaining, by the resolution node, local partial orders in final total orderings of blocks; and resolving, by the resolution node, transaction ordering inversions from the local partial orders.
9. The method of claim 8, further comprising maintaining the final total orderings of blocks in Merkle DAG data structures.
10. The method of claim 9, further comprising examining a creation order of two blocks with the same consensus timestamp from the Merkle DAG data structures.
11. The method of claim 10, further comprising selecting a block from the two blocks that was created first as the block to be ordered before other block with the same consensus timestamp to resolve the transaction ordering inversions.
12. The method of claim 11, further comprising determining a creation order of the blocks based on creation timestamps of the blocks and based on an index of the blocks when both blocks are created by the same node.
13. The method of claim 11, further comprising determining a creation order of the blocks by a path from one block to another block.
14. The method of claim 13, wherein the DAG reflects temporal transaction relationships.
15. A non-transitory computer readable medium comprising instructions, that when read by a processor, cause the processor to perform: monitoring transaction sequences on a blockchain network; constructing a directed acyclic graph (DAG) based on the transaction sequences; computing a total order of the transaction sequences from the DAG; maintaining local partial orders in final total orderings of blocks; and resolving transaction ordering inversions from the local partial orders.
16. The non-transitory computer readable medium of claim 15, further comprising instructions, that when read by the processor, cause the processor to maintain the final total orderings of blocks in Merkle DAG data structures.
17. The non-transitory computer readable medium of claim 16, further comprising instructions, that when read by the processor, cause the processor to examine a creation order of two blocks with the same consensus timestamp from the Merkle DAG data structures.
18. The non-transitory computer readable medium of claim 17, further comprising instructions, that when read by the processor, cause the processor to select a block from the two blocks that was created first as the block to be ordered before other block with the same consensus timestamp to resolve the transaction ordering inversions.
19. The non-transitory computer readable medium of claim 15, further comprising instructions, that when read by the processor, cause the processor to determine a creation order of the blocks based on creation timestamps of the blocks and based on an index of the blocks when both blocks are created by the same node.
20. The non-transitory computer readable medium of claim 15, further comprising instructions, that when read by the processor, cause the processor to determine a creation order of the blocks by a path from one block to another block.
</claims>
</document>
