<document>

<filing_date>
2019-01-18
</filing_date>

<publication_date>
2020-07-23
</publication_date>

<priority_date>
2019-01-18
</priority_date>

<ipc_classes>
G06F11/36,G06F16/958,G06F8/38
</ipc_classes>

<assignee>
SAP
</assignee>

<inventors>
KUMAR, PRAKASH
DILEEPKUMAR, NITIN
RAJ, AYUSH
</inventors>

<docdb_family_id>
71609898
</docdb_family_id>

<title>
Self-Curative Computer Process Automates
</title>

<abstract>
Systems, methods, and products, are described herein for self-curative computer process automates. Execution of an automate for testing of an application is initiated. The application includes a plurality of user interface elements, each user interface element having a plurality of properties. A change to a user interface element of the plurality of user interface elements during the execution of the automate is identified based on a change to at least one property of the plurality of properties associated with the user interface element. A modification to the plurality of properties associated with the user interface element is generated based on a ranking of the plurality of user interface elements, the generated modification curing the change to the at least one property. The generated modification is caused to display on a graphical user interface for further acceptance of the generated modification to the automate.
</abstract>

<claims>
1. A method implemented by one or more data processors forming part of at least one computing device, the method comprising: initiating execution of an automate for testing of an application, the application comprising a plurality of user interface elements, each user interface element having a plurality of properties; identifying a change to a user interface element of the plurality of user interface elements during the execution of the automate based on a change to at least one property of the plurality of properties associated with the user interface element; generating a modification to the plurality of properties associated with the user interface element based on a ranking of the plurality of user interface elements, the generated modification curing the change to the at least one property; and causing the generated modification to display on a graphical user interface for further acceptance of the generated modification to the automate.
2. The method of claim 1, further comprising: receiving an acceptance, derived from user input via the graphical user interface, of the generated modification; and initiating execution of the automate having the generated modification for further testing of the user interface.
3. The method of claim 1, wherein identifying the change comprises: iteratively assigning a rank to each user interface element of the plurality of user interface elements; determining a delta between two user interface elements having a highest rank and a second highest rank; and identifying, based on the delta exceeding a predetermined threshold, the user interface element having the highest rank.
4. The method of claim 3, wherein the generated modification is based on the plurality of properties associated with the user interface element having the highest rank.
5. The method of claim 1, further comprising determining whether the change is a hidden element.
6. The method of claim 1, wherein the application is a web-based application.
7. The method of claim 1, wherein the application is an Hypertext Markup Language (HTML)-based application.
8. The method of claim 1, wherein the plurality of properties include at least one of: an aggregation, an association, a parent hierarchy, a binding context, an event registry, an element metadata class, or an element identification.
9. The method of claim 1, wherein the change is a layout change of some of the plurality of user interface elements.
10. A system comprising: at least one data processor; and memory storing instructions, which when executed by at least one data processor, result in operations comprising: initiating execution of an automate for testing of an application, the application comprising a plurality of user interface elements, each user interface element having a plurality of properties; identifying a change to a user interface element of the plurality of user interface elements during the execution of the automate based on a change to at least one property of the plurality of properties associated with the user interface element; generating a modification to the plurality of properties associated with the user interface element based on a ranking of the plurality of user interface elements, the generated modification curing the change to the at least one property; and causing the generated modification to display on a graphical user interface for further acceptance of the generated modification to the automate.
11. The system of claim 10, wherein the operations further comprise: receiving an acceptance, derived from user input via the graphical user interface, of the generated modification; and initiating execution of the automate having the generated modification for further testing of the user interface.
12. The system of claim 10, wherein identifying the change comprises: iteratively assigning a rank to each user interface element of the plurality of user interface elements; determining a delta between two user interface elements having a highest rank and a second highest rank; and identifying, based on the delta exceeding a predetermined threshold, the user interface element having the highest rank.
13. The system of claim 12, wherein the generated modification is based on the plurality of properties associated with the user interface element having the highest rank.
14. The system of claim 10, wherein the operations further comprise determining whether the change is a hidden element.
15. The system of claim 10, wherein the application is a web-based application.
16. The system of claim 10, wherein the application is an Hypertext Markup Language (HTML)-based application.
17. The system of claim 10, wherein the plurality of properties include at least one of: an aggregation, an association, a parent hierarchy, a binding context, an event registry, an element metadata class, or an element identification.
18. The system of claim 10, wherein the change is a layout change of some of the plurality of user interface elements.
19. The system of claim 10, further comprising an in-memory database storing the memory storing instructions.
20. A non-transitory computer program product storing instructions, which when executed by at least one data process forming part of at least one computing device, results in operations comprising: initiating execution of an automate for testing of an application, the application comprising a plurality of user interface elements, each user interface element having a plurality of properties; identifying a change to a user interface element of the plurality of user interface elements during the execution of the automate based on a change to at least one property of the plurality of properties associated with the user interface element; generating a modification to the plurality of properties associated with the user interface element based on a ranking of the plurality of user interface elements, the generated modification curing the change to the at least one property; and causing the generated modification to display on a graphical user interface for further acceptance of the generated modification to the automate.
</claims>
</document>
