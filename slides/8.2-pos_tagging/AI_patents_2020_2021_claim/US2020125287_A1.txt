<document>

<filing_date>
2018-10-23
</filing_date>

<publication_date>
2020-04-23
</publication_date>

<priority_date>
2018-10-23
</priority_date>

<ipc_classes>
G06F3/06
</ipc_classes>

<assignee>
IQLECT SOFTWARE SOLUTIONS PVT
</assignee>

<inventors>
SINHA, SACHIN
</inventors>

<docdb_family_id>
70279168
</docdb_family_id>

<title>
METHOD AND SYSTEM FOR DEPLOYING SOLID STATE DRIVE AS EXTENSION OF RANDOM ACCESS MEMORY
</title>

<abstract>
The present disclosure provides a system for deploying a solid state drive as an extension of a random access memory. The system programs an I/O layer on top of the solid state drive. Further, the system installs the solid state drive with the programmed I/O layer between the random access memory and a hard disk drive. Also, the system serves a plurality of read/write requests occurring for a set of data at the I/O layer in pre-defined criteria. Further, the pre-defined criteria include sequentially writing the set of data occurred at the I/O layer to the solid state drive. Furthermore, the pre-defined criteria include reading the set of data directly from the solid state drive instead of the hard disk drive.
</abstract>

<claims>
We claim:
1. A computer-implemented method for expansion of a random access memory by deploying a solid state drive in extension with the already installed random access memory, wherein the solid state drive is deployed in extension with the random access memory to reduce hardware cost and increase elasticity, the computer-implemented method comprising: programming an I/O layer on top of the solid state drive, wherein the I/O layer is used to handle a plurality of read/write requests for a set of data, wherein the I/O layer handles the plurality of read/write requests using one or more background threads; installing the solid state drive with the programmed I/O layer between the random access memory and a hard disk drive, wherein the solid state drive acts as extension of the already installed random access memory; serving the plurality of read/write requests occurring for the set of data at the I/O layer in a pre-defined criteria, wherein the plurality of read/write requests are served based on a plurality of prediction algorithms, wherein the pre-defined criteria comprises: sequentially writing the set of data occurred at the I/O layer to the solid state drive, wherein the set of data is written sequentially to the solid state drive to increase life cycle of the solid state drive; and reading the set of data directly from the solid state drive instead of the hard disk drive, wherein the set of data is read directly from the solid state drive to increase speed and performance of read operation.
2. The computer-implemented method as recited in claim 1, wherein the pre-defined criteria further comprises: writing the set of data in a solid state drive pool present in the solid state drive, wherein the set of data is written in the solid state drive pool if there is no space in a buffer pool present in the random access memory, and flushing the set of data in the hard disk drive, wherein the set of data is flushed to the hard disk drive if there is no space in the solid state drive pool.
3. The computer-implemented method as recited in claim 1, wherein the pre-defined criteria further comprises: reading the set of data from the solid state drive pool present in the solid state drive, wherein the set of data is read from the solid state drive pool if the set of data is present in the solid state drive pool; and reading the set of data from the hard disk drive, wherein the set of data is read from the hard disk drive if the set of data is not present in the solid state drive pool.
4. The computer-implemented method as recited in claim 2, wherein the flushing of a set of pages to the hard disk drive from the solid state drive pool further comprises: A. checking if the solid state drive is full; B. locking the solid state drive pool, wherein the solid state drive pool is locked if the solid state drive is full; C. executing step O, wherein step O is executed if the solid state drive pool is not full; D. computing size of the solid state drive pool to be flushed to the hard disk drive; E. collecting a set of headers from LRU for size; F. resetting EOF and other pointers to pages; G. marking chunk of area to be flushed; H. copying chunk of area to another temp memory; I. removing the set of headers from hash table and LRU; J. unlocking the solid state drive pool for append only; K. sorting the set of headers by sum of FILE ID and BLOCK ID; L. doing vector write of all pages to the hard disk drive; M. returning number of the set of headers flushed; N. unlocking the solid state drive pool for read; O. sleeping if it is background work; and P. repeating steps A-O.
5. The computer-implemented method as recited in claim 2, wherein writing of the set of headers to the solid state drive pool further comprises: A. checking whether the buffer pool is full; B. locking the buffer pool, wherein the buffer pool is locked if the buffer pool is full; C. executing step O, wherein step O is executed if the buffer pool is not full; D. collecting the set of headers from LRU with DP mark; E. repeating steps A-P from claim 4; F. checking if there is enough space in the solid state drive pool; G. locking the solid state drive pool for write, wherein the solid state drive pool is locked if there is enough space in the solid state drive pool; H. repeating steps A-P from claim 4, wherein steps A-P from claim 4 are repeated if there is not enough space in the solid state drive pool; I. appending the solid state drive pool area for given size; J. resetting set of pointers; K. putting the set of headers in hash table; L. putting the set of headers in LRU list; M. unlocking the solid state drive pool for write; N. returning n headers to BP_BW; O. sleeping; and P. repeating steps A-O.
6. The computer-implemented method as recited in claim 1, wherein size of the solid state drive should be less than 16× of size of the random access memory to get performance of 4× of size of the random access memory.
7. The computer-implemented method as recited in claim 1, wherein life of the solid state drive is extended below range of 16× or 32×.
8. The computer-implemented method as recited in claim 1, wherein the solid state drive of any size is deployed in extension with the random access memory of any size.
9. The computer-implemented method as recited in claim 1, wherein the plurality of prediction algorithms comprise of absolute prediction, heuristic based prediction and machine learning based prediction.
10. A computer system comprising: a random access memory; a hard disk drive; and a solid state drive, wherein the solid state drive is deployed to act as extension of the already installed random access memory, wherein the solid state drive is deployed to work in background with the random access memory, wherein the solid state drive acts as extension to the already installed random access memory by performing a method, the method comprising: programming an I/O layer on top of the solid state drive, wherein the I/O layer is used to handle a plurality of read/write requests for a set of data, wherein the I/O layer handles the plurality of read/write requests using one or more background threads; installing the solid state drive with the programmed I/O layer between the random access memory and the hard disk drive, wherein the solid state drive acts as extension of the already installed random access memory; serving the plurality of read/write requests occurring for the set of data at the I/O layer in a pre-defined criteria, wherein the plurality of read/write requests are served based on a plurality of prediction algorithms, wherein the pre-defined criteria comprises: sequentially writing the set of data occurred at the I/O layer to the solid state drive, wherein the set of data is written sequentially to the solid state drive to increase life cycle of the solid state drive; and reading the set of data directly from the solid state drive instead of the hard disk drive, wherein the set of data is read directly from the solid state drive to increase speed and performance of read operation.
11. The computer system as recited in claim 10, wherein the pre-defined criteria further comprises: writing the set of data in a solid state drive pool present in the solid state drive, wherein the set of data is written in the solid state drive pool if there is no space in a buffer pool present in the random access memory, and flushing the set of data in the hard disk drive, wherein the set of data is flushed to the hard disk drive if there is no space in the solid state drive pool.
12. The computer system as recited in claim 10, wherein the pre-defined criteria further comprises: reading the set of data from the solid state drive pool present in the solid state drive, wherein the set of data is read from the solid state drive pool if the set of data is present in the solid state drive pool; and reading the set of data from the hard disk drive, wherein the set of data is read from the hard disk drive if the set of data is not present in the solid state drive pool.
13. The computer system as recited in claim 11, wherein the flushing of a set of pages to the hard disk drive from the solid state drive pool further comprises: A. checking if the solid state drive is full; B. locking the solid state drive pool, wherein the solid state drive pool is locked if the solid state drive is full; C. executing step O, wherein step O is executed if the solid state drive pool is not full; D. computing size of the solid state drive pool to be flushed to the hard disk drive; E. collecting a set of headers from LRU for size; F. resetting EOF and other pointers to pages; G. marking chunk of area to be flushed; H. copying chunk of area to another temp memory; I. removing the set of headers from hash table and LRU; J. unlocking the solid state drive pool for append only; K. sorting the set of headers by sum of FILE ID and BLOCK ID; L. doing vector write of all pages to the hard disk drive; M. returning number of the set of headers flushed; N. unlocking the solid state drive pool for read; O. sleeping if it is background work; and P. repeating steps A-O.
14. The computer-implemented method as recited in claim 11, wherein writing of the set of headers to the solid state drive pool further comprises: A. checking whether the buffer pool is full; B. locking the buffer pool, wherein the buffer pool is locked if the buffer pool is full; C. executing step O, wherein step O is executed if the buffer pool is not full; D. collecting the set of headers from LRU with DP mark; E. repeating steps A-P from claim 13; F. checking if there is enough space in the solid state drive pool; G. locking the solid state drive pool for write, wherein the solid state drive pool is locked if there is enough space in the solid state drive pool; H. repeating steps A-P from claim 13, wherein the steps A-P from claim 13 are repeated if there is not enough space in the solid state drive pool; I. appending the solid state drive pool area for given size; J. resetting set of pointers; K. putting the set of headers in hash table; L. putting the set of headers in LRU list; M. unlocking the solid state drive pool for write; N. returning n headers to BP_BW; O. sleeping; and P repeating steps A-O.
15. The computer system as recited in claim 10, wherein size of the solid state drive should be less than 16× of size of the random access memory to get performance of 4× of size of the random access memory.
16. The computer system as recited in claim 10, wherein life of the solid state drive is extended below range of 16× or 32×.
17. The computer system as recited in claim 10, wherein the plurality of prediction algorithms comprise of absolute prediction, heuristic based prediction and machine learning based prediction.
18. A non-transitory computer readable storage medium encoding computer executable instructions that, when executed by at least one processor, performs a method for expansion of a random access memory by deploying a solid state drive in extension with the already installed random access memory, wherein the solid state drive is deployed in extension with the random access memory to reduce cost and increase elasticity, the method comprising: programming an I/O layer on top of the solid state drive, wherein the I/O layer is used to handle a plurality of read/write requests for a set of data, wherein the I/O layer handles the plurality of read/write requests using one or more background threads, wherein the one or more background threads are used to write the set of data in the solid state drive from the random access memory; installing the solid state drive with the programmed I/O layer between the random access memory and a hard disk drive, wherein the solid state drive acts as extension of the already installed random access memory; serving the plurality of read/write requests occurring for the set of data at the I/O layer in a pre-defined criteria, wherein the plurality of read/write requests are served based on a plurality of prediction algorithms, wherein the plurality of prediction algorithms comprise of absolute prediction, heuristic based prediction and machine learning based prediction, wherein the plurality of read/write requests are served at the I/O layer of the solid state drive, wherein the pre-defined criteria comprises: sequentially writing the set of data occurred at the I/O layer to the solid state drive, wherein the set of data is written sequentially to the solid state drive to increase life cycle of the solid state drive; and reading the set of data directly from the solid state drive instead of the hard disk drive, wherein the set of data is read directly from the solid state drive to increase speed and performance of read operation.
19. The non-transitory computer readable storage medium as recited in claim 18, wherein the pre-defined criteria further comprises: writing the set of data in a solid state drive pool present in the solid state drive, wherein the set of data is written in the solid state drive pool if there is no space in a buffer pool present in the random access memory, and flushing the set of data in the hard disk drive, wherein the set of data is flushed to the hard disk drive if there is no space in the solid state drive pool.
20. The non-transitory computer readable storage medium as recited in claim 18, wherein the pre-defined criteria further comprises: reading the set of data from the solid state drive pool present in the solid state drive, wherein the set of data is read from the solid state drive pool if the set of data is present in the solid state drive pool; and reading the set of data from the hard disk drive, wherein the set of data is read from the hard disk drive if the set of data is not present in the solid state drive pool.
</claims>
</document>
