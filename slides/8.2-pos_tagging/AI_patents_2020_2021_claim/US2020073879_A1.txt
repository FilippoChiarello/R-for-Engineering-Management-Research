<document>

<filing_date>
2019-08-27
</filing_date>

<publication_date>
2020-03-05
</publication_date>

<priority_date>
2018-08-28
</priority_date>

<ipc_classes>
G06F16/00,G06F16/31,G06F16/335,G06F16/93,G06F17/16,G06N3/02
</ipc_classes>

<assignee>
AMERICAN CHEMICAL SOCIETY
</assignee>

<inventors>
GRABAU, MARK RYAN
AYALA, PHILIPPE YVES
FLEIG, JOHN DAVID
GESSNER, CHRISTOPHER RYAN
WILSON, JEFFREY MICHAEL
SWARTWOUT, DONALD EUGENE
FULFORD, RODNEY LAROY
DENG, YI
POLSHAKOV, DMITRII ARKADYEVICH
</inventors>

<docdb_family_id>
69641202
</docdb_family_id>

<title>
Systems and methods for performing a computer-implemented prior art search
</title>

<abstract>
In some embodiments, a computer-implemented method for retrieving a similar document from a corpus of documents is provided. The method may include receiving a search document comprising a set of words; applying a first encoder to generate a first vector; applying a second encoder to generate a second vector; determining a first similarity between the first vector of the search document and the first vector of each document of the corpus of documents; determining a second similarity between the second vector of the search document and the second vector of each document of the corpus of documents; generating a first ranked list of documents based on the first similarity; generating a second ranked list of documents based on the second similarity; applying a voting algorithm to determine a score associated with each document; and outputting a third ranked list of documents based on the determined score.
</abstract>

<claims>
1. A computer implemented method for generating a document database, the method comprising: receiving a document of a plurality of documents, the document comprising a set of words; applying a first encoder to the set of words to generate a first vector; applying a second encoder to the set of words to generate a second vector; indexing the document using the first vector and the second vector into a searchable index; and enabling searching for the document using the index.
2. The method of claim 1, wherein the index comprises a first index for the first vector and second index for the second vector.
3. The method of claim 1, further comprising: applying a model to the set of words to generate one or more tags associated with the document; and based on the one or more tags, updating a node-edge graph with the document, wherein the node-edge graph represents relationships between the plurality of documents.
4. The method of claim 1, further comprising: parsing the document to identify a trigger word, the trigger word indicating a subset of words; determining that the document does not contain the trigger word; and storing the document in an exception database.
5. The method of claim 1, wherein the first encoder comprises a neural network encoder.
6. The method of claim 1, wherein applying the second encoder comprises parsing the set of words and removing occurrences of a stop word from the set of words to generate a subset of words.
7. The method of claim 6, further comprising: determining the number of times each of the subset of words appears in the subset of words; and determining a rarity of each of the subset of words.
8. The method of claim 7, wherein the rarity comprises a number of times a word appears in the document compared to a number of times the word appears in the plurality of documents.
9. The method of claim 3, wherein the one or more tags belong to a set of tags, the set of tags being generated by a model applied to the plurality of documents.
10. A computer-implemented method for retrieving a similar document from a corpus of documents, the method comprising: receiving a search document, the search document comprising a set of words; applying a first encoder to the set of words to generate a first vector; applying a second encoder to the set of words to generate a second vector; determining a first similarity between the first vector of the search document and the first vector of each document of the corpus of documents; determining a second similarity between the second vector of the search document and the second vector of each document of the corpus of documents; generating a first ranked list of documents in the corpus based on the first similarity; generating a second ranked list of documents in the corpus based on the second similarity; applying a voting algorithm to determine a score associated with each document based on a position of each document in its relative ranked list; and outputting a third ranked list of documents based on the determined score.
11. The method of claim 10, further comprising: applying a model to the set of words of the search document to generate one or more tags associated with the search document.
12. The method of claim 11, further comprising: based on the one or more tags, updating a node-edge graph associated with the corpus of documents with the search document; and generate a ranked list of documents sharing an edge with the search document.
13. The method of claim 12, wherein the score is based, in part, on the node-edge graph.
14. The method of claim 10, wherein the first encoder comprises a neural network encoder.
15. The method of claim 10, wherein applying the second encoder comprises parsing the set of words and removing occurrences of a stop word from the set of words, thereby generating a subset of words.
16. The method of claim 15, further comprising: determining the number of times each of the subset of words appears in the subset of words; and determining a rarity of each of the subset of words.
17. The method of claim 16, wherein the rarity comprises a number of times a word appears in the search document compared to a number of times the word appears in the corpus of documents.
18. The method of claim 10, further comprising: receiving a filtering rule comprising a condition; filtering the third ranked list based on the condition; and outputting a fourth ranked list.
19. A computer program product comprising a non-transitory computer readable medium having a computer readable program embodied therein, wherein the computer readable program, when executed on a computing device, causes the computing device to: receive a search document, the search document comprising a set of words; apply a first encoder to the set of words to generate a first vector; apply a second encoder to the set of words to generate a second vector; determine a first similarity between the first vector of the search document and the first vector of each document of the corpus of documents; determine a second similarity between the second vector of the search document and the second vector of each document of the corpus of documents; generate a first ranked list of documents in the corpus based on the first similarity; generate a second ranked list of documents in the corpus based on the second similarity; apply a voting algorithm to determine a score associated with each document based on a position of each document in its relative ranked list; and output a third ranked list of documents based on the determined score.
20. The computer-readable medium of claim 19, wherein the program further causes the computing device to: apply the first encoder using a semantic vector module comprising a deep learning encoder; apply the second encoder using a syntactic module configured to: determine a number of times each of the set of words appears in the search document, determine a number of times each of the set of words appears in the corpus of documents, and generate the second vector representing a comparison of the number of times each word appears in the document to the number of times each word appears in the corpus of documents; and apply a knowledge graph module configured to update a knowledge graph with a node comprising the search document.
</claims>
</document>
