<document>

<filing_date>
2019-03-27
</filing_date>

<publication_date>
2020-10-01
</publication_date>

<priority_date>
2019-03-27
</priority_date>

<ipc_classes>
A63F13/355,A63F13/67,A63F13/77,A63F13/79
</ipc_classes>

<assignee>
ELECTRONIC ARTS
</assignee>

<inventors>
AGHDAIE, NAVID
BOROVIKOV, IGOR
KOLEN, JOHN
MOSS, KENNETH ALAN
SARDARI, MOHSEN
ZAMAN, KAZI ATIF-UZ
</inventors>

<docdb_family_id>
72606738
</docdb_family_id>

<title>
Automated player control takeover in a video game
</title>

<abstract>
Systems and methods are disclosed for converting a player-controlled character or virtual entity in a video game to at least temporarily be under emulated control when certain criteria is met, such as when the player's device has lost its network connection to a game server. The character or virtual entity may continue to behave in the game in a manner that emulates or mimics play of the actual player until the end of the game session or until the underlying connection problem or other issue is resolved, such that other players participating in the game session have the same or similar gameplay experience as they would have had if the disconnected player had continued to play.
</abstract>

<claims>
1. A system comprising: a data store that stores a player imitation model associated with one or more video games, wherein the player imitation model comprises indications of actions taken by a player in each of a plurality of gameplay situations; and a computing system in electronic communication with the data store and configured to execute computer-readable instructions that configure the computing system to: initiate a hosted instance of a multiplayer video game, wherein the hosted instance of the multiplayer video game includes a plurality of virtual characters interacting in a virtual environment, wherein a first player computing device initially controls a first virtual character, and wherein at least one additional virtual character other than the first virtual character is initially controlled by one or more other player computing devices; while the hosted instance of the multiplayer video game is in a first game state, receive player control commands from at least the first player computing device; generate a first updated game state for the hosted instance of the multiplayer video game based on at least the player control commands; provide information associated with the first updated game state to the one or more other player computing devices; update the player imitation model based on the first game state and the player control commands from the first player computing device; detect an unexpected lack of control commands originating from the first player computing device over a time period, wherein the unexpected lack of control commands originating from the first player computing device are determined to be unexpected based at least in part on game state information associated with the first virtual character during the time period; based on the unexpected lack of control commands, switch the first virtual character to be under automated control by the computing system instead of control by the first player computing device; determine an emulated control command with respect to at least the first virtual character based on the first updated game state and the player imitation model; generate a second updated game state for the hosted instance of the multiplayer video game based on at least the emulated control command; and provide information associated with the second updated game state to the one or more other player computing devices.
2. The system of claim 1, wherein the computing system is further configured to generate the player imitation model based on automated analysis of a plurality of in-game actions performed as a result of player control commands input by the player over a first time period, wherein the player utilizes the first player computing device and wherein the player imitation model is specific to the player.
3. The system of claim 2, wherein the first time period comprises a plurality of instances of the multiplayer video game, the plurality of instances including the hosted instance of the multiplayer video game.
4. The system of claim 2, wherein the first time period is configurable by the player, wherein the computing system is further configured to generate a user interface that enables the player to select (a) a time period or (b) one or more previous game instances to be considered by the computing system when generating the player imitation model.
5. The system of claim 1, wherein the computing system is further configured to maintain a heartbeat protocol associated with a connection between the computing system and the first player computing device, wherein switching the first virtual character to be under automated control by the computing system is further based at least in part on the heartbeat protocol.
6. The system of claim 1, wherein the computing system is further configured to: detect that a connection problem between the computing system and the first player computing device is resolved; based at least in part on the connection problem being resolved, return the first virtual character to be under control of the first player computing device instead of under automated control by the computing system; and generate a third updated game state for the hosted instance of the multiplayer video game based on one or more player control commands from at least the first player computing device.
7. The system of claim 1, wherein the player imitation model is one of a plurality of player imitation models stored in the data store, wherein each of the plurality of player imitation models comprises indications of actions taken by the player in different instances of the multiplayer video game.
8. A computer-implemented method comprising: under the control of a computer system comprising computer hardware, the computer system configured with computer executable instructions: initiating an instance of a multiplayer video game, wherein the instance of the multiplayer video game includes a plurality of virtual entities interacting in a virtual environment, wherein a first player computing device initially controls a first virtual entity, and wherein at least one additional virtual entity other than the first virtual entity is initially controlled by one or more other player computing devices; while the instance of the multiplayer video game is in a first game state, receiving player control commands from at least the first player computing device; generating a first updated game state for the instance of the multiplayer video game based on at least the player control commands; providing information associated with the first updated game state to the one or more other player computing devices; detecting a control input problem associated with the first player computing device, wherein the control input problem comprises an unexpected lack of control commands originating from the first player computing device over a time period, wherein the unexpected lack of control commands originating from the first player computing device are determined to be unexpected based at least in part on game state information associated with the first virtual entity during the time period; based on the control input problem, determining an emulated control command with respect to at least the first virtual entity based on the first updated game state and a player imitation model, wherein the player imitation model comprises a trained model configured to receive a current game state of the multiplayer video game as input and to output an in-game action or command based on previously observed player behavior; generating a second updated game state for the instance of the multiplayer video game based on at least the emulated control command; and providing information associated with the second updated game state to the one or more other player computing devices.
9. The computer-implemented method of claim 8, wherein the first virtual entity comprises at least one of a virtual character, a virtual object, a grouping of virtual in-game units, a virtual vehicle, or a virtual structure.
10. The computer-implemented method of claim 8 further comprising: detecting that a control input problem is resolved; returning the first virtual entity to be under control of the first player computing device; and generating a third updated game state for the instance of the multiplayer video game based on one or more player control commands from at least the first player computing device.
11. The computer-implemented method of claim 8, wherein the player imitation model is trained at least in part in real time during the instance of the multiplayer video game, wherein at least a first portion of the previously observed player behavior is observed during the instance of the multiplayer video game.
12. The computer-implemented method of claim 11, wherein a second portion of the previously observed player behavior is associated with commands received from the first player computing device in a previously played instance of the multiplayer video game.
13. The computer-implemented method of claim 11, wherein a second portion of the previously observed player behavior comprises behavior of a plurality of players.
14. A non-transitory computer-readable storage medium having stored thereon computer-readable instructions that, when executed, configure a computing system to perform operations comprising: initiating an instance of a multiplayer video game, wherein a first player computing device initially controls a first virtual entity in the multiplayer video game, and wherein at least one additional virtual entity other than the first virtual entity is initially controlled by one or more other player computing devices; while the instance of the multiplayer video game is in a first game state, receiving player control commands from at least the first player computing device; generating a first updated game state for the instance of the multiplayer video game based on at least the player control commands; providing information associated with the first updated game state to the one or more other player computing devices; detecting an unexpected lack of control commands originating from the first player computing device over a first time period, wherein the unexpected lack of control commands originating from the first player computing device are determined to be unexpected based at least in part on first game state information associated with the first virtual entity during the first time period; based on the unexpected lack of control commands, determining an emulated control command with respect to at least the first virtual entity based on the first updated game state and a player imitation model, wherein the player imitation model comprises a trained model configured to receive a current game state of the multiplayer video game as input and to output an in-game action or command based on previously observed player behavior; and generating a second updated game state for the instance of the multiplayer video game based on at least the emulated control command.
15. The non-transitory computer-readable storage medium of claim 14, wherein the operations further comprise providing information associated with the second updated game state to the one or more other player computing devices.
16. The non-transitory computer-readable storage medium of claim 14, wherein the operations further comprise: detecting that a connection problem is resolved; returning the first virtual entity to be under control of the first player computing device; and generating a third updated game state for the instance of the multiplayer video game based on one or more player control commands from at least the first player computing device.
17. The non-transitory computer-readable storage medium of claim 14, wherein the player imitation model comprises a plurality of stackable levels that are each configured to determine a confidence score for a different action given the current game state of the multiplayer video game.
18. The non-transitory computer-readable storage medium of claim 17, wherein the player imitation model is configured to output an in-game action associated with a first checked level of the stackable levels that determines a confidence score meeting a threshold with respect to the current game state.
19. The non-transitory computer-readable storage medium of claim 14, wherein the player imitation model comprises a decision tree, a Markov model, or a deep neural network.
20. The non-transitory computer-readable storage medium of claim 14, wherein the unexpected lack of control commands are determined to be unexpected based in further part on a second time period and second game state information during the second time period.
</claims>
</document>
