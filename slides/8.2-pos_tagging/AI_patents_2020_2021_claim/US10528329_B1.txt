<document>

<filing_date>
2017-04-27
</filing_date>

<publication_date>
2020-01-07
</publication_date>

<priority_date>
2017-04-27
</priority_date>

<ipc_classes>
G06F12/00,G06F12/02,G06F3/06,G06F8/30,G06F8/35,G11C16/04
</ipc_classes>

<assignee>
INTUIT
</assignee>

<inventors>
DOYLE, TIMOTHY B.
</inventors>

<docdb_family_id>
69058560
</docdb_family_id>

<title>
Methods, systems, and computer program product for automatic generation of software application code
</title>

<abstract>
Disclosed are techniques for automatic generation of software application code. These techniques identify or generate a data model in a first programming language. At least one rule is identified or generated from the data model. This at least one rule is tokenized into a plurality of subparts based at least in part upon a second programming language. A rule hierarchy at which the plurality of sub-parts is located is determined based in part or in whole upon a corresponding class hierarchy of a class with which the at least one rule is associated. A transformed data model is generated in the second programming language using at least the plurality of sub-parts and the rule hierarchy.
</abstract>

<claims>
I claim:
1. A computer implemented method for automatic generation of software application code, comprising: identifying or generating a data model in a first programming language; identifying or generating at least one rule from the data model by converting a decision logic block or one or more patterns in the data model for a class into the at least one rule; tokenizing the at least one rule into a plurality of sub-parts based at least in part upon a second programming language; determining a rule hierarchy at which the plurality of sub-parts is located based in part or in whole upon a corresponding class hierarchy of the class with which the at least one rule is associated; identifying and transforming a plurality of decision logic blocks or a plurality of patterns in the data model into a hierarchical set of rules; and generating, at an automatic code generation module stored at least partially in a memory and including or functioning in tandem with at least one microprocessor of a computing system, a transformed data model in the second programming language using at least the plurality of sub-parts and the rule hierarchy.
2. The computer implemented method of claim 1, further comprising: identifying the second programming language, a second platform, or a second environment into the second programming language; and determining one or more data model attributes for the second programming language.
3. The computer implemented method of claim 2, further comprising transforming the data model into a rule-based data model based in part or in whole upon the hierarchical set of rules.
4. The computer implemented method of claim 2, further comprising: generating the transformed data model in the second programming language by using at least the plurality of sub-parts and the one or more data model attributes for the second programming language.
5. The computer implemented method of claim 1, further comprising: identifying a plurality of classes comprising one or more parent classes and one or more child classes in the data model or in the transformed data model; and identifying the class from the plurality of classes and the corresponding class hierarchy at which the class is located in a hierarchical class data structure.
6. The computer implemented method of claim 5, further comprising: determining a set of terms or tokens that represents at least one pattern upon which at least one decision logic block is predicated for the class; identifying or generating a hierarchical rule data structure for storage of rules; and processing the at least one rule in the hierarchical set of rules or at least one decision logic block associated with the class at least by splitting on one or more first characters and looping through non-blank terms or tokens of the set of terms or tokens.
7. The computer implemented method of claim 6, further comprising: performing a rematch for at least one non-blank item with respect to one or more types of characters; and adding the at least one non-blank item as the at least one rule into the hierarchical rule data structure.
8. The computer implemented method of claim 7, further comprising: converting the at least one rule into a plurality of sub-parts based in part or in whole upon syntactical requirements of the second programming language; and joining the plurality of sub-parts based in part or in whole upon the syntactical requirements of the second programming language.
9. The computer implemented method of claim 8, further comprising: determining the rule hierarchy for the at least one rule at least by looping through one or more child hierarchies of the corresponding class hierarchy; and generating the hierarchical class data structure based at least in part upon frequencies of terms or word or term embedding processing.
10. An article of manufacture comprising a non-transitory computer accessible storage medium having stored thereupon a sequence of instructions which, when executed by at least one processor or at least one processor core executing one or more threads, causes the at least one processor or the at least one processor core to perform a set of acts for automatic generation of software application code, the set of acts comprising: identifying or generating a data model in a first programming language; identifying or generating at least one rule from the data model by converting a decision logic block or one or more patterns in the data model for a class into the at least one rule; tokenizing the at least one rule into a plurality of sub-parts based at least in part upon a second programming language; determining a rule hierarchy at which the plurality of sub-parts is located based in part or in whole upon a corresponding class hierarchy of the class with which the at least one rule is associated; identifying and transforming a plurality of decision logic blocks or a plurality of patterns in the data model into a hierarchical set of rules; and generating, at an automatic code generation module stored at least partially in a memory and including or functioning in tandem with at least one microprocessor of a computing system, a transformed data model in the second programming language using at least the plurality of sub-parts and the rule hierarchy.
11. The article of manufacture of claim 10, wherein the set of acts further comprises: identifying the second programming language, a second platform, or a second environment into the second programming language; and determining one or more data model attributes for the second programming language.
12. The article of manufacture of claim 11, wherein the set of acts further comprises: converting the at least one rule into a plurality of sub-parts based in part or in whole upon syntactical requirements of the second programming language; joining the plurality of sub-parts based in part or in whole upon the syntactical requirements of the second programming language; determining the rule hierarchy for the at least one rule at least by looping through one or more child hierarchies of the corresponding class hierarchy; generating the hierarchical class data structure based at least in part upon frequencies of terms or word or term embedding processing; and generating the transformed data model in the second programming language by using at least the plurality of sub-parts and the one or more data model attributes for the second programming language.
13. The article of manufacture of claim 10, wherein the set of acts further comprises: transforming the data model into a rule-based data model based in part or in whole upon the hierarchical set of rules; identifying a plurality of classes comprising one or more parent classes and one or more child classes in the data model or in the transformed data model; and identifying the class from the plurality of classes and the corresponding class hierarchy at which the class is located in a hierarchical class data structure.
14. The article of manufacture of claim 13, wherein the set of acts further comprises: determining a set of terms or tokens that represents at least one pattern upon which at least one decision logic block is predicated for the class; identifying or generating a hierarchical rule data structure for storage of rules; processing the at least one rule in the hierarchical set of rules or at least one decision logic block associated with the class at least by splitting on one or more first characters and looping through non-blank terms or tokens of the set of terms or tokens; performing a rematch for at least one non-blank item with respect to one or more types of characters; and adding the at least one non-blank item as the at least one rule into the hierarchical rule data structure.
15. A system for automatic generation of software application code, comprising: a plurality of modules, at least one of which is stored at least partially in memory and comprises at least one microprocessor including one or more processor cores executing one or more threads; a non-transitory computer accessible storage medium storing thereupon program code that includes a sequence of instructions that, when executed by the at least one micro-processor or processor core, causes the at least one micro-processor or processor core at least to: identify or generate a data model in a first programming language; identify or generate at least one rule from the data model by converting a decision logic block or one or more patterns in the data model for a class into the at least one rule; tokenize the at least one rule into a plurality of sub-parts based at least in part upon a second programming language; determine a rule hierarchy at which the plurality of sub-parts is located based in part or in whole upon a corresponding class hierarchy of the class with which the at least one rule is associated; identify and transform a plurality of decision logic blocks or a plurality of patterns in the data model into a hierarchical set of rules; and generate, at an automatic code generation module stored at least partially a memory and including or functioning in tandem with at least one microprocessor of a computing system, a transformed data model in the second programming language using at least the plurality of sub-parts and the rule hierarchy.
16. The system of claim 15, wherein the program code includes further instructions that, when executed by the at least one micro-processor or processor core, cause the at least one processor or processor core at least further to: identify the second programming language, a second platform, or a second environment into the second programming language; and determine one or more data model attributes for the second programming language.
17. The system of claim 16, wherein the program code includes further instructions that, when executed by the at least one micro-processor or processor core, cause the at least one processor or processor core at least further to: convert the at least one rule into a plurality of sub-parts based in part or in whole upon syntactical requirements of the second programming language; join the plurality of sub-parts based in part or in whole upon the syntactical requirements of the second programming language; determine the rule hierarchy for the at least one rule at least by looping through one or more child hierarchies of the corresponding class hierarchy; generate the hierarchical class data structure based at least in part upon frequencies of terms or word or term embedding processing; and generate the transformed data model in the second programming language by using at least the plurality of sub-parts and the one or more data model attributes for the second programming language.
18. The system of claim 15, wherein the program code includes further instructions that, when executed by the at least one micro-processor or processor core, cause the at least one processor or processor core at least further to: transform the data model into a rule-based data model based in part or in whole upon the hierarchical set of rules; identify a plurality of classes comprising one or more parent classes and one or more child classes in the data model or in the transformed data model; and identify the class from the plurality of classes and the corresponding class hierarchy at which the class is located in a hierarchical class data structure.
19. The system of claim 15, wherein the program code includes further instructions that, when executed by the at least one micro-processor or processor core, cause the at least one processor or processor core at least further to: determine a set of terms or tokens that represents at least one pattern upon which at least one decision logic block is predicated for the class; identify or generate a hierarchical rule data structure for storage of rules; process the at least one rule in the hierarchical set of rules or at least one decision logic block associated with the class at least by splitting on one or more first characters and looping through non-blank terms or tokens of the set of terms or tokens; perform a rematch for at least one non-blank item with respect to one or more types of characters; and add the at least one non-blank item as the at least one rule into the hierarchical rule data structure.
</claims>
</document>
