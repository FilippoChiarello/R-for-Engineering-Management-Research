<document>

<filing_date>
2019-06-29
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-29
</priority_date>

<ipc_classes>
G06F12/1009,G06F12/14
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
DURHAM DAVID M.
</inventors>

<docdb_family_id>
69845860
</docdb_family_id>

<title>
MEMORY PROTECTION WITH HIDDEN INLINE METADATA TO INDICATE DATA TYPE
</title>

<abstract>
Embodiments are directed to memory protection with hidden inline metadata to indicate data type and capabilities. An embodiment of a processor includes a processor core and cache memory. The processor core is to implant hidden inline metadata in one or more cachelines for the cache memory, the hidden inline metadata hidden at a linear address level, hidden from software, the hidden inline metadata to indicate data type or capabilities for the associated data stored on the same cacheline.
</abstract>

<claims>
1. A processor comprising: a processor core; and cache memory; wherein the processor core is to implant hidden inline metadata in one or more cachelines for the cache memory, the hidden inline metadata hidden at a linear address level, the hidden inline metadata to indicate data type.
2. The processor of claim 1, wherein the hidden inline metadata is available for purposes of one or more of memory tagging, identification of capabilities, and fine grain memory access control.
3. The processor of claim 1, further comprising: pointer security circuitry to define a plurality of memory tags in memory address pointers; and encryption circuitry to cryptographically secure data objects at least partially based on the plurality of memory tags; wherein the hidden inline metadata for a first cacheline includes one or more memory tags.
4. The processor of claim 3, wherein the processor core is further to compare the one or more memory tags in the hidden inline metadata for the first cacheline with a memory pointer tag value in a linear address to determine whether a memory access is authorized.
5. The processor of claim 4, wherein the processor core is to compare the one or more memory tags of the first cacheline with the memory pointer tag at a same or overlapping time with data access to the cacheline.
6. The processor of claim 1, wherein software run by the processor core is to skip over one or more regions of memory for the metadata inserted in the one or more cachelines during loading or storing of linear addressed data.
7. The processor of claim 1, wherein the processor core is to set an indicator in a memory or storage to indicate presence of the hidden inline metadata in the one or more cachelines.
8. The processor of claim 7, wherein the indicator includes one or more bits of a page table.
9. One or more non-transitory computer-readable storage mediums having stored thereon executable computer program instructions that, when executed by one or more processors, cause the one or more processors to perform operations comprising: implanting hidden inline metadata for one or more memory tags in one or more cachelines for a cache memory, the hidden inline metadata being hidden at a linear address level, the hidden inline metadata indicating data type; and setting an indicator to indicate presence of the hidden inline metadata in the one or more cachelines.
10. The one or more mediums of claim 9, wherein the instructions include instructions for utilizing the hidden inline metadata for one or more of memory tagging, identification of capabilities, and fine grain memory access control.
11. The one or more mediums of claim 9, wherein the instructions include instructions for: utilizing the memory tags to detect one or more of use-after-free vulnerabilities or overflow/underflow conditions.
12. The one or more mediums of claim 9, wherein the instructions include instructions for: defining one or more memory tags in memory address pointers; and cryptographically securing data objects at least partially based on one or more of the memory tags; wherein the hidden inline metadata for a first cacheline includes one or more memory tags.
13. The one or more mediums of claim 12, wherein the instructions include instructions for: comparing the one or more memory tags in the hidden inline metadata for the first cacheline with a memory pointer tag value in a linear address; and determining whether a memory access is authorized based at least in part on the comparison of the one or more memory tags to the memory pointer tag.
14. The one or more mediums of claim 13, wherein access to the one or more memory tags of the first cacheline occurs in a same clock cycle as data access to the cacheline.
15. The one or more mediums of claim 9, wherein one or more regions of memory for the metadata inserted in the one or more cachelines are skipped during loading or storing of linear addressed data.
16. The one or more mediums of claim 9, wherein the instructions include instructions for: setting an indicator in a memory or storage to indicate presence of the hidden inline metadata in the one or more cachelines.
17. The one or more mediums of claim 16, wherein the indicator includes one or more bits of a page table.
18. A method comprising: implanting hidden inline metadata for one or more memory tags in one or more cachelines for a cache memory, the hidden inline metadata being hidden at a linear address level, the hidden inline metadata indicating data type; and setting an indicator to indicate presence of the hidden inline metadata in the one or more cachelines.
19. The method of claim 18, further comprising: comparing one or more memory tags in the hidden inline metadata for the first cacheline with a memory pointer tag value in a linear address; and determining whether a memory access is authorized based at least in part on the comparison of the one or more memory tags to the memory pointer tag.
20. The method of claim 19, wherein access to the one or more memory tags of the first cacheline occurs in a same clock cycle as data access to the cacheline.
</claims>
</document>
