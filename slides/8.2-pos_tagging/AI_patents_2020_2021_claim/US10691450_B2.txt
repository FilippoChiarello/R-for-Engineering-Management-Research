<document>

<filing_date>
2018-03-28
</filing_date>

<publication_date>
2020-06-23
</publication_date>

<priority_date>
2018-02-02
</priority_date>

<ipc_classes>
G06F8/60,G06F8/77,G06F9/44,G06N20/00,G06N99/00,G06Q10/06
</ipc_classes>

<assignee>
TATA CONSULTANCY SERVICES
</assignee>

<inventors>
ARUMUGHAM, PRABHU
BALASUBRAMANIAN, ARUNA
JOSE, ALIN
KASTURI, ANUPAMA
PEREIRA, SMITHA
</inventors>

<docdb_family_id>
61763886
</docdb_family_id>

<title>
System and method for managing end to end agile delivery in self optimized integrated platform
</title>

<abstract>
In an agile delivery program, hundreds of team members are organised into multiple agile teams work in a synchronized manner, to build a product. Normally, they are geographically distributed teams need to have the infrastructure and tools, to manage their agile delivery seamlessly. In addition to team, a product backlog, and sprint duration also need to be managed the simultaneously. A system and method for managing a program in an agile delivery environment using a single integrated platform has been described. The method involves providing a set of visions to each of the members working in the program. The set of goals, the teams and sprint duration are then provided. The profiling and machine learning techniques are then performed on these parameters to generate an optimal release plan for the release of the product.
</abstract>

<claims>
1. A method for managing a program in an agile delivery environment, the method comprising a processor implemented steps of: providing a set of visions corresponding to the program (202); deriving a set of goals aligned to the set of visions, wherein each of the set of goals have a key result metric (204), wherein the key result metric is a measure of progress of each of the set of goals; deriving a set of requirements from a plurality of sources to achieve the set of goals, wherein the set of requirements is maintained in a product backlog based on a priority (206); deciding a sprint duration to be used during a release of the program (208); providing a list of a plurality of teams participating in the release of the program, wherein each of the plurality of teams has a team velocity (210), wherein the team velocity is indicative of a speed of the team in completing a number of story points in the agile delivery environment, and wherein the team velocity is dynamic and keeps on updating with every sprint; performing profiling of the plurality of teams, the product backlog and the sprint duration (212); performing a set of machine learning methods based on the profiling for generating a set of recommendations for matching the plurality of teams with the set of requirements for optimal release of the program (214), wherein generating the set of recommendations using the set of machine learning methods comprises comparing a planned story points with a total number of story points and performing following steps based on the comparison (310): adding one or more requirements to the first set of requirements in a release backlog if the planned story points are less than the total number of story points (312); and modifying at least one of the following to enable a optimal release of the program in the agile delivery environment if the planned story points are more than the total number of story points (314): reducing one or more requirements of the first set of requirements from the release backlog (316); adding one or more teams to the list of teams who would participate in the release (318); and adding one or more sprints to the number of sprints required for the release if an end date of the program is not fixed (320); delivering a minimum viable product corresponding to the program based on the set of recommendations at the end of every sprint (216); and managing the release of the program through an automated multiple deployment pipelines by defining various stages that the program would go through in a single click start (218).
2. The method of claim 1, further comprising the step of deciding a start date and an end date of the project, wherein the end date is either fixed or flexible.
3. The method of claim 1, wherein the step of profiling further comprises: calculating a total number of story points by multiplying a number of sprints with sum of a team velocity of each of the teams (302); providing a first set of requirements out of the set of requirements in a release backlog, wherein the release backlog contains the requirements which are intended to be released in a particular release (304); and calculating a planned story points based on the first set of requirements provided in the release backlog (308).
4. The method of claim 1 further comprising the step of managing additionally, a set of non-functional requirements in the set of requirements.
5. The method of claim 1 further comprising the step of managing the dependency of the plurality of teams, a plurality of supporting teams supporting the plurality of teams, and a plurality of third party teams using a dependency management module (116).
6. The method of claim 1 further comprising the step of scaling the agile delivery environment from the plurality of team's level to a portfolio level.
7. The method of claim 6, wherein the scaling is performed across following dimensions: teams, requirements, planning, deployment operation principles and quality.
8. The method of claim 7, wherein the step of scaling further comprising following steps to achieve scaling across one or more of the dimensions: providing a centralized platform to manage the plurality of scrum teams located a plurality of different geographical locations; providing a communication tool to facilitate communication between the plurality of scrum team at regular intervals; tracing the plurality of initiatives, the set of requirements and a plurality of stories and viewing the progress of all of them in real time; storing a set of Plug-ins for a plurality of external tools to be used in the program; and storing the output from the automated deployment pipeline for future reference.
9. The method of claim 1 wherein the plurality of sources comprise strategic initiatives, user centric personas and business components.
10. The method of claim 1, further comprising the step of displaying the set of visions on a vision board.
11. The method of claim 1, further comprising the step of determining if the set of visions are met or not based on the set of goals and the key result metric.
12. The method of claim 1 further comprising the step of tracking the progress of the plurality of initiatives at a regular interval during a predefined timeline.
13. The method of claim 1, wherein the set of requirements are prioritized in the product backlog depending on their relevancy to the program.
14. The method of claim 1 further comprising the step of providing feedback at the end of every sprint.
15. A system (100) for managing a program in an agile delivery environment, the system comprises: an input module (102) configured to provide: a set of visions corresponding to the program, a list of a plurality of teams participating in a release of the program, wherein each of the plurality of teams has a team velocity, and a sprint duration to be used during the release of the program; a vision board (104) for displaying the set of visions; a memory (106); and a processor (108) in communication with the memory, the processor further configured to perform the steps of: deriving a set of goals aligned to the set of visions, wherein each of the set of goals have a key result metric, wherein the key result metric is a measure of progress of each of the set of goals; deriving a set of requirements from a plurality of sources to achieve the set of goals, wherein the set of requirements is maintained in a product backlog based on a priority; providing a list of a plurality of teams participating in the release of the program, wherein each of the plurality of teams has a team velocity, wherein the team velocity is indicative of a speed of the team in completing a number of story points in the agile delivery environment, and wherein the team velocity is dynamic and keeps on updating with every sprint; performing profiling of the plurality of teams, the product backlog and the sprint duration using a profiling module (112); performing a set of machine learning methods based on the profiling for generating a set of recommendations for matching the plurality of teams with the set of requirements for optimal release of the program using a machine learning module (114), wherein generating the set of recommendations using the set of machine learning methods comprises comparing a planned story points with a total number of story points and performing following steps based on the comparison: adding one or more requirements to the first set of requirements in a release backlog if the planned story points are less than the total number of story points; and modifying at least one of the following to enable a optimal release of the program in the agile delivery environment if the planned story points are more than the total number of story points: reducing one or more requirements of the first set of requirements from the release backlog; adding one or more teams to the list of teams who would participate in the release; and adding one or more sprints to the number of sprints required for the release if an end date of the program is not fixed; delivering a minimum viable product corresponding to the program based on the set of recommendations at the end of every sprint using a minimum viable product (MVP) delivering module (118); and managing the release of the program through an automated multiple deployment pipelines by defining various stages that the program would go through in a single click start using a product build release management module (120).
16. A non-transitory computer-readable medium having embodied thereon a computer program for developing an Internet of Things (IoT) analytics application, the method comprising a processor implemented steps of: providing a set of visions corresponding to the program (202); deriving a set of goals aligned to the set of visions, wherein each of the set of goals have a key result metric (204), wherein the key result metric is a measure of progress of each of the set of goals; deriving a set of requirements from a plurality of sources to achieve the set of goals, wherein the set of requirements is maintained in a product backlog based on a priority (206); deciding a sprint duration to be used during a release of the program (208); providing a list of a plurality of teams participating in the release of the program, wherein each of the plurality of teams has a team velocity (210), wherein the team velocity is indicative of a speed of the team in completing a number of story points in the agile delivery environment, and wherein the team velocity is dynamic and keeps on updating with every sprint; performing profiling of the plurality of teams, the product backlog and the sprint duration (212); performing a set of machine learning methods based on the profiling for generating a set of recommendations for matching the plurality of teams with the set of requirements for optimal release of the program (214), wherein generating the set of recommendations using the set of machine learning methods comprises comparing a planned story points with a total number of story points and performing following steps based on the comparison (310): adding one or more requirements to the first set of requirements in a release backlog if the planned story points are less than the total number of story points (312); and modifying at least one of the following to enable a optimal release of the program in the agile delivery environment if the planned story points are more than the total number of story points (314): reducing one or more requirements of the first set of requirements from the release backlog (316); adding one or more teams to the list of teams who would participate in the release (318); and adding one or more sprints to the number of sprints required for the release if an end date of the program is not fixed (320); delivering a minimum viable product corresponding to the program based on the set of recommendations at the end of every sprint (216); and managing the release of the program through an automated multiple deployment pipelines by defining various stages that the program would go through in a single click start (218).
</claims>
</document>
