<document>

<filing_date>
2019-07-16
</filing_date>

<publication_date>
2020-04-02
</publication_date>

<priority_date>
2018-07-17
</priority_date>

<ipc_classes>
G06Q10/00
</ipc_classes>

<assignee>
VANTAGE AGORA
</assignee>

<inventors>
ACHAR SUDHIR
CHATURVEDI HARSHA
</inventors>

<docdb_family_id>
67539607
</docdb_family_id>

<title>
BUSINESS OPERATING SYSTEM ENGINE
</title>

<abstract>
An engine for resolving a query from a user to provide a dynamic actionable dashboard in a business operating system includes an MLET database, a data interface, a logic configured to process incoming queries, fetch data in relation to those queries, and render an actionable dashboard having data resulting from the queries. The MLET database comprises a plurality of templates ('MLETs'), each MLET being associated with a unique identifier and including a mechanism for accessing data relating to that identifier. The logic processes queries into constructs having a tokens and configurable inputs. If the query includes a unique identifier associated with an MLET in the MLET database, the MLET is used to fetch data responding to the query. If the query includes a unique identifier not associated with an MLET in the MLET database, the logic creates a new MLET using operational intelligence and stores it in the MLET database.
</abstract>

<claims>
1. An engine for resolving a query from a user to provide a dynamic actionable dashboard in a business operating system, comprising:
an MLET database;
a data interface; and
a logic configured to process incoming queries, fetch data in relation to those queries, and render an actionable dashboard having data resulting from the queries,
wherein the MLET database comprises a plurality of templates (each an "MLET"), each MLET being associated with a unique identifier and including a mechanism for accessing data relating to that identifier, and
wherein the logic processes incoming queries by
parsing the query to create an MLET construct having a token denoting that that the construct is an MLET construct and configurable inputs, interpreting the parsed query to determine whether it includes a unique identifier associated with an MLET in the MLET database,
if the query includes a unique identifier associated with an MLET in the MLET database, using the MLET in the MLET database the to fetch data responding to the query, and
if the query includes a unique identifier not associated with an MLET in the MLET database, creating a new MLET associated with the unique identifier using operational intelligence and storing the new MLET in the MLET database.
2. The engine of claim 1, wherein the interpreting the parsed query is performed using
machine learning based on one of (1) the user's business role, (2) the user's business department, (3) the user's location (4) the user's historical query trends, (5) queries of other users similar to the user, and (6) trending queries across all users to determine.
3. The engine of claim 1, wherein the interpreting the parsed query is performed using a one-armed bandit problem algorithm.
4. The engine of claim 1, wherein if the configurable inputs comprise a service level agreement, the engine immediately returns data associated with the service level agreement.
5. The engine of claim 1, wherein if the configurable inputs comprise color text, the engine immediately returns data associated with the color text.
6. The engine of claim 1, wherein the logic fetching data comprises determining whether the data sought by the query is markup language data and, if so, returning the markup language data as stored.
7. The engine of claim 1, wherein if the MLET includes a data query, the data query is used to fetch resulting data.
8. The engine of claim 1, wherein if the MLET does not include a data query, the engine builds a data query based on pre-stored mappings and uses the built data query to fetch resulting data.
9. The engine of claim 1, wherein the logic fetching data comprises determining whether the data sought by the query is markup language data and, if not, returning the data as text.
10. The engine of claim 1, wherein the actionable dashboard depicts comparison of an annual plan and actual achievement.
11. A method for resolving a query from a user to provide a dynamic actionable dashboard in a business operating system, comprising:
parsing the query to create a template ("MLET") construct having a token denoting that that the construct is an MLET construct and configurable inputs;
interpreting the parsed query to determine whether it includes a unique identifier associated with an MLET in a database of MLETs;
if the query includes a unique identifier associated with an MLET in the MLET database, using the MLET in the MLET database to fetch data responding to the query; if the query includes a unique identifier not associated with an MLET in the MLET database, creating a new MLET associated with the unique identifier using operational intelligence and storing the new MLET in the MLET database;
rendering an actionable dashboard containing the fetched data.
12. The method of claim 11, wherein the interpreting the parsed query is performed using machine learning based on one of (1) the user's business role, (2) the user's business department, (3) the user's location (4) the user's historical query trends, (5) queries of other users similar to the user, and (6) trending queries across all users to determine.
13. The method of claim 11, wherein the interpreting the parsed query is performed using a multi-armed bandit algorithm.
14. The method of claim 11, wherein if the configurable inputs comprise a service level agreement, the method immediately returns data associated with the service level agreement.
15. The method of claim 11, wherein if the configurable inputs comprise color text, the method immediately returns data associated with the color text.
16. The method of claim 11, wherein the fetching data comprises determining whether the data sought by the query is markup language data and, if so, returning the markup language data as stored.
17. The method of claim 11, wherein if the MLET includes a data query, the data query is used to fetch resulting data.
18. The method of claim 11, wherein if the MLET does not include a data query, the method further comprises building a data query based on pre-stored mappings and using the built data query to fetch resulting data.
19. The method of claim 11, wherein the fetching data comprises determining whether the data sought by the query is markup language data and, if not, returning the data as text.
20. The method of claim 1, wherein the actionable dashboard depicts comparison of an annual plan and actual achievement.
</claims>
</document>
