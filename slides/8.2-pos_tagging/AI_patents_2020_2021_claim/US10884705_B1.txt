<document>

<filing_date>
2020-02-26
</filing_date>

<publication_date>
2021-01-05
</publication_date>

<priority_date>
2018-04-17
</priority_date>

<ipc_classes>
G06F7/544,G06N20/00,H03M1/00,H03M1/74
</ipc_classes>

<assignee>
FAR, ALI TASDIGHI
</assignee>

<inventors>
FAR, ALI TASDIGHI
</inventors>

<docdb_family_id>
74045193
</docdb_family_id>

<title>
Approximate mixed-mode square-accumulate for small area machine learning
</title>

<abstract>
Multipliers, Multiply-Accumulate (MAC), and Square-Accumulate (SAC) circuits are fundamental building blocks in signal processing, including in emerging applications such as machine learning (ML) and artificial intelligence (AI) that predominantly utilize digital-mode multipliers, MACs, and SACs. Generally, digital multipliers, MACs, and SACs can operate at high speed with high resolution, and synchronously. As the resolution and speed of digital multipliers, MACs, and SACs increase, generally the dynamic power consumption and chip size of digital implementations increases substantially that makes them impractical for some ML and AI segments, including in portable, mobile, near edge, or near sensor applications. The multipliers, MACs, and SACs utilizing the disclosed current mode data-converters are manufacturable in main-stream digital CMOS process, and they can have medium to high resolutions, capable of low power consumptions, having low sensitivity to power supply and temperature variations, as well as operating asynchronously, which makes them suitable for high-volume, low cost, and low power ML and AI applications.
</abstract>

<claims>
1. A segmented squaring method in an integrated circuit, the method comprising: wherein an at least one input signal (Z) further comprising of an at least one Most-Significant-Portion (MSP) signal (ZMSP) and an at least one Least-Significant-Portion signal (ZMSP); generating an at least one MSP squared signal (ZMPS2) by squaring the at least one ZMSP signal; generating an at least one LSP squared signal (ZLPS2) by squaring the at least one ZLSP signal; and generating an at least one LSP and MSP cross-multiplication signal (ZLSP×ZMSP) by multiplying the at least one ZLSP signal with the at least one ZMSP signal.
2. The segmented squaring method in an integrated circuit of claim 1, the method further comprising: scaling the at least one ZMPS2 signal by an at least one top-scale-factor (sT) to generate an at least one sT×ZMPS2 signal; scaling the at least one ZLPS2 signal by an at least one bottom-scale-factor (sB) to generate an at least one sB×ZLPS2 signal; scaling the at least one ZLSP×ZMSP signal by an at least one middle-scale-factor (sM) to generate an at least one sM×ZLSP×ZMSP signal; and generating an at least one square signal (Z2) of the at least one Z signal by combining the at least one sT×ZMPS2, the at least one SB×ZLPS2, and the at least one sM×ZLSP×ZMSP.
3. The segmented squaring method in an integrated circuit of claim 2, the method further comprising: generating an at least one square analog signal (z′2) by inputting the at least one Z2 signal into an at least one Digital-to-Analog-Converter (DAC); and wherein the scale of the at least one z′2 analog signal is proportional to an at least one reference input signal (SR) of the at least one DAC.
4. The segmented squaring method in an integrated circuit of claim 3, the method further comprising: combining more than one of the at least one z′2 analog signals to generate an at least one square-accumulate analog signal (Σz′2).
5. The segmented squaring method in an integrated circuit of claim 3, the method further comprising: utilizing current mode DACs; and coupling more than one of the at least one z′2 current analog signals to generate an at least one square-accumulate current analog signal (Σz′2).
6. The segmented squaring method in an integrated circuit of claim 1, the method further comprising: providing the at least one digital input word Z by at least one of a Latch array, a Static-Random-Access-Memory (SRAM) array, an Erasable-Programmable-Read-Only-Memory (EPROM) array, and an Electrically-Erasable-Programmable-Read-Only-Memory (E2PROM) array.
7. A quarter square method of multiply-accumulate signals in integrated circuits, the method comprising: adding an at least one P signal to an at least one Q signal to generate an at least one sum signal (P+Q); generating an at least one absolute value of the P+Q signal (|P+Q|); subtracting the at least one Q signal from the at least one P signal to generate an at least one subtraction signal (P−Q); generating an at least one absolute value of the P−Q signal (|P−Q|); squaring the at least one |P+Q| signal to generate an at least one sum square signal (|P+Q|2); and squaring the at least one |P−Q| signal to generate an at least one subtraction square signal (|P−Q|2).
8. The quarter square method of multiply-accumulate signals in integrated circuits of claim 7, the method further comprising: subtracting the at least one |P−Q|2 signal from the at least one |P+Q|2 signal to generate an at least one scaled product signal (4×P×Q); and scaling the at least one scaled product signal 4×P×Q to generate an at least one product signal (P×Q).
9. The quarter square method of multiply-accumulate signals in integrated circuits of claim 8, the method further comprising: combining more than one of the at least one P×Q signals to generate an at least one multiply-accumulate signal (ΣP×Q).
10. The quarter square method of multiply-accumulate signals in integrated circuits of claim 8, the method further comprising: inputting the at least one product signal (P×Q) into an at least one Digital-to-Analog-Converter (DAC) to generate an at least one analog product signal (p′×q′).
11. The quarter square method of multiply-accumulate signals in integrated circuits of claim 10, the method further comprising: combining more than one of the at least one p′×q′ analog signal to generate an at least one analog multiply-accumulate signal (Σp′×q′).
12. The quarter square method of multiply-accumulate signals in integrated circuits of claim 7, the method further comprising: inputting the at least one |P−Q|2 signal into an at least one deducting Digital-to-Analog-Converter (DAC) to generate an at least one |p′−q′|2 analog signal; and inputting the at least one |P+Q|2 signal into an at least one summing DAC to generate an at least one |p′+q′|2 analog signal.
13. The quarter square method of multiply-accumulate signals in integrated circuits of claim 12, the method further comprising: subtracting the at least one |p′−q′|2 analog signal from the at least one |p′+q′|2 analog signal to generate an at least one scaled product analog signal (4×p′×q′); and scaling the at least one scaled product signal 4×p′×q′ to generate an at least one product analog signal (p′×q′).
14. The quarter square method of multiply-accumulate signals in integrated circuits of claim 12, the method further comprising: utilizing current mode DACs.
15. The quarter square method of multiply-accumulate signals in integrated circuits of claim 7, the method further comprising: providing at least one of the at least one P signal and the at least one Q signal by at least one of a Latch array, a Static-Random-Access-Memory (SRAM) array, an Erasable-Programmable-Read-Only-Memory (EPROM) array, and an Electrically-Erasable-Programmable-Read-Only-Memory (E2PROM) array.
16. A method of generating multiply-accumulate signals utilizing current mode data-converters, the method comprising: time multiplexing a single digital multiplier (dMULT) to multiply a plurality of P digital words (DP) by a plurality of Q digital words (DQ) to generate a plurality of product digital words (DP×DQ); inputting the plurality of Dp×DQ digital words into a plurality of current mode Digital-to-Analog-Converters (iDAC); inputting a plurality of current reference signals (IRd) into the plurality of iDACs; generating a plurality of analog current product output signals (IP×IQ) by the plurality iDACs wherein each IP×IQ analog current output signal of each iDAC is responsive to each iDAC's respective IP×IQ digital word and proportional to each iDAC's respective IRd; combining the plurality of IP×IQ analog current signals of the plurality of iDACs to generate an at least one multiply-accumulate analog current signal (ΣIMAC); inputting the at least one ΣIMAC analog current signal into an at least one current-mode Analog-to-Digital-Converter (iADC); inputting an at least one current reference signal (IRa) into the at least one iADC; generating an at least one multiply-accumulate output digital word (ΣDMAC) by the at least one iADC, wherein the at least one ΣDMAC output digital word the of at least one iADC is responsive to the at least one ΣIMAC analog current signal and proportional to the at least one IRa current reference signal of the at least one iADC, and programming the at least one IRa current reference signal, of the at least one iADC, to be at least one of fixed and proportional to the at least one ΣIMAC analog current signal.
17. The method of generating multiply-accumulate signals utilizing current mode data-converters of claim 16, the further method comprising: providing at least one P digital word of the plurality of P digital words and the least one Q digital word of the plurality of Q digital words by at least one of a Latch array, a Static-Random-Access-Memory (SRAM) array, an Erasable-Programmable-Read-Only-Memory (EPROM) array, and an Electrically-Erasable-Programmable-Read-Only-Memory (E2PROM) array.
</claims>
</document>
