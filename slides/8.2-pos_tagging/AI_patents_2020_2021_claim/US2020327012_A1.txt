<document>

<filing_date>
2020-04-10
</filing_date>

<publication_date>
2020-10-15
</publication_date>

<priority_date>
2019-04-12
</priority_date>

<ipc_classes>
G06F11/10,H03M13/15
</ipc_classes>

<assignee>
VAION
</assignee>

<inventors>
Lancia, Samuel
Rensel, Kjetil
</inventors>

<docdb_family_id>
66810063
</docdb_family_id>

<title>
METHOD OF STORING ITEMS OF DATA
</title>

<abstract>
A computer-implemented method of storing an item of data across a plurality of storage media, the method comprising the steps of: receiving an item of data to be stored; splitting the item of data into N pieces of data; generating M redundancy pieces of data, usable to rebuild the item of data; storing each of the N pieces of data and M redundancy pieces of data on separate storage media of the plurality of storage media at a same offset within a file of the respective storage medium, the files of the storage media containing the N pieces of data and the M redundancy pieces of data being associated as a file set; and storing, separately to the N pieces of data and M redundancy pieces of data, the offset and the file set.
</abstract>

<claims>
1. A computer-implemented method of storing an item of data across a plurality of storage media, the method comprising: receiving an item of data to be stored; splitting the item of data into N pieces of data; generating M redundancy pieces of data, usable to rebuild the item of data; storing each of the N pieces of data and M redundancy pieces of data on separate storage media of the plurality of storage media at a same offset within a file of the respective storage medium, the files of the storage media containing the N pieces of data and the M redundancy pieces of data being associated as a file set; and storing, separately to the N pieces of data and M redundancy pieces of data, the offset and the file set.
2. The computer-implemented method of claim 1, further including, after receiving the item of data to be stored, of determining a value of M and N based on one or more properties of the item of data and/or one or more properties of the plurality of storage media.
3. The computer-implemented method of claim 1, wherein the value of M is based on a redundancy level.
4. The computer-implemented method of claim 3, wherein the redundancy level is determined based on a retention schedule associated with the item of data.
5. The computer-implemented method claim 3, wherein the item of data is data captured from a video camera; and wherein the redundancy level is determined based on whether the data captured from the video camera includes any predetermined features of interest.
6. The computer-implemented method of claim 3, wherein the item of data is data captured from a video camera; and wherein the redundancy level is determined based on a derived importance level of the data captured from the video camera.
7. The computer-implemented method of claim 1, wherein generating the M redundancy pieces of data is performed by passing the N pieces of data to an erasure coding algorithm.
8. The computer-implemented method of claim 1, including removing an expired item of data by hole punching the items of data corresponding to the expired item of data.
9. The computer-implemented method of claim 8, wherein removing the expired item of data includes compressing the hole left by the hole punching in each file of the respective file set.
10. A computer-implemented method of rebuilding lost pieces of an item of data, comprising the steps of: reading all existing and non-corrupted pieces of data associated with the item of data; determining, from metadata associated with each existing piece of data, a number of lost or corrupted data pieces; rebuilding the lost or corrupted pieces of data; and storing the rebuilt pieces of data according to the method of claim 1.
11. The computer-implemented method of claim 10, wherein the rebuilding of lost or corrupted pieces of data is ordered based on one or more of: an importance of the item of data including the lost or corrupted pieces of data, as indicated by metadata associated with the item of data; the current level of redundancy taking into account the lost or corrupted pieces of data; and the time at which the item of data is required, as determined by a retention policy associated with the item of data.
12. A computer-implemented method of reading an item of data, the method comprising: determining an offset at which pieces of data associated with the item of data are stored on each of a plurality of storage media, wherein the item of data is stored as N pieces of data and M redundancy pieces of data stored on separate storage media of the plurality of storage media at a same offset within a file of the respective storage medium, the files of the storage media containing the N pieces of data and the M redundancy pieces of data being associated as a file set; reading each of the pieces of data, and thereby generating a read item of data; determining, from metadata associated with each read piece of data, whether the read item of data is valid; and returning the read item of data to a requester of the item of data when it is determined that the read item of data is valid.
13. The computer-implemented method of claim 12, further comprising: rebuilding any lost or corrupted pieces of the item of data when it is determined that the read item of data is invalid or incomplete.
14. The computer-implemented method of claim 13, wherein the rebuilding of lost or corrupted pieces of data is ordered based on one or more of: an importance of the item of data including the lost or corrupted pieces of data, as indicated by metadata associated with the item of data; the current level of redundancy taking into account the lost or corrupted pieces of data; and the time at which the item of data is required, as determined by a retention policy associated with the item of data.
15. The computer-implemented method of claim 13, wherein rebuilding the lost pieces of data includes determining whether only redundant pieces of data are missing, and wherein the method includes rebuilding the lost redundancy pieces in parallel to returning the read item of data.
16. A system, including a network adapter, a processor, and a plurality of storage media, wherein the processor is configured to: receive, via the network adapter, an item of data to be stored; split the data into N pieces of data; generate M redundancy pieces of data, usable to rebuild the item of data; store each of the N pieces of data and M redundancy pieces of data on separate storage media of the plurality of storage media at a same offset within a file of the respective storage medium, the files of the storage media containing the N pieces of data and the M pieces of redundancy data being associated as a file set; and store, separately to the N pieces of data and the M redundancy pieces of data, the offset and the file set.
17. The system of claim 16, wherein the processor is configured to: receiving an item of data to be stored; splitting the item of data into N pieces of data; generating M redundancy pieces of data, usable to rebuild the item of data; storing each of the N pieces of data and M redundancy pieces of data on separate storage media of the plurality of storage media at a same offset within a file of the respective storage medium, the files of the storage media containing the N pieces of data and the M redundancy pieces of data being associated as a file set; and storing, separately to the N pieces of data and M redundancy pieces of data, the offset and the file set.
</claims>
</document>
