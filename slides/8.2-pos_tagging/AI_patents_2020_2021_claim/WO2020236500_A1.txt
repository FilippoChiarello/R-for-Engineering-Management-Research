<document>

<filing_date>
2020-05-14
</filing_date>

<publication_date>
2020-11-26
</publication_date>

<priority_date>
2019-05-22
</priority_date>

<ipc_classes>
G06F15/16,G06F21/60,G06F21/62,H04L29/06
</ipc_classes>

<assignee>
MYOTA INC
</assignee>

<inventors>
CHUNG JAEYOON
</inventors>

<docdb_family_id>
73457198
</docdb_family_id>

<title>
METHOD AND SYSTEM FOR DISTRIBUTED DATA STORAGE WITH ENHANCED SECURITY, RESILIENCE, AND CONTROL
</title>

<abstract>
A method and system for encrypting and reconstructing data files, including related metadata, is disclosed. The method involves separately encrypting data and metadata as chaining processes and integrating a plurality of encryption/encoding techniques together with strategic storage distribution techniques and parsing techniques which results in the integrated benefits of the collection of techniques. As disclosed, the content data is separated from its metadata, encryption keys may be embedded in the metadata, and in a content data encryption chaining process, the method chunks, encrypts, shards, and stores content data and separately shards and stores metadata, and stored in a flexible, distributed, and efficient manner, at least in part to assure improved resiliency In addition, the processes are preferably implemented locally, including at the site of the content data or a proxy server.
</abstract>

<claims>
1 . A method for a processor to securely and reliably encrypt at least one computer file for storage, said file including content data and associated metadata, comprising the steps of:
generating at least one encryption key;
selecting at least one file for encryption;
implementing an algorithm based on a combination of computational and theoretical cryptography, said algorithm including;
parsing said content data portion of said file into a chain of n content chunks, each said chunk assigned a chunk ID;
using said at least one encryption key per chunk, encrypting each of said content chunks;
encoding and parsing each said content chunk into a plurality of content shards;
encrypting said chunk IDs; and
parsing said augmented metadata into a plurality of metadata shards thereby modifying said metadata;
delivering said plurality of content shards to at least one location for storage; and
delivering said plurality of metadata shards to at least one location for storage;
wherein said at least one location for storage for said encrypted and encoded content data file differs from said at least one location for storage for said encrypted and encoded metadata.
2. The method of claim 1 , following the step of encoding said chuck IDs, further comprising the steps of:
augmenting said metadata with said encrypted chunk IDs;
parsing said at least one key into a plurality of key shards;
encrypting said plurality of key shards; and
adding said encrypted plurality of key shards into said augmented metadata.
3. The method of claim 2, where the encrypted key shards and said chunk ID information are separately stored.
4. The method of claim 2, where the steps of encrypting metadata and keys are performed using SSSS.
5. The method of claim 1 , where the computational cryptography portion of the process includes use of Reed-Solomon coding.
6. The method of claim 1 , where the content data encryption technique includes use of AES-256.
7. The method of claim 1 , where content data is fully encrypted before coding.
8. The method of claim 1 , where the file attributes in metadata are not encrypted.
9. The method of claim 1 , where at least some metadata is stored in a vault on the local device.
10. The method of claim 1 , where each of the number of metadata storages, key storages, and data storages is configurable and each is not limited to 3.
1 1 . The method of claim 1 , where the parameters, t and n, of metadata shards, key shards, and data shards are independently configurable and are not limited to t=2 and n=3, where t is the number of required content shards to reconstruct and n is the number of content shards to store.
12. A processor based server for securely and reliably reconstructing a key encrypted and encoded data file and associated metadata from secure storage comprising: a data processing engine for chunking and encrypting including a file encryption engine and a metadata encryption engine
a shard buffer;
a storage for at least temporarily storing modified and sharded metadata; a synchronization processing unit including a scheduler module and a storage selection module;
a network interface for storing data; and
at least one of a graphical user interface (GUI) or a file system interface for user selection of files for reconfiguration.
13. The server of claim 12, further including a knowledge base for generating user selection options for display.
14. The server of claim 12, further comprising an Artificial Intelligence (Al) module, said Al module further comprising at least of an event log collector, a data analyzer for generating an algorithm, a parameter tuner, and an executor.
15. The server of claim 12, where said storage selection module implements an optimization algorithm configured in said data processing engine.
16. The server of claim 12, where said data processing engine is configured to direct storages absent any data deduplication.
17. The server of claim 12, wherein said data processing engine is used to reconstruct a file based on a t out of n scenario.
18. A method for a processor-based server to securely and reliably reconstruct at least one encrypted computer file from storage, said encryption including both computational and theoretical cryptography with data content of said at least one encrypted file having been parsed into m chunks, each said chunk having been parsed into n2 shards with each shard individually stored across a plurality of storage devices, and metadata of said at least one encrypted computer file having incorporated one or more encryption keys and subsequently having been parsed into n3 portions, where each of said n3 portions has been separately stored, comprising the steps of:
delivering a list of encrypted files for selection for reconstruction by an authenticated use, said list including an encryption time;
upon selection of at least one file for reconstruction, said processor identifying at least t3 metadata portions, where t3 is less than m;
reconstructing the metadata by identifying all parsed portions of metadata for the file in storage;
said processor identifying at least t2 content shards per chunk, where t2 may differ by chunk and each t2 is less than the related n2;
reconstructing each chunk and reassembling the content data file; and delivering said reconstructed data file to said user.
19. The method of claim 18, where the number of content shards is user configurable at the time of encryption and is not limited to each t, n being t=2 and n=3.
20. The method of claim 18, where said processor-based server controls a user Interface and said list of encrypted files is delivered to said user interface for selection.
</claims>
</document>
