<document>

<filing_date>
2019-07-09
</filing_date>

<publication_date>
2021-01-14
</publication_date>

<priority_date>
2019-07-09
</priority_date>

<ipc_classes>
G06F8/41,G06F8/71,G06N20/00
</ipc_classes>

<assignee>
DISNEY ENTERPRISES
</assignee>

<inventors>
MACHACEK, Jan
CHAKRABORTY, Anirvan
VILLOSLADA, Christian
</inventors>

<docdb_family_id>
74102284
</docdb_family_id>

<title>
TECHNIQUES FOR AUTOMATICALLY DETECTING PROGRAMMING DEFICIENCIES
</title>

<abstract>
A quality control (QC) engine analyzes sample code provided by a user and then generates example code that more effectively performs the same or similar operations performed by the sample code. An objective model analyzes the sample code to generate one or more tags indicating the intended objective(s) of the sample code. The quality model analyzes the sample code to generate one or more ratings indicating the degree to which the sample code achieves each intended objective. The performance model analyzes the tags and the ratings and estimates the performance of the sample code when executed in a production environment. The recommendation engine queries a database of code based on the tags, the ratings, and the estimated performance of the sample code to determine example code that achieves the same or similar objectives(s) as the sample code, but with at least one of higher ratings and greater performance.
</abstract>

<claims>
1. A computer-implemented method for determining source code that can replace deficient portions of a software application, the method comprising: determining a first objective for a first portion of program code; computing a first metric that indicates a degree to which the first portion of program code achieves the first objective; determining a second portion of program code based on the first objective and the first metric, wherein the second portion of program code is associated with a second metric that indicates a degree to which the second portion of program code achieves the first objective, and the second metric is greater than the first metric; and transmitting an identifier corresponding to the second portion of program code to a user.
2. The computer-implemented method of claim 1, wherein determining the first objective for the first portion of program code comprises determining at least one operation that is performed when the first portion of program code is executed.
3. The computer-implemented method of claim 1, wherein determining the first objective for the first portion of program code comprises performing a Natural Language Processing operation using the first portion of program code to generate a first classification for the first portion of program code corresponding to the first objective.
4. The computer-implemented method of claim 1, further comprising training a Machine Learning model to determine the first objective based on training data that includes one or more portions of program code and one or more tags, wherein a given tag included in the one or more tags indicates an objective associated with a given portion of program code included in the one or more portions of program code.
5. The computer-implemented method of claim 4, wherein the Machine Learning model, once trained, is able to generate the one or more tags based on the one or more portions of program code.
6. The computer-implemented method of claim 1, wherein computing the first metric comprises determining a number of syntactic elements included in the first portion of program code that are associated with the first objective.
7. The computer-implemented method of claim 1, further comprising training a Machine Learning model to compute the first metric by performing a sentiment analysis using metadata associated with a third portion of program code to generate a sentiment value.
8. The computer-implemented method of claim 7, wherein the Machine Learning model, once trained, is able to generate the sentiment value based on the third portion of code.
9. The computer-implemented method of claim 1, further comprising computing a second metric that indicates an expected number of errors generated when the first portion of program code is executed in a production environment, wherein the second portion of program code is determined based further on the second metric.
10. The computer-implemented method of claim 9, further comprising training a first Machine Learning model to compute the second metric based on performance data indicating a number of errors that occur when a third portion of program code is executed in the production environment, wherein the first Machine Learning model, once trained, is able to generate the performance data based on one or more objectives specified for the third portion of program code.
11. A non-transitory computer-readable medium storing program instructions that, when executed by a processor, cause the processor to determine source code that can replace deficient portions of a software application by performing the steps of: determining a first objective that is at least partially achieved by a first portion of program code; computing a first metric that indicates a degree to which the first portion of program code achieves the first objective; determining a second portion of program code based on the first objective and the first metric, wherein the second portion of program code is associated with a second metric that indicates a degree to which the second portion of program code achieves the first objective, and the second metric is greater than the first metric; and transmitting an identifier corresponding to the second portion of program code to a user interface.
12. The non-transitory computer-readable medium of claim 11, wherein the step of determining the first objective for the first portion of program code comprises determining at least one function included in the first portion of program code.
13. The non-transitory computer-readable medium of claim 11, wherein the step of determining the first objective for the first portion of program code comprises classifying the first portion of program code into at least one category corresponding to the first objective.
14. The non-transitory computer-readable medium of claim 11, further comprising the step of training a first model to determine the first objective based on training data that includes one or more portions of program code and one or more tags, wherein a given tag included in the one or more tags indicates an objective associated with a given portion of program code included in the one or more portions of program code, wherein the first model, once trained, is able to generate the one or more tags based on the one or more portions of program code.
15. The non-transitory computer-readable medium of claim 11, wherein the step of computing the first metric comprises determining a number of syntactic elements included in the first portion of program code that are associated with the first objective.
16. The non-transitory computer-readable medium of claim 11, further comprising the step of training a first model to compute the first metric by performing a sentiment analysis using metadata associated with a third portion of program code to generate a sentiment value, wherein the first model, once trained, is able to generate the sentiment value based on the third portion of code.
17. The non-transitory computer-readable medium of claim 11, further comprising the step of computing a second metric that indicates an expected number of errors generated when the first portion of program code is executed in a production environment, wherein the second portion of program code is determined based further on the second metric.
18. The non-transitory computer-readable medium of claim 17, further comprising the step of training a first model to compute the second metric based on performance data indicating a number of errors that occur when a third portion of program code is executed in the production environment, wherein the first model, once trained, is able to generate the performance data based on one or more objectives specified for the third portion of program code.
19. The non-transitory computer-readable medium of claim 11, wherein the step of determining the second portion of program code comprises querying a code database using the first objective to determine at least one portion of program code that meets the first objective to a greater degree than the first portion of program codes meets the first objective.
20. A system, comprising: a memory storing a software application; and a processor that, when executing the software application, is configured to perform the steps of: determining a first objective for a first portion of program code, computing a first metric that indicates a degree to which the first portion of program code achieves the first objective, determining a second portion of program code based on the first objective and the first metric, wherein the second portion of program code is associated with a second metric that indicates that the second portion of program code achieves the first objective to a greater degree than the first portion of program code, and transmitting an identifier corresponding to the second portion of program code to a user interface.
21. The system of claim 20, wherein the identifier corresponding to the second portion of program code comprise a uniform resource locator through which the second portion of program code can be accessed.
</claims>
</document>
