<document>

<filing_date>
2020-02-11
</filing_date>

<publication_date>
2020-09-24
</publication_date>

<priority_date>
2019-03-15
</priority_date>

<ipc_classes>
G06F9/46,G06F9/48,G06T1/20
</ipc_classes>

<assignee>
INTEL CORPORATION
SANKARAN, RAJESH
RAMADOSS, MURALI
SHAH, ANKUR N.
SADLER, WILLIAM B.
PEARCE, JONATHAN D.
ASHBAUGH, BEN
VEMULAPALLI, Vikranth
COORAY, Niran
PETRE, Marian Alin
</assignee>

<inventors>
SANKARAN, RAJESH
RAMADOSS, MURALI
SHAH, ANKUR N.
SADLER, WILLIAM B.
PEARCE, JONATHAN D.
ASHBAUGH, BEN
VEMULAPALLI, Vikranth
COORAY, Niran
PETRE, Marian Alin
</inventors>

<docdb_family_id>
69845535
</docdb_family_id>

<title>
TRANSACTIONAL PAGE FAULT HANDLING
</title>

<abstract>
Methods and apparatus relating to transactional page fault handling. In an example, an apparatus comprises a processor to divide an execution thread of a graphics workload into a set of transactions which are to be executed atomically, initiate the execution of the thread, and manage the execution of the thread according to one of a first protocol in response to a determination that a page fault occurred in the execution of a transaction, or a second protocol in response to a determination that a page fault did not occur in the execution of a transaction. Other embodiments are also disclosed and claimed.
</abstract>

<claims>
1. An apparatus comprising a processor to:
divide an execution thread of a graphics workload into a set of transactions which are to be executed atomically;
initiate the execution of the thread; and
manage the execution of the thread according to one of:
a first protocol in response to a determination that a page fault occurred in the execution of a transaction, or
a second protocol in response to a determination that a page fault did not occur in the execution of a transaction.
2. The apparatus of claim 1, the processor to:
detect a page fault in the execution of the transaction, and in response to the detection, to:
store an execution state of the thread in memory.
3. The apparatus of claim 2, the processor to:
generate a page fault signal for the transaction, the page fault signal comprising a thread identifier, a transaction identifier, a processor identifier, and a virtual function unit; and
discard any work performed on the transaction.
4. The apparatus of claim 3, the processor to:
initiate execution of a new thread; and
queue the transaction for execution after the page fault is resolved.
5. The apparatus of claim 4, the processor to:
load a subsequent transaction for execution.
6. The apparatus of claim 1, wherein:
a hardware element detects the page fault and reports the page fault in a memory queue.
7. The apparatus of claim 6, wherein the hardware element comprises a command streamer.
8. A method comprising:
dividing an execution thread of a graphics workload into a set of transactions which are to be executed atomically;
initiating the execution of the thread; and
managing the execution of the thread according to one of:
a first protocol in response to a determination that a page fault occurred in the execution of a transaction, or
a second protocol in response to a determination that a page fault did not occur in the execution of a transaction.
9. The method of claim 8, further comprising:
detecting a page fault in the execution of the transaction, and in response to the detection:
storing an execution state of the thread in memory.
10. The method of claim 9, further comprising:
generating a page fault signal for the transaction, the page fault signal comprising a thread identifier, a transaction identifier, a processor identifier, and a virtual function unit; and
discarding any work performed on the transaction.
11. The method of claim 10, further comprising:
initiating execution of a new thread; and
queueing the transaction for execution after the page fault is resolved.
12. The method of claim 11 , further comprising:
loading a subsequent transaction for execution.
13. The method of claim 8, wherein:
a hardware element detects the page fault and reports the page fault in a memory queue.
14. The method of claim 13, wherein the hardware element comprises a
command streamer.
15. One or more non-transitory computer-readable medium comprising one or more instructions that when executed on at least one processor configure the at least one processor to perform one or more operations to:
divide an execution thread of a graphics workload into a set of transactions which are to be executed atomically;
initiate the execution of the thread; and
manage the execution of the thread according to one of:
a first protocol in response to a determination that a page fault occurred in the execution of a transaction, or
a second protocol in response to a determination that a page fault did not occur in the execution of a transaction.
16. The computer-readable medium of claim 15, comprising one or more
instructions that when executed on the at least one processor configure the at least one processor to:
detect a page fault in the execution of the transaction, and in response to the detection, to:
store an execution state of the thread in memory.
17. The computer-readable medium of claim 16, comprising one or more
instructions that when executed on the at least one processor configure the at least one processor to:
generate a page fault signal for the transaction, the page fault signal comprising a thread identifier, a transaction identifier, a processor identifier, and a virtual function unit; and
discard any work performed on the transaction.
18. The computer-readable medium of claim 17, comprising one or more
instructions that when executed on the at least one processor configure the at least one processor to:
initiate execution of a new thread; and
queue the transaction for execution after the page fault is resolved.
19. The computer-readable medium of claim 18, comprising one or more
instructions that when executed on the at least one processor configure the at least one processor to:
load a subsequent transaction for execution.
20. The computer-readable medium of claim 19, wherein:
a hardware element detects the page fault and reports the page fault in a memory queue.
21. The computer-readable medium of claim 20, wherein the hardware element comprises a command streamer.
</claims>
</document>
