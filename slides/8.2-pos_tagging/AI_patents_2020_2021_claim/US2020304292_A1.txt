<document>

<filing_date>
2020-06-04
</filing_date>

<publication_date>
2020-09-24
</publication_date>

<priority_date>
2020-05-18
</priority_date>

<ipc_classes>
G06N3/10,H04L9/06,H04L9/08,H04L9/32
</ipc_classes>

<assignee>
Mochalov, Timofey
</assignee>

<inventors>
Mochalov, Timofey
</inventors>

<docdb_family_id>
71614751
</docdb_family_id>

<title>
METHOD FOR PROTECTING DATA TRANSFER USING NEURAL CRYPTOGRAPHY
</title>

<abstract>
A method of encryption and decryption of data over a network using an artificial neural network installed on each node of the network. The data protection elements—encryption keys, encryption algorithms, and encryption obfuscation—are generated or selected, respectively, at a new instance of communication across the network and no data protection elements are transmitted across the network. The artificial neural network is trained on a blockchain with the addition of each new block to the blockchain and is used to generate a finite set of encryption keys at each node simultaneously. Such encryption keys, encryption algorithms and encryption obfuscation are associated with the neural network on each node and are then used for decryption of the transmitted data.
</abstract>

<claims>
1. A computer implemented method of encryption and decryption of data over a network comprising network nodes wherein artificial neural network is used characterized in that the method comprises: storing copies of artificial neural network at least on a client computer device of a first node, client computer device of at least one other node and on at least one network server node of the network; sending a set of input parameters from the at least one network server node to the client computer device of the first node and at least one other node; synchronizing the artificial neural network at each node using input parameters; creating encryption keys using an artificial neural network and input parameters at each node of the network; creating a set of output parameters using an artificial neural network, blockchain data and encryption keys; selecting an encryption algorithm using an artificial neural network and output parameters; selecting a type of encryption obfuscation using an artificial neural network and output parameters; synchronizing encryption keys, encryption algorithms and encryption obfuscation at each node of the network; encrypting data using encryption keys, selected encryption algorithm, and selected encryption obfuscation; transmitting encrypted data from the first client computer device to the at least one network server; decrypting the data using encryption keys, selected encryption algorithm, and selected encryption obfuscation at the server; re-encrypting with other parameters such as encryption algorithm, another encryption key, encryption obfuscation at the server; transmitting re-encrypted data to a final receiver node; computing a new block of a blockchain at the at least one server node of the network; transmitting an updated blockchain from the at least one server node to the first node and each other node of the network; retraining the artificial neural network at each node of the of the network using an updated blockchain.
2. The method of claim 1 wherein a network is the Internet or a local network.
3. The method of claim 1 wherein one of the at least two sets of input parameters is randomly generated.
4. The method of claim 1 wherein one of the at least two sets of input parameters is a unique 256-512 bit key, X509 certificate, or both.
5. The method of claim 1 wherein encryption keys are created on the first node and at least one other node simultaneously.
6. The method of claim 1 wherein an encryption algorithm is a symmetric encryption algorithm.
7. The method of claim 6 wherein an encryption algorithm is selected from AES 256, 3DES, ChaCha, Salsa 20, Blowfish, Twofish, DES, Kuznechik and others.
8. The method of claim 1 wherein an encryption key is not transmitted over the network.
9. The method of claim 1 wherein data transmission is in the form of centralized star-type data transmission.
10. The method of claim 1 wherein the artificial neural network is trained on a blockchain.
11. The method of claim 10 wherein an encryption key is not stored on a blockchain.
12. The method of claim 10 wherein no artificial neural network elements are stored on a blockchain.
</claims>
</document>
