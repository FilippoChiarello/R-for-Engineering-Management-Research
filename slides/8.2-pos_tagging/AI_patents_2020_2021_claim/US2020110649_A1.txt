<document>

<filing_date>
2019-12-11
</filing_date>

<publication_date>
2020-04-09
</publication_date>

<priority_date>
2017-07-25
</priority_date>

<ipc_classes>
B60W50/02,B60W50/04,G06F11/07,G06F11/14,G06F11/16,G06F11/36,G06F12/02,G06F12/06,G06F16/188,G06F21/57,G06F8/60,G06F8/65,G06F8/654,G06F8/656,G06F8/658,G06F8/71,G06F9/4401,G06F9/445
</ipc_classes>

<assignee>
AURORA LABS
</assignee>

<inventors>
FOX, ZOHAR
</inventors>

<docdb_family_id>
65037881
</docdb_family_id>

<title>
DETECTING ANOMALIES ONLINE USING HISTOGRAMS OF CONTROLLER PROCESSING ACTIVITY
</title>

<abstract>
Disclosed embodiments relate to identifying Electronic Control Unit (ECU) anomalies in a vehicle. Operations may include monitoring, in the vehicle, data representing real-time processing activity of the ECU; accessing, in the vehicle, historical data relating to processing activity of the ECU, the historical data representing expected processing activity of the ECU; comparing, in the vehicle, the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the ECU; and implementing a control action for the ECU when the at least one anomaly is identified.
</abstract>

<claims>
1. 1-20. (canceled)
21. A non-transitory computer readable medium including instructions that, when executed by at least one processor, cause the at least one processor to perform operations for identifying controller anomalies, comprising: monitoring data representing real-time processing activity of a first controller; accessing historical data relating to processing activity of the controller, the historical data comprising data from a second controller; comparing the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the first controller; and implementing a control action for the first controller when the at least one anomaly is identified; wherein software on the first controller is mapped to a plurality of functional units associated with a virtual file system.
22. The non-transitory computer readable medium of claim 21, wherein the control action comprises issuing a prompt to adjust the first controller from executing a first version of controller software to a second version of controller software.
23. The non-transitory computer readable medium of claim 21, further comprising determining a third controller that is interdependent on the first controller, and wherein the control action further comprises issuing a prompt to adjust the third controller from executing a first version of controller software to a second version of controller software.
24. The non-transitory computer readable medium of claim 23, wherein adjusting the third controller from executing the first version of controller software to the second version of controller software includes using a delta file corresponding to the second version of controller software.
25. The non-transitory computer readable medium of claim 24, wherein the delta file is a multidimensional delta file.
26. The non-transitory computer readable medium of claim 25, wherein the multidimensional delta file comprises at least one of: a binary data dimension, a source attribute dimension, or a map file dimension.
27. The non-transitory computer readable medium of claim 23, wherein the second version of controller software is deployed subsequent to the first version of controller software.
28. The non-transitory computer readable medium of claim 23, wherein the second controller is a controller determined to be comparable to the first controller.
29. The non-transitory computer readable medium of claim 21, wherein the historical data is based on a machine-learning model or map.
30. The non-transitory computer readable medium of claim 21, wherein the software on the first controller includes position-independent code, and the first controller is configured to utilize the position-independent code without requiring modification to the software.
31. A system for identifying controller anomalies, the system comprising: one or more processors; and one or more memories having instructions that, when executed by the one or more processors, cause the one or more processors to perform operations comprising: monitoring data representing real-time processing activity of a first controller; accessing historical data relating to processing activity of the first controller, the historical data comprising data from a second controller; comparing the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the first controller; and implementing a control action for the first controller when the at least one anomaly is identified; wherein software on the first controller is mapped to a plurality of functional units associated with a virtual file system.
32. The system of claim 31, wherein the control action comprises issuing a prompt to adjust the first controller from executing a first version of controller software to a second version of controller software.
33. The system of claim 31, the operations further comprising determining a third controller that is interdependent on the first controller, and wherein the control action further comprises issuing a prompt to adjust the third controller from executing a first version of controller software to a second version of controller software.
34. The system of claim 32, wherein adjusting the third controller from executing the first version of controller software to the second version of controller software includes using a delta file corresponding to the second version of controller software.
35. The system of claim 34, wherein the delta file is a multidimensional delta file.
36. The system of claim 35, wherein the multidimensional delta file comprises at least one of: a binary data dimension, a source attribute dimension, or a map file dimension.
37. The system of claim 32, wherein the second version of controller software is deployed subsequent to the first version of controller software.
38. The system of claim 32, wherein the second controller is a controller determined to be comparable to the first controller.
39. The system of claim 31, wherein the software on the first controller includes position-independent code, and the first controller is configured to utilize the position-independent code without requiring modification to the software.
40. A computer-implemented method for identifying controller anomalies, the method comprising: monitoring data representing real-time processing activity of a first controller; accessing historical data relating to processing activity of the first controller, the historical data comprising data from a second controller; comparing the real-time processing activity data with the historical data, to identify at least one anomaly in the real-time processing activity of the first controller; and implementing a control action for the first controller when the at least one anomaly is identified; wherein software on the controller is mapped to a plurality of functional units associated with a virtual file system.
</claims>
</document>
