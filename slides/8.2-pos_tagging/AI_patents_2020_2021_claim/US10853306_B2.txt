<document>

<filing_date>
2012-08-02
</filing_date>

<publication_date>
2020-12-01
</publication_date>

<priority_date>
2011-08-02
</priority_date>

<ipc_classes>
G06F15/167,H04L29/08
</ipc_classes>

<assignee>
JADHAV, AJAY
</assignee>

<inventors>
JADHAV, AJAY
</inventors>

<docdb_family_id>
47629674
</docdb_family_id>

<title>
Cloud-based distributed persistence and cache data model
</title>

<abstract>
A distributed cache data system includes a cache adapter configured to reserve a designated portion of memory in at least one node in a networked cluster of machines as a contiguous space. The designated portion of memory forms a cache and the designated portion of memory includes data cells configured to store data. The cache adapter is configured to interface with the data and a distributed file system and the cache adapter is further configured to provide an interface for external clients to access the data. The cache adapter is configured to communicate to clients via a web server, and the cache adapter is further configured to direct data access requests to appropriate the data. A related process of distributing cache data is disclosed as well.
</abstract>

<claims>
1. A process for distributing cache data in a data system comprising: reserving with a cache adapter a designated portion of memory in at least two nodes in a distributed file system comprising clustered nodes to form a contiguous memory space spanning across the clustered nodes, wherein each node comprises a plurality of data cells capable of storing data in an unstructured or structured format; embedding a lightweight application server comprising an application code within the cache adapter; interfacing a client cache at a front-end of the cloud data system and a distributed file system at a back-end of the data system with the cache adapter, wherein the distributed file system bi-directionally synchronizes with the client cache; providing an interface for external clients at the front-end of the data system to access the data with the cache adapter; communicating bi-directionally to the external clients via a web server with the cache adapter, wherein the cache adapter comprises data cells configured to store data in a relational database table format; the cache adapter is configured to move data between the data cells in the cache adaptor and the distributed file system, wherein the data is persisted in the distributed file system; the cache adapter is configured to create at least one instance that has an upper limit in size, wherein when the instance reaches the upper limit, the cache adapter automatically creates a new instance; the cache adapter further comprising a storage map comprising a directory of a plurality of instances and a plurality of UserIDs stored on each instance, analyzing, by the lightweight application server, an incoming request of a user to determine an UserID; and based on the UserID and the Storage map, sending the incoming request to a data cell that contains all user related data for the user, receiving a response from the data cell and transmitting the response to the front-end client cache; and the lightweight application server acts as a controller and is configured to ship the application code to a location of the data.
2. The process according to claim 1, further comprising interfacing the client cache and the distributed file system using java database connectivity.
3. The process according to claim 1, further comprising lightweight application server accessing the data that resides on the distributed file system directly.
4. A distributed cache data system comprising: a front-end client cache residing on a client machine; a back-end distributed file system comprising data cells capable of storing data in an unstructured format in clustered nodes, wherein each node comprises a plurality of data cells capable of storing data in an unstructured or structured format; a cache adapter comprising data cells capable of storing data in a structured format residing in the clustered nodes wherein the cache adapter is configured to reserve a designated portion of memory in at least two nodes to form a contiguous memory space spanning across the clustered nodes; and a lightweight application server comprising an application code embedded within the cache adapter; wherein the cache adapter comprises data cells configured to store data in a relational database table format; the cache adapter is configured to move data between the data cells in the cache adaptor and the distributed file system, wherein the data is persisted in the distributed file system; the cache adapter is configured to interface with the client cache at the front-end of the distributed cache data system and a distributed file system at the back-end of the distributed cache data system, wherein the distributed file system bi-directionally synchronizes with the client cache; the cache adapter is configured to provide an interface for external clients at the front-end of the distributed cache data system to access the data; the cache adapter is configured to bi-directionally communicate to the external clients via a web server, the cache adapter is configured to create at least one instance that has an upper limit in size, wherein when the instance reaches the upper limit, the cache adapter automatically creates a new instance; the cache adapter further comprising a storage map comprising a directory of a plurality of instances and a plurality of UserIDs stored on each instance, the lightweight application server is configured to analyze an incoming request of a user to determine an UserID; and based on the UserID and the Storage map, send the incoming request to a data cell that contains all user related data for the user, receive a response from the data cell and transmit the response to the front-end client cache; and the lightweight application server acts as a controller and is configured to ship the application code to a location of the data.
5. The distributed cache data system according to claim 4, wherein the cache adapter is configured to interface with the client cache and the distributed file system using a java database connectivity interface.
6. The distributed cache data system according to claim 4, wherein the lightweight application server is configured to access the data that resides on the distributed file system directly.
7. The distributed cache data system according to claim 4, wherein the cache adapter is configured, upon a request for data from the client cache, to first check if the data is available within the cache, if the cache does have the requested data, the cache serves out the data from the cache; and if the data does not exist within the cache, the cache adapter retrieves the data from the distributed file system and then either sends out the requested data directly to the client cache or caches the data in the cache adapter before sending the data to the client cache.
8. The distributed cache data system according to claim 4, wherein the cache adapter is configured to store and retrieve the data in a structured relational data format, then convert the data to one of a distributed file system and an intermediary database that is unstructured; and the cache adapter is further configured on a return route to convert the unstructured data from a distributed file system, or the intermediary database, into a cache compliant format.
9. The distributed cache data system according to claim 4, wherein the client cache comprises a mobile device specific application or an HTML application client.
10. The distributed cache data system according to claim 9, wherein the client cache comprises a presentation layer, a client database, and a persistent socket connection to the cache adapter.
11. The distributed cache data system according to claim 4, wherein the cache sits in the at least one node on top of a distributed file system.
12. The distributed cache data system according to claim 4, wherein the cache adapter creates a unique instance of cache for each user which functions as a relational database with a SQL interface for applications interfacing with the cache adapter.
13. The distributed cache data system according to claim 4, wherein the cache adapter resides in front of the distributed file system.
14. The distributed cache data system according to claim 4, wherein the cache is a contiguous space that stretches across all designated portions of the networked cluster of machines described within a configuration file.
15. The distributed cache data system according to claim 4, wherein the data cells of the at least two nodes in the cache adapter are not communicating directly with the client cache.
16. The distributed cache data system according to claim 4, wherein each data cell contains multiple data tables for single or multiple users.
17. The distributed cache data system according to claim 4, wherein an adapter process framework is configured to convert the data from one format to the other on requirements of a functional call.
</claims>
</document>
