<document>

<filing_date>
2019-06-14
</filing_date>

<publication_date>
2020-12-17
</publication_date>

<priority_date>
2019-06-14
</priority_date>

<ipc_classes>
G06F16/2453,G06F16/28
</ipc_classes>

<assignee>
ORACLE INTERNATIONAL CORPORATION
</assignee>

<inventors>
BRANTNER, MATTHIAS
SCHLEGEL, BENJAMIN
FENDER, PIT
</inventors>

<docdb_family_id>
73745088
</docdb_family_id>

<title>
NON-DISRUPTIVE REFERENCING OF SPECIAL PURPOSE OPERATORS FOR DATABASE MANAGEMENT SYSTEMS
</title>

<abstract>
Approaches herein transparently delegate data access from a relational database management system (RDBMS) onto an offload engine (OE). The RDBMS receives a database statement referencing a user defined function (UDF). In an execution plan, the RDBMS replaces the UDF reference with an invocation of a relational operator in the OE. Execution invokes the relational operator in the OE to obtain a result based on data in the OE. Thus, the UDF is bound to the OE, and almost all of the RDBMS avoids specially handling the UDF. The UDF may be a table function that offloads a relational table for processing. User defined objects such as functions and types provide metadata about the table. Multiple tables can be offloaded and processed together, such that some or all offloaded tables are not materialized in the RDBMS. Offloaded tables may participate in standard relational algebra such as in a database statement.
</abstract>

<claims>
1. A method comprising: receiving a database statement that contains a reference to a user defined function (UDF) in a relational database management system (RDBMS); generating, based on the database statement, an execution plan that contains said reference to the UDF; replacing, in the execution plan, the reference to the UDF with an invocation of a relational operator in an offload engine; executing the execution plan to invoke the relational operator in the offload engine to obtain a result based on data in the offload engine; processing, by the RDBMS, said result based on said data in the offload engine.
2. The method of claim 1 wherein said result based on said data in the offload engine comprises: a table, an aggregation, or a scalar.
3. The method of claim 1 wherein the relational operator performs: decoding or encoding said data in the offload engine into said result, and/or encoding or decoding second data for persisting by the offload engine.
4. The method of claim 1 wherein: the offload engine comprises a plurality of computers; executing the execution plan comprises accessing a respective portion of said data on each computer of the plurality of computers.
5. The method of claim 4 wherein said obtain said result comprises the relational operator encodes said respective portion of said data on each computer based on an identity of said each computer.
6. The method of claim 1 wherein a primary purpose of the relational operator is garbage collection and/or table version management.
7. The method of claim 1 wherein the UDF is: automatically generated, a window function, and/or a member of a user defined type that mediates access to said data in the offload engine.
8. The method of claim 1 wherein the relational operator performs: sparse dictionary encoding, sparse dictionary decoding, and/or creation of an encoding dictionary whose keys are unordered.
9. The method of claim 1 wherein: the database statement comprises an expression that comprises a second reference to same said UDF or to a second UDF; said executing the execution plan comprises sending a translation of the expression to the offload engine.
10. The method of claim 1 further comprising: second receiving same said database statement; second executing, not based on same said execution plan, by the RBMS and/or the offload engine, same said database statement without invoking same said relational operator in the offload engine.
11. One or more non-transitory machine-readable media storing instructions that, when executed by one or more processors, cause: receiving a database statement that contains a reference to a user defined function (UDF) in a relational database management system (RDBMS); generating, based on the database statement, an execution plan that contains said reference to the UDF; replacing, in the execution plan, the reference to the UDF with an invocation of a relational operator in an offload engine; executing the execution plan to invoke the relational operator in the offload engine to obtain a result based on data in the offload engine; processing, by the RDBMS, said result based on said data in the offload engine.
12. The one or more non-transitory machine-readable media of claim 11 wherein said result based on said data in the offload engine comprises: a table, an aggregation, or a scalar.
13. The one or more non-transitory machine-readable media of claim 11 wherein the instructions cause the relational operator to perform: decoding or encoding said data in the offload engine into said result, and/or encoding or decoding second data for persisting by the offload engine.
14. The one or more non-transitory machine-readable media of claim 11 wherein: the offload engine comprises a plurality of computers; executing the execution plan comprises accessing a respective portion of said data on each computer of the plurality of computers.
15. The one or more non-transitory machine-readable media of claim 14 wherein said obtain said result comprises the relational operator encodes said respective portion of said data on each computer based on an identity of said each computer.
16. The one or more non-transitory machine-readable media of claim 11 wherein a primary purpose of the relational operator is garbage collection and/or table version management.
17. The one or more non-transitory machine-readable media of claim 11 wherein the UDF is: automatically generated, a window function, and/or a member of a user defined type that mediates access to said data in the offload engine.
18. The one or more non-transitory machine-readable media of claim 11 wherein the instructions cause the relational operator to perform: sparse dictionary encoding, sparse dictionary decoding, and/or creation of an encoding dictionary whose keys are unordered.
19. The one or more non-transitory machine-readable media of claim 11 wherein: the database statement comprises an expression that comprises a second reference to same said UDF or to a second UDF; said executing the execution plan comprises sending a translation of the expression to the offload engine.
20. The one or more non-transitory machine-readable media of claim 11 wherein the instructions further cause: second receiving same said database statement; second executing, not based on same said execution plan, by the RBMS and/or the offload engine, same said database statement without invoking same said relational operator in the offload engine.
</claims>
</document>
