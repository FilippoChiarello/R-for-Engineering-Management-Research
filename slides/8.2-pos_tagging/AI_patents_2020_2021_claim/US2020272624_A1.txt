<document>

<filing_date>
2019-02-22
</filing_date>

<publication_date>
2020-08-27
</publication_date>

<priority_date>
2019-02-22
</priority_date>

<ipc_classes>
G06F16/2458,G06F16/248,G06F16/27,G06F16/901,G06N20/00
</ipc_classes>

<assignee>
GE (GENERAL ELECTRIC COMPANY)
</assignee>

<inventors>
AGGOUR, KAREEM, SHERIF
CUDDIHY, PAUL
VINCIQUERRA, ANTHONY JOSEPH
KUMAR, VIJAY SHIV
WILLIMAS, JENNY MARIE WEISENBERG
</inventors>

<docdb_family_id>
69631426
</docdb_family_id>

<title>
KNOWLEDGE-DRIVEN FEDERATED BIG DATA QUERY AND ANALYTICS PLATFORM
</title>

<abstract>
A system to query a federated store containing disparate data types and stores, the system including a UI or API to specify query details, a metadata knowledge graph with metadata describing the contents of the data stores, the relationships among them, and how to programmatically query the data stores, a predefined constrainable query ('nodegroup') store containing nodegroups providing a template to search the data stores, the querying layer including services and libraries to process nodegroups and generate a set of queries, a query and analysis platform providing the set of queries to at least one data store for execution at the federated stores and return a result, a scalable analytic execution layer applying machine learning/artificial intelligence techniques to analyze the query results and presenting data analysis result visualizations. A method and a non-transitory medium are also disclosed.
</abstract>

<claims>
1. A system for generating and running federated queries against a plurality of data stores storing disparate data types, the system comprising: a user interface experience layer presenting an interactive user interface to receive query details from a data consumer; a metadata knowledge graph store including a metadata knowledge graph, the metadata knowledge graph containing metadata for links and relationships of data in one or more of the plurality of data stores, and metadata on how to programmatically query one or more of the plurality of data stores; a nodegroup store including a library of use case and domain-specific predefined constrainable queries; a knowledge-driven querying layer including services and libraries to process nodegroups, including to determine a division between semantic and non-semantic data within the nodegroup; the knowledge-driven querying layer configured to generate a set of queries from the selected nodegroups; a query and analysis platform configured to provide the set of queries to the federated data store, one or more of the plurality of data stores executing at the federated data store at least one of the set of queries and returning a result to the query and analysis platform; a scalable analytic execution layer configured to receive the search results executed at the federated data store and to apply machine learning and artificial intelligence techniques to the search results, the machine learning and artificial intelligence techniques to analyze the query results; and the query and analysis platform configured to present visualizations of the analytic results to the data consumer.
2. The system of claim 1, each of the nodegroups representing a subgraph of interest containing a set of classes and an identifier.
3. The system of claim 1, each of the nodegroups including a list of properties that are at least one of returnable or constrainable for a set of classes contained in the nodegroup.
4. The system of claim 1, each of the nodegroups including an identifier used to generate search queries that perform constraints for a set of classes contained in the nodegroup.
5. The system of claim 1, each of the nodegroups including properties that link at least one class of a set of classes contained in the nodegroup to one or more other of the set of classes.
6. The system of claim 1, each of the nodegroups including a template designed to query a different part of a domain-specific ontology.
7. The system of claim 1, each of the nodegroups including information to generate a list of filter values to include in the set of queries.
8. The system of claim 1, each of the nodegroups including a pathfinding functionality to locate and add information specific to particular data types within a particular data store of the plurality of data stores to identify external services required to execute one or more of the set of queries at the federated data store.
9. A method of generating and running federated queries against a plurality of data stores storing disparate data types, the method comprising: receiving query details from a data consumer; providing a metadata knowledge graph containing metadata for links and relationships of data in one or more of the plurality of data stores, and metadata on how to programmatically query one or more of the plurality of data stores; providing in a nodegroup store a library of use case and domain-specific predefined constrainable queries the nodegroups providing a template to search at least one of the plurality of data stores; processing nodegroups using services and libraries in a knowledge-driven querying layer to determine a division between semantic and non-semantic data; generating a set of queries from the selected nodegroups; executing at the federated data store the set of queries and returning a result to an analysis platform located in a layer remote from the federated data store; applying machine learning and artificial intelligence techniques to the search results, the machine learning and artificial intelligence techniques to analyze the query results; and presenting visualizations of the analytic results to the data consumer.
10. The method of claim 9, providing each of the nodegroups with a set of classes and an identifier representing a subgraph of interest.
11. The method of claim 9, providing each of the nodegroups with a list of properties that are returnable or constrainable for a set of classes contained in the nodegroup.
12. The method of claim 9, providing each of the nodegroups with an identifier used to generate search queries that perform constraints for a set of classes contained in the nodegroup.
13. The method of claim 9, providing each of the nodegroups with properties that link at least one class of a set of classes contained in the nodegroup to one or more other of the set of classes.
14. The method of claim 9, providing each of the nodegroups with a template designed to query a different part of a domain-specific ontology.
15. The method of claim 9, providing each of the nodegroups with information to generate a list of filter values to include in the set of queries.
16. The method of claim 9, providing each of the nodegroups with a pathfinding functionality to locate and add information specific to particular data types within a particular data store of the plurality of data stores to identify external services required to execute one or more of the set of queries at the federated data store.
17. A non-transitory computer-readable medium having stored thereon executable instructions when executed by a processor unit cause the processor unit to perform a method of generating and running federated queries against a plurality of data stores storing disparate data types, the method comprising: receiving query details from a data consumer; providing a metadata knowledge graph containing metadata for links and relationships of data in one or more of the plurality of data stores, and metadata on how to programmatically query one or more of the plurality of data stores; providing in a nodegroup store a library of use case and domain-specific predefined constrainable queries the nodegroups providing a template to search at least one of the plurality of data stores; processing nodegroups using services and libraries in the knowledge-driven querying layer to determine a division between semantic and non-semantic data; generating a set of queries from the selected nodegroups; executing at the federated data store the set of queries and returning a result to a query and analysis platform located in a layer remote from the federated data store; applying machine learning and artificial intelligence techniques to the search results, the machine learning and artificial intelligence techniques to analyze the query results; and presenting visualizations of the analytic results to the data consumer.
18. The non-transitory computer-readable medium of claim 17, the executable instructions further configured to cause the processor unit to perform the method, including, providing each of the nodegroups with a set of classes and an identifier representing a subgraph of interest.
19. The non-transitory computer-readable medium of claim 17, the executable instructions further configured to cause the processor unit to perform the method, including, providing each of the nodegroups with a list of properties that are returnable or constrainable for a set of classes contained in the nodegroup.
20. The non-transitory computer-readable medium of claim 17, the executable instructions further configured to cause the processor unit to perform the method, including: providing each of the nodegroups with a template designed to query a different part of a domain-specific ontology; and providing each of the nodegroups with a pathfinding functionality to locate and add information specific to particular data types within a particular data store of the plurality of data stores to identify external services required to execute one or more of the set of queries at the federated data store.
</claims>
</document>
