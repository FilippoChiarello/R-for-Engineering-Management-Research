<document>

<filing_date>
2019-06-27
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-27
</priority_date>

<ipc_classes>
G06F11/30,G06F11/34,G06F11/36,G06F9/54
</ipc_classes>

<assignee>
CAPITAL ONE SERVICES
</assignee>

<inventors>
BARNUM, ERIC K.
BALASUBRAMANIAN, MURALIDHARAN
WATSON, DAVID
DALLEN, JULIE
</inventors>

<docdb_family_id>
74044536
</docdb_family_id>

<title>
TESTING AGENT FOR APPLICATION DEPENDENCY DISCOVERY, REPORTING, AND MANAGEMENT TOOL
</title>

<abstract>
Techniques for monitoring operating statuses of an application and its dependencies are provided. A monitoring application may collect and report the operating status of the monitored application and each dependency. Through use of existing monitoring interfaces, the monitoring application can collect operating status without requiring modification of the underlying monitored application or dependencies. The monitoring application may determine a problem service that is a root cause of an unhealthy state of the monitored application. Dependency analyzer and discovery crawler techniques may automatically configure and update the monitoring application. Machine learning techniques may be used to determine patterns of performance based on system state information associated with performance events and provide health reports relative to a baseline status of the monitored application. Also provided are techniques for testing a response of the monitored application through modifications to API calls. Such tests may be used to train the machine learning model.
</abstract>

<claims>
1. A computer-implemented method comprising: receiving a user command indicating a start of a testing period; intercepting, by a testing agent, a first call in a computing system from a first application to a first Application Programming Interface (API) during the testing period; modifying, by the testing agent, the first call by mutating at least one attribute of the first call, wherein the mutation to the at least one attribute causes the first call to fail; causing the computing system to process the modified first call and return a result to the first application based on the mutation to the at least one attribute; and determining an impact of the modified first call on the operating status of the first application, wherein a second call to the first API is unaffected by mutating the at least one attribute of the first call.
2. The method of claim 1, wherein the mutation to the at least one attribute comprises a change to a function name associated with the first API.
3. The method of claim 1, wherein the mutation to the at least one attribute comprises a change to a parameter included in the first call.
4. The method of claim 1, wherein the mutation to the at least one attribute comprises a change to a destination, container, or scope associated with the first API.
5. The method of claim 1, wherein determining the impact of the modified first call on the operating status of the first application comprises: determining, by a monitoring application, the operating status of the first application using one or more monitoring interfaces; and determining that the first application has an unhealthy operating status based on at least one metric provided by a first monitoring interface associated with the first application satisfying at least one unhealthy operating status threshold.
6. The method of claim 1, further comprising: caching, by the testing agent, the unmodified first call; determining, by a monitoring application, whether the first application was able to recover from the modified first call returning a failed result; and based on determining that the first application was not able to recover, causing the computing system to process the cached unmodified first call and return a result to the first application based on the at least one attribute.
7. The method of claim 6, wherein the first application is determined to have been able to recover when the monitoring application determines that the first application was able to retrieve information associated with the first API from another source.
8. The method of claim 6, wherein the first application is determined to have been able to recover when the monitoring application determines that the first application was able to partially complete processing despite not receiving the information requested from the first API.
9. The method of claim 1, wherein intercepting the first call to the first API is based on determining that the first API is a dependency of the first application.
10. The method of claim 1, wherein the testing agent is part of a monitoring application configured to monitor the first application using a plurality of monitoring interfaces, wherein intercepting the first call to the first API is based on determining that the monitoring application is configured to monitor the first API.
11. A computer-implemented method comprising: receiving a user command indicating a start of a testing period; intercepting, by a testing agent, a first call in a computing system from a first application to a first Application Programming Interface (API) during the testing period; causing the computing system to process the intercepted first call and return a modified result to the first application, wherein the modified result simulates an unhealthy operating status of the first API; and determining an impact of the modified result to the first call on the operating status of the first application, wherein a second call to the first API is unaffected by modifying the result of the first call.
12. The method of claim 11, wherein the modified result simulates an unhealthy operating status of the first API by simulating a result with an artificially high response latency.
13. The method of claim 11, wherein the modified result simulates an unhealthy operating status of the first API by simulating a result with an artificially high error rate.
14. The method of claim 11, wherein the modified result simulates an unhealthy operating status of the first API by simulating a result with an artificially high likelihood of non-response.
15. The method of claim 11, wherein determining the impact of the modified result on the operating status of the first application comprises: determining, by a monitoring application, the operating status of the first application using one or more monitoring interfaces; and determining that the first application has an unhealthy operating status based on at least one metric provided by a first monitoring interface associated with the first application satisfying at least one unhealthy operating status threshold.
16. The method of claim 11, further comprising: caching, by the testing agent, the first call; determining, by a monitoring application, whether the first application was able to recover from the modified result to the first call; and based on determining that the first application was not able to recover, causing the computing system to process the cached first call and return an unmodified result to the first application.
17. The method of claim 16, wherein the first application is determined to have been able to recover when the monitoring application determines that the first application was able to retrieve information associated with the first API from another source.
18. The method of claim 16, wherein the first application is determined to have been able to recover when the monitoring application determines that the first application was able to partially complete processing despite not receiving the information requested from the first API.
19. A computer-implemented method comprising: receiving a user command indicating a start of a testing period; intercepting, by a testing agent, a first call in a computing system from a first application to a first Application Programming Interface (API) during the testing period; caching, by the testing agent, the unmodified first call; modifying, by the testing agent, the first call by mutating at least one attribute of the first call, wherein the mutation to the at least one attribute causes the first call to fail; causing the computing system to process the modified first call and return a result to the first application based on the mutation to the at least one attribute; and determining, by a monitoring application and using one or more monitoring interfaces, whether the first application was able to recover from the modified first call returning a failed result; and based on determining that the first application was not able to recover, causing the computing system to process the cached unmodified first call and return a result to the first application based on the at least one attribute, wherein a second call to the first API is unaffected by mutating the at least one attribute of the first call.
20. The method of claim 19, wherein the mutation to the at least one attribute comprises at least one of: a change to a function name associated with the first API; a change to a parameter included in the first call; or a change to a destination, container, or scope associated with the first API.
</claims>
</document>
