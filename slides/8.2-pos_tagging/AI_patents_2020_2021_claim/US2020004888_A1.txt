<document>

<filing_date>
2018-07-02
</filing_date>

<publication_date>
2020-01-02
</publication_date>

<priority_date>
2018-07-02
</priority_date>

<assignee>
PALO ALTO RESEARCH CENTER
</assignee>

<inventors>
ROSSI, RYAN A.
ZHOU, RONG
</inventors>

<docdb_family_id>
69055165
</docdb_family_id>

<title>
SYSTEM AND METHOD FOR A GRAPH SEARCH ENGINE
</title>

<abstract>
One embodiment provides a system for facilitating a graph search engine. During operation, the system receives, by a server from a client computing device, a search request which includes a user-inputted graph. The system performs a search based on a structure of the user-inputted graph for a plurality of relevant graphs. The system orders the plurality of relevant graphs from a most relevant ranking to a least relevant ranking. The system returns, to the client computing device, the ordered plurality of relevant graphs for display on a user interface of the client computing device, thereby enhancing the search for relevant graphs by allowing the graph search engine to take as an input the user-inputted graph and return as an output the relevant graphs.
</abstract>

<claims>
1. A computer-implemented method for facilitating a graph search engine, the method comprising: receiving, by a server from a client computing device, a search request which includes a user-inputted graph; performing a search based on a structure of the user-inputted graph for a plurality of relevant graphs; ordering the plurality of relevant graphs from a most relevant ranking to a least relevant ranking; and returning, to the client computing device, the ordered plurality of relevant graphs for display on a user interface of the client computing device, thereby enhancing the search for relevant graphs by allowing the graph search engine to take as an input the user-inputted graph and return as an output the relevant graphs.
2. The method of claim 1, wherein performing the search is further based on one or more of: structural properties of the user-inputted graph; metadata associated with the user-inputted graph, wherein the metadata includes one or more of: unstructured metadata, which includes one or more of a description of data associated with the user-inputted graph, a type of the user-inputted graph, a type of a node or an edge in the user-inputted graph, and any text-based metadata; and semi-structured metadata; and user-defined constraints.
3. The method of claim 1, wherein performing the search is further based on one or more of: multiple levels of granularity, including one or more of: a macro or a global property of the user-inputted graph; and a micro or a local property of the user-inputted graph; and previously cached graphs which are obtained based on pre-computed properties.
4. The method of claim 1, wherein ordering the plurality of relevant graphs is based on a ranking function.
5. The method of claim 1, further comprising: defining a simple language based on mathematical notations and symbols for properties and values of a graph, wherein the search request indicates specific filters using the simple language; and prior to ordering the plurality of relevant graphs, filtering the plurality of relevant graphs based on the specific filters indicated in the search request.
6. The method of claim 1, further comprising: enhancing the performing of the search or the ordering of the plurality of relevant graphs based on one or more of: a representation learning technique; a normalization technique; a non-linear scaling technique; a weighting scheme; and a low-rank approximation technique.
7. The method of claim 1, further comprising: applying an online learning technique by including implicit or explicit relevancy feedback for the user-inputted graph as training examples; and updating a model associated with the user-inputted graph based on the relevancy feedback to improve the ordering of the plurality of relevant graphs over time.
8. The method of claim 1, further comprising: storing a predetermined number of the ordered plurality of relevant graphs based on a min-max heap; determining whether a specific graph is in the stored predetermined number of the ordered plurality of relevant graphs in an O(1) or a constant time; and inserting or deleting a graph from the stored predetermined number of the ordered plurality of relevant graphs in a time which is based on a logarithm of the predetermined number.
9. The method of claim 1, further comprising: in response to accessing, in an in-memory cache, a feature of a relevant graph or a result which includes an ordered plurality of relevant graphs: updating a weight associated with the feature or result to prevent the feature or result from being deleted from the in-memory cache.
10. The method of claim 1, wherein performing the search is further based on properties associated with the user-inputted graph, including one or more of: a type or a size of the user-inputted graph; a number of nodes; a number of edges; a density; a degree or a number of incident edges; an assortativity; a number of triangles; an average or a maximum clique; an average or a global clustering coefficient; a clique number; a maximum k-core; a temporal property; a spatial property; an attributed property; a labeled property; multiple types of properties; a heterogeneous property; and any property associated with a graph.
11. A computer system for facilitating a graph search engine, the computer system comprising: a processor; and a storage device storing instructions that when executed by the processor cause the processor to perform a method, the method comprising: receiving, by a server from a client computing device, a search request which includes a user-inputted graph; performing a search based on a structure of the user-inputted graph for a plurality of relevant graphs; ordering the plurality of relevant graphs from a most relevant ranking to a least relevant ranking; and returning, to the client computing device, the ordered plurality of relevant graphs for display on a user interface of the client computing device, thereby enhancing the search for relevant graphs by allowing the graph search engine to take as an input the user-inputted graph and return as an output the relevant graphs.
12. The computer system of claim 11, wherein performing the search is further based on one or more of: structural properties of the user-inputted graph; metadata associated with the user-inputted graph, wherein the metadata includes one or more of: unstructured metadata, which includes one or more of a description of data associated with the user-inputted graph, a type of the user-inputted graph, a type of a node or an edge in the user-inputted graph, and any text-based metadata; and semi-structured metadata; and user-defined constraints.
13. The computer system of claim 11, wherein performing the search is further based on one or more of: multiple levels of granularity, including one or more of: a macro or a global property of the user-inputted graph; and a micro or a local property of the user-inputted graph; and previously cached graphs which are obtained based on pre-computed properties.
14. The computer system of claim 1, wherein ordering the plurality of relevant graphs is based on a ranking function.
15. The computer system of claim 11, wherein the method further comprises: defining a simple language based on mathematical notations and symbols for properties and values of a graph, wherein the search request indicates specific filters using the simple language; and prior to ordering the plurality of relevant graphs, filtering the plurality of relevant graphs based on the specific filters indicated in the search request.
16. The computer system of claim 11, wherein the method further comprises: enhancing the performing of the search or the ordering of the plurality of relevant graphs based on one or more of: a representation learning technique; a normalization technique; a non-linear scaling technique; a weighting scheme; and a low-rank approximation technique.
17. The computer system of claim 11, wherein the method further comprises: applying an online learning technique by including implicit or explicit relevancy feedback for the user-inputted graph as training examples; and updating a model associated with the user-inputted graph based on the relevancy feedback to improve the ordering of the plurality of relevant graphs over time.
18. The computer system of claim 11, wherein the method further comprises: storing a predetermined number of the ordered plurality of relevant graphs based on a min-max heap; determining whether a specific graph is in the stored predetermined number of the ordered plurality of relevant graphs in an O(1) or a constant time; and inserting or deleting a graph from the stored predetermined number of the ordered plurality of relevant graphs in a time which is based on a logarithm of the predetermined number.
19. The computer system of claim 11, wherein the method further comprises: in response to accessing, in an in-memory cache, a feature of a relevant graph or a result which includes an ordered plurality of relevant graphs: updating a weight associated with the feature or result to prevent the feature or result from being deleted from the in-memory cache.
20. The computer system of claim 11, wherein performing the search is further based on properties associated with the user-inputted graph, including one or more of: a type or a size of the user-inputted graph; a number of nodes; a number of edges; a density; a degree or a number of incident edges; an assortativity; a number of triangles; an average or a maximum clique; an average or a global clustering coefficient; a clique number; a maximum k-core; a temporal property; a spatial property; an attributed property; a labeled property; multiple types of properties; a heterogeneous property; and any property associated with a graph.
</claims>
</document>
