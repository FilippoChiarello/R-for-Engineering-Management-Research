<document>

<filing_date>
2018-08-29
</filing_date>

<publication_date>
2020-10-14
</publication_date>

<priority_date>
2017-10-18
</priority_date>

<ipc_classes>
G06F21/56
</ipc_classes>

<assignee>
AO KASPERSKY LAB
</assignee>

<inventors>
ROMANENKO, ALEXEY M.
LOBACHEVA, EKATERINA M.
CHISTYAKOV, ALEXANDER S.
</inventors>

<docdb_family_id>
63449295
</docdb_family_id>

<title>
SYSTEM AND METHOD OF MANAGING COMPUTING RESOURCES FOR DETECTION OF MALICIOUS FILES BASED ON MACHINE LEARNING MODEL
</title>

<abstract>
The present disclosure provides a system for managing computer resources for detection of malicious files based on machine learning model. In one example, the system may comprise: a hardware processor configured to: form at least one behavior pattern on the basis of commands and parameters, calculate the convolution of the formed behavior pattern, calculate the degree of harmfulness the convolution and a model for detection of malicious files, manage the computing resources used to ensure the security of that computing device, based on the degree of harmfulness, wherein the degree of harmfulness is within a predetermined range of values and if the obtained degree of harmfulness of applications exceeds the predetermined threshold value, send a request to allocate additional resources of the computing device, otherwise send a request to free up previously allocated resources of the computing device.
</abstract>

<claims>
1. A system for managing computer resources for detection of malicious files comprising:
a hardware processor configured to: form (221) at least one behavior pattern (n) grouping selected commands (ci) with shared parameters (pi) selected from a created behavior log comprising a totality of executable commands from a file; apply (222) a convolution function on the at least one behavior pattern to obtain computed parameters; calculate (242) a degree of harmfulness on the basis of the obtained computed parameters using a model for detection of malicious files, wherein the degree of harmfulness is a number value characterizing the probability that malicious activity will be manifested by a time of computing said degree of harmfulness, and wherein the model for detection is a machine learning model, previously trained (232) using computed parameters of previous behavior patterns subjected to convolution, to output degrees of harmfulness; manage (243) computing resources used to ensure security of a computing device, based on the calculated degree of harmfulness, wherein the degree of harmfulness is within a predetermined range of values; and if the calculated degree of harmfulness of applications exceeds a predetermined threshold value, allocate additional resources available on the computing device for the detection of malicious files, otherwise free up previously allocated resources of the computing device.
2. The system according to claim 1, wherein the hardware processor is further configured to: intercept at least one command during execution of an application on the computing device or during emulation of the execution of the application on the computing device; determine for each intercepted command at least one parameter describing that command; form on the basis of the intercepted commands and the determined parameters the behavior log for that application; and analyze the behavior log to form the at least one behavior pattern.
3. The system according to any of claims 1 to 2, wherein the behavior log is a set of executable commands of an application, each of the executable commands corresponding to at least one parameter describing that command.
4. The system according to any of claims 1 to 3, wherein the hardware processor is further configured to calculate convolution using a predetermined convolution function as a basis, wherein an inverse convolution function of a result of the predetermined convolution function on all of the formulated behavior patterns has a degree of similarity with that behavior pattern which is greater than a given value.
5. The system according to any of claims 1 to 4, wherein the model for detection of malicious files has been previously trained by a method of machine learning on at least one safe file and malicious file.
6. The system according to claim 5, wherein the method of machine learning of the model of detection is one of a method of gradient boosting on decision-making trees, decision-making trees, kNN nearest neighbors, and support vectors.
7. The system according to claim 5, wherein the method of training the model of detection comprises a monotonic variation in the degree of harmfulness of an application dependent on the variation in the number of behavior patterns formulated on the basis of the analysis of the behavior log.
8. The system according to any of claims 1 to 7, wherein the hardware processor is further configured to manage the computing resources by at least: allocating additional computing resources provided to one or more applications being executed on the computing device; freeing up computing resources previously allocated and provided to the one or more applications being executed on the computing device; and managing of the security policies for working with computing resources by the one or more applications being executed on the computing device.
9. The system according to any of claims 1 to 8, wherein the hardware processor is further configured to: manage the computing resources using a model for management of computing resources.
10. The system according to claim 9, wherein the hardware processor is further configured to:
teach the model for management of computing resources, using machine learning, to use minimal computing resources.
11. The system according to claim 10, wherein the hardware processor is further configured to:
teach the model for detection of malicious files using machine learning, on the basis of an analysis of at least one created behavior log, wherein the machine learning is performed when, after performing a last management of resources, the calculated degree of harmfulness of an application proves to be higher than the predetermined threshold value.
12. A method for managing computer resources for detection of malicious files comprising: forming (221) at least one behavior pattern (n) grouping selected commands (ci) with shared parameters (pi) from a created behavior log comprising a totality of executable commands from a file; apply (222) a convolution function on the at least one behavior pattern to obtain computed parameters; calculating (242) a degree of harmfulness on the basis of the obtained computed parameters using a model for detection of malicious files, wherein the degree of harmfulness is a number value characterizing the probability that malicious activity will be manifested by a time of computing said degree of harmfulness, and wherein the model for detection is a machine learning model, previously trained (232) using computed parameters of previous behavior patterns subjected to convolution, to output degrees of harmfulness; managing (243) computing resources used to ensure security of a computing device, based on the calculated degree of harmfulness, wherein the degree of harmfulness is within a predetermined range of values; and if the calculated degree of harmfulness of applications exceeds the predetermined threshold value, allocating additional resources available on the computing device for the detection of malicious files, otherwise freeing up previously allocated resources of the computing device.
13. The method according to claim 12, further comprising: intercepting at least one command during execution of an application on the computing device or during emulation of the execution of the application on the computing device; determining for each intercepted command at least one parameter describing that command; forming on the basis of the intercepted commands and the determined parameters the behavior log for that application; and analyze the behavior log to form the at least one behavior pattern.
14. The method according to any of claims 12 to 13, wherein the behavior log is a set of executable commands of an application, each of the executable commands corresponding to at least one parameter describing that command.
15. The method according to any of claims 12 to 13, wherein the hardware processor is further configured to calculate convolution using a predetermined convolution function as a basis, wherein an inverse convolution function of a result of the predetermined convolution function on all of the formulated behavior patterns has a degree of similarity with that behavior pattern which is greater than a given value.
</claims>
</document>
