<document>

<filing_date>
2019-05-08
</filing_date>

<publication_date>
2020-10-13
</publication_date>

<priority_date>
2017-08-01
</priority_date>

<ipc_classes>
H04L12/24,H04L12/26,H04W24/04,H04W24/08
</ipc_classes>

<assignee>
JUNIPER NETWORKS
</assignee>

<inventors>
YADAV, ALAM
SANYAL, SAIKAT
N, MADHAVA
</inventors>

<docdb_family_id>
63254496
</docdb_family_id>

<title>
Using machine learning to monitor link quality and predict link faults
</title>

<abstract>
A device may receive a trained data model that has been trained using historical link quality information associated with a set of links. The device may determine, after receiving the trained data model, link quality information associated with a link that is actively supporting traffic. The device may classify the link by using the link quality information as input for the data model. The data model may classify the link into a class of a set of classes associated with measuring link quality. The device may determine an actual quality level of the link. The device may selectively update the class of the link after determining the actual link quality of the link. The device may perform one or more actions associated with improving link quality based on classifying the link and/or selectively updating the class of the link.
</abstract>

<claims>
1. A device, comprising: a memory; and one or more processors to: receive a trained data model; determine, after receiving the data model, link quality information associated with a link that supports traffic; classify the link by using the link quality information as input for the data model, the data model to classify the link into a class, of a set of classes, associated with measuring link quality; disable the link after classifying the link into the class; perform, after disabling the link, a diagnostic test to identify that the link is not correctly classified; update the class of the link to another class using the data model and after performing the diagnostic test; and update the data model by modifying one or more quality values that are associated with at least one of classifying the link or updating the class of the link.
2. The device of claim 1, where the one or more processors, when updating the class of the link to the other class, are to: update the class of the link to a class associated with a low link quality when the link fails the diagnostic test; and where the one or more processors, when updating the data model, are to: update the data model based on the class associated with the low link quality.
3. The device of claim 1, where the one or more processors, when updating the class of the link to the other class, are to: update the class of the link to a class associated with a high link quality when the link passes the diagnostic test, the link passes the diagnostic test with a score above a threshold; and where the one or more processors, when updating the data model, are to: update the data model based on the class associated with the high link quality.
4. The device of claim 1, where the one or more processors, when determining the link quality information associated with the link, are to: measure the link quality by identifying errors in data transmission using one or more of: a forward error correction value, or a cyclical redundancy check value.
5. The device of claim 1, where the one or more processors are further to: classify the link as a low quality link a particular quantity of times; and blacklist the link based on the particular quantity of times exceeding a threshold quantity of times.
6. The device of claim 1, where the one or more processors, when updating the data model, are to: update the data model by modifying one or more quality coefficient values that are associated with the link quality information.
7. The device of claim 1, where the one or more processors, when determining the link quality information associated with the link, are to: monitor data traveling through the link to determine a bit error ratio value; and where the one or more processors, when classifying the link, are to: classify the link based on the bit error ratio value.
8. A non-transitory computer readable medium storing instructions, the instructions comprising: one or more instructions, that when executed by one or more processors, cause the one or more processors to: receive a trained data model; determine, after receiving the data model, link quality information associated with a link that supports traffic; classify the link by using the link quality information as input for the data model, the data model to classify the link into a class, of a set of classes, associated with measuring link quality; disable the link after classifying the link into the class; perform, after disabling the link, a diagnostic test to identify that the link is not correctly classified; update the class of the link to another class using the data model and after performing the diagnostic test; and update the data model by modifying one or more quality values that are associated with at least one of classifying the link or updating the class of the link.
9. The non-transitory computer readable medium of claim 8, where the one or more instructions, that cause the one or more processors to update the class of the link to the other class, cause the one or more processors to: update the class of the link to a class associated with a low link quality when the link fails the diagnostic test; and where the one or more instructions, that cause the one or more processors to update the data model, cause the one or more processors to: update the data model based on the class associated with the low link quality.
10. The non-transitory computer readable medium of claim 8, where the one or more instructions, that cause the one or more processors to update the class of the link to the other class, cause the one or more processors to: update the class of the link to a class associated with a high link quality when the link passes the diagnostic test, the link passes the diagnostic test with a score above a threshold; and where the one or more instructions, that cause the one or more processors to update the data model, cause the one or more processors to: update the data model based on the class associated with the high link quality.
11. The non-transitory computer readable medium of claim 8, where the one or more instructions, that cause the one or more processors to determine the link quality information associated with the link, cause the one or more processors to: measure the link quality by identifying errors in data transmission using one or more of: a forward error correction value, or a cyclical redundancy check value.
12. The non-transitory computer readable medium of claim 8, where the one or more instructions further cause the one or more processors to: classify the link as a low quality link a particular quantity of times; and blacklist the link based on the particular quantity of times exceeding a threshold quantity of times.
13. The non-transitory computer readable medium of claim 8, where the one or more instructions, that cause the one or more processors to update the data model, cause the one or more processors to: update the data model by modifying one or more quality coefficient values that are associated with the link quality information.
14. The non-transitory computer readable medium of claim 8, where the one or more instructions, that cause the one or more processors to determine the link quality information associated with the link, cause the one or more processors to: monitor data traveling through the link to determine a bit error ratio value; and where the one or more instructions, that cause the one or more processors to classify the link, cause the one or more processors to: classify the link based on the bit error ratio value.
15. A method, comprising: receiving, by a device, a trained data model; determining, by the device and after receiving the data model, link quality information associated with a link that supports traffic; classifying, by the device, the link by using the link quality information as input for the data model, the data model to classify the link into a class, of a set of classes, associated with measuring link quality; disabling, by the device, the link after classifying the link into the class; performing, by the device and after disabling the link, a diagnostic test to identify that the link is not correctly classified; updating, by the device, the class of the link to another class using the data model and after performing the diagnostic test; and updating, by the device, the data model by modifying one or more quality values that are associated with at least one of classifying the link or updating the class of the link.
16. The method of claim 15, where updating the class of the link to the other class comprises: updating the class of the link to a class associated with a low link quality when the link fails the diagnostic test; and where updating the data model comprises: updating the data model based on the class associated with the low link quality.
17. The method of claim 15, where updating the class of the link to the other class comprises: updating the class of the link to a class associated with a high link quality when the link passes the diagnostic test, the link passes the diagnostic test with a score above a threshold; and where updating the data model comprises: updating the data model based on the class associated with the high link quality.
18. The method of claim 15, further comprising: classifying the link as a low quality link a particular quantity of times; and blacklisting the link based on the particular quantity of times exceeding a threshold quantity of times.
19. The method of claim 15, where updating the data model comprises: updating the data model by modifying one or more quality coefficient values that are associated with the link quality information.
20. The method of claim 15, where determining the link quality information associated with the link comprises: monitoring data traveling through the link to determine a bit error ratio value; and where classifying the link comprises: classifying the link based on the bit error ratio value.
</claims>
</document>
