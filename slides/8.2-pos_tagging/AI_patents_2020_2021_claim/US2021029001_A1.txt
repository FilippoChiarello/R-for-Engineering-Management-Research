<document>

<filing_date>
2019-09-13
</filing_date>

<publication_date>
2021-01-28
</publication_date>

<priority_date>
2019-07-26
</priority_date>

<ipc_classes>
G06F8/41,G06F8/72,G06F8/76,G06F9/445,G06F9/50,H04L12/24
</ipc_classes>

<assignee>
COGNIZANT TECHNOLOGY SOLUTIONS INDIA PVT.
</assignee>

<inventors>
SEN, TAPODHAN
PRADHAN, SAROJ
Pal, Arunava
Basu, Swastika
Bandyopadhyay, Sandip
</inventors>

<docdb_family_id>
74187489
</docdb_family_id>

<title>
SYSTEM AND A METHOD FOR AUTOMATIC CONVERSION OF MONOLITHIC SERVICES TO MICRO-SERVICES
</title>

<abstract>
A system and method for conversion of monolithic services to micro-services is provided. One or more features related to service associated with domain implemented by monolithic service source code are identified. Features are identified for creating first feature set. One or more features are determined related to dependencies and cross-dependencies amongst one or more service functions associated with service, implemented by monolithic service source code, and between service functions and entities associated with domain expressed in the monolithic service source code. One or more features related to dependencies and cross-dependencies are determined for creating second feature set. Relationship between features present in first feature set and second feature set is determined. The relationship is representative of similarity of the features present in first feature set and second feature set. One or more micro-services are created based on similarity between features present in first feature set and second feature set.
</abstract>

<claims>
We claim:
1. A method for conversion of monolithic services to micro-services, wherein the method is implemented by a processor executing instructions stored in a memory, the method comprising: identifying one or more features related to a service associated with a domain implemented by a monolithic service source code, wherein the features are identified for creating a first feature set; determining one or more features related to dependencies and cross-dependencies amongst one or more service functions associated with the service, implemented by the monolithic service source code, and between the service functions and entities associated with the domain expressed in the monolithic service source code, wherein the one or more features related to dependencies and cross-dependencies are determined for creating a second feature set; determining a relationship between the features present in the first feature set and the features present in the second feature set, wherein the relationship is representative of similarity of the features present in the first feature set and the second feature set; and creating one or more micro-services based on the similarity between the features present in the first feature set and the second feature set.
2. The method as claimed in claim 1, wherein the service domain features present in the monolithic service source code may relate to domain identifiers and domain expressions present in the monolithic service source code.
3. The method as claimed as claim 1, wherein the monolithic service source code is parsed for extracting monolithic source code syntax and an abstract syntax tree (AST) is formed based on the extracted syntax.
4. The method as claimed in claim 1, wherein the second feature set is representative of coupling of the service functions implemented by the monolithic service source code to the domain entities which are expressed in the monolithic service source code.
5. The method as claimed in claim 1, wherein the first feature set and the second feature set are combined for subsequent identification of redundant features that are present in the first feature set and the second feature set.
6. The method as claimed in claim 1, wherein the similar features present in the first feature set and the second feature set are grouped into one or more clusters based on the relationship between the features present in the first feature set and the second feature set.
7. The method as claimed in claim 6, wherein one or more bounded context features are determined from the clustered similar features, wherein the bounded context features are representative of stable boundaries between different services, having respective similar features, implemented by the monolithic service source code.
8. The method as claimed in claim 1, wherein the formed micro-services comprises one or more atomic micro-services; and one or more composite micro-services.
9. The method as claimed in claim 8, wherein the atomic micro-services and the composite micro-services are formed from the services present in the bounded context features based on the interaction of the services present in the bounded context features.
10. The method as claimed in claim 9, wherein one or more application programming interface (API) specifications of the atomic micro-services and the composite micro-services are generated.
11. A system for conversion of monolithic services to micro-services, the system comprising: a memory storing program instructions; a processor configured to execute program instructions stored in the memory; and a service conversion engine executed by the processor and configured to: identify one or more features related to a service associated with a domain implemented by a monolithic service source code, wherein the features are identified for creating a first feature set; determine one or more features related to dependencies and cross-dependencies amongst one or more service functions associated with the service, implemented by the monolithic service source code, and between the service functions and entities associated with the domain expressed in the monolithic service source code, wherein the one or more features related to dependencies and cross-dependencies are determined for creating a second feature set; determine a relationship between the features present in the first feature set and the features present in the second feature set, wherein the relationship is representative of similarity of the features present in the first feature set and the second feature set; and create one or more micro-services based on the similarity between the features present in the first feature set and the second feature set.
12. The system as claimed in claim 11, wherein the service conversion engine comprises a domain identification unit executed by the processor, the domain identification unit configured to combine the features identified from the monolithic service source code for creating the first feature set.
13. The system as claimed in claim 11, wherein the service conversion engine comprises a code parsing unit executed by the processor, wherein the code parsing unit is configured to parse the monolithic service source code utilizing a code parser for extracting source code syntax and forming an abstract syntax tree (AST) based on the extracted syntax.
14. The system as claimed in claim 13, wherein the code parsing unit is configured to traverse AST for determining the features related to dependencies and cross-dependencies amongst and between the service functions and the domain entities.
15. The system as claimed in claim 11, wherein the service conversion engine comprises a boundary detection unit executed by the processor, the boundary detection unit is configured to cluster the similar features present in the first feature set and the second feature set together into one or more clusters based on the relationship between the one or more features present in the first feature set and the second feature set.
16. The system as claimed in claim 15, wherein the boundary detection unit is configured to determine separate stable bounded context features from the clustered similar features, wherein the bounded context features are representative of stable boundaries between different services, having respective similar features, implemented by the monolithic service source code.
17. The system as claimed in claim 11, wherein the service conversion engine comprises a service augmentation unit executed by the processor, the service augmentation unit is configured to process the bounded context features for identifying and classifying the services present in the bounded context features into one or more atomic micro-services and one or more composite micro-services.
18. A computer program product comprising: a non-transitory computer-readable medium having computer program code store thereon, the computer-readable program code comprising instructions that, when executed by a processor, caused the processor to: identify one or more features related to a service associated with a domain implemented by a monolithic service source code, wherein the features are identified for creating a first feature set; determine one or more features related to dependencies and cross-dependencies amongst one or more service functions associated with the service, implemented by the monolithic service source code, and between the service functions and entities associated with the domain expressed in the monolithic service source code, wherein the one or more features related to dependencies and cross-dependencies are determined for creating a second feature set; determine relationship between the features present in the first feature set and the features present in the second feature set, wherein the relationship is representative of similarity of the features present in the first feature set and the second feature set; and create one or more micro-services based on the similarity between the one or more features present in the first feature set and the second feature set.
</claims>
</document>
