<document>

<filing_date>
2018-10-17
</filing_date>

<publication_date>
2020-11-03
</publication_date>

<priority_date>
2017-10-20
</priority_date>

<ipc_classes>
G06F9/48,G06F9/50,G06F9/52
</ipc_classes>

<assignee>
EMC IP HOLDING COMPANY
</assignee>

<inventors>
WANG KUN
ZHAO JUNPING
GUO, FAN
</inventors>

<docdb_family_id>
66171176
</docdb_family_id>

<title>
Method and machine for application migration
</title>

<abstract>
Embodiments provide a method and machine for application migration. In an embodiment, a first descriptor associated with a first runtime environment of an application executed on a first dedicated processing unit is obtained from the first dedicated processing unit. In response to determining that the application is to be migrated from the first dedicated processing unit to the second dedicated processing unit during the execution, the second dedicated processing unit is caused to create a second descriptor associated with a second runtime environment for the application, executed on the second dedicated processing unit. Subsequently, the second descriptor is obtained from the second dedicated processing unit and a first mapping from the first descriptor to the second descriptor is established for re-directing, to the second dedicated processing unit, the request from the application to the first dedicated processing unit. A corresponding machine for implementing the method is further disclosed.
</abstract>

<claims>
We claim:
1. A method of application migration, comprising: obtaining, from a first dedicated processing unit, a first descriptor associated with a first runtime environment of an application executed on the first dedicated processing unit; in response to determining that the application is to be migrated from the first dedicated processing unit to a second dedicated processing unit during the execution, causing the second dedicated processing unit to create a second descriptor associated with a second runtime environment for the application, executed on the second dedicated processing unit; obtaining the second descriptor from the second dedicated processing unit; and establishing a first mapping from the first descriptor to the second descriptor to re-direct, to the second dedicated processing unit, a request from the application to the first dedicated processing unit.
2. The method according to claim 1, further comprising: after the first mapping has been established, in response to intercepting the request from the application to the first dedicated processing unit, re-directing the request to the second dedicated processing unit based on the first mapping.
3. The method according to claim 1, further comprising: in response to determining that the application is to be migrated to the second dedicated processing unit, intercepting the request from the application to the first dedicated processing unit; freezing the intercepted request; and in response to the first mapping having been established, forwarding the frozen request to the second dedicated processing unit.
4. The method according to claim 1, further comprising: in response to determining that the application is to be migrated from the first dedicated processing unit to the second dedicated processing unit, causing the first dedicated processing unit to synchronize a plurality of threads associated with the application; and in response to completion of the synchronization, migrating data associated with the application and stored in a first memory for the first dedicated processing unit to a second memory for the second dedicated processing unit.
5. The method according to claim 4, wherein causing the first dedicated processing unit to synchronize the plurality of threads comprises: creating a synchronization barrier for the first dedicated processing unit.
6. The method according to claim 4, wherein migrating the data to the second memory comprises: determining a size of a first storage area for storing the data in the first memory; causing the second dedicated processing unit to allocate a second storage area for storing the data in the second memory based on the size of the first storage area; and in response to determining that the second storage area has been allocated, migrating the data from the first storage area to the second storage area.
7. The method according to claim 6, further comprising: obtaining, from the first dedicated processing unit, a first storage address associated with the first storage area; obtaining, from the second dedicate processing unit, a second storage address associated with the second storage area; and establishing a second mapping from the first storage address to the second storage address to re-direct, to the second storage area, an access request from the application to the first storage area.
8. The method according to claim 7, further comprising: before the application runs on the first dedicated processing unit, allocating a third storage address to a first memory for the first dedicated processing unit; and allocating a fourth storage address different from the third storage address to a second memory for the second dedicated processing unit, the third and fourth storage addresses being accessible to both the first and second dedicated processing units.
9. A machine for application migration, comprising: a central processing unit, and a memory storing instructions, the instructions, when executed by the central processing unit, cause the central processing unit to perform acts comprising: obtaining, from a first dedicated processing unit, a first descriptor associated with a first runtime environment of an application executed on the first dedicated processing unit; in response to determining that the application is to be migrated from the first dedicated processing unit to a second dedicated processing unit during the execution, causing the second dedicated processing unit to create a second descriptor associated with a second runtime environment for the application, executed on the second dedicated processing unit; obtaining the second descriptor from the second dedicated processing unit; and establishing a first mapping from the first descriptor to the second descriptor to re-direct, to the second dedicated processing unit, a request from the application to the first dedicated processing unit.
10. The machine according to claim 9, wherein the acts further comprise: after the first mapping has been established, in response to intercepting the request from the application to the first dedicated processing unit, re-directing the request to the second dedicated processing unit based on the first mapping.
11. The machine according to claim 9, wherein the acts further comprise: in response to determining that the application is to be migrated to the second dedicated processing unit, intercepting the request from the application to the first dedicated processing unit; freezing the intercepted request; and in response to the first mapping having been established, forwarding the frozen request to the second dedicated processing unit.
12. The machine according to claim 9, wherein the acts further comprise: in response to determining that the application is to be migrated from the first dedicated processing unit to the second dedicated processing unit, causing the first dedicated processing unit to synchronize a plurality of threads associated with the application; and in response to completion of the synchronization, migrating data associated with the application and stored in a first memory for the first dedicated processing unit to a second memory for the second dedicated processing unit.
13. The machine according to claim 12, wherein causing the first dedicated processing unit to synchronize the plurality of threads comprises: creating a synchronization barrier for the first dedicated processing unit.
14. The machine according to claim 12, wherein migrating the data to the second memory comprises: determining a size of a first storage area for storing the data in the first memory; causing the second dedicated processing unit to allocate a second storage area for storing the data in the second memory based on the size of the first storage area; and in response to determining that the second storage area has been allocated, migrating the data from the first storage area to the second storage area.
15. The machine according to claim 14, wherein the acts further comprise: obtaining, from the first dedicated processing unit, a first storage address associated with the first storage area; obtaining, from the second dedicate processing unit, a second storage address associated with the second storage area; and establishing a second mapping from the first storage address to the second storage address to re-direct, to the second storage area, an access request from the application to the first storage area.
16. The machine according to claim 15, wherein the acts further comprise: before the application runs on the first dedicated processing unit, allocating a third storage address to a first memory for the first dedicated processing unit; and allocating a fourth storage address different from the third storage address to a second memory for the second dedicated processing unit, the third and fourth storage addresses being accessible to both the first and second dedicated processing units.
17. A non-transient computer readable medium having machine executable instructions tangibly stored thereon, the machine executable instructions, when executed in a machine, causing the machine to perform: obtaining, from a first dedicated processing unit, a first descriptor associated with a first runtime environment of an application executed on the first dedicated processing unit; in response to determining that the application is to be migrated from the first dedicated processing unit to a second dedicated processing unit during the execution, causing the second dedicated processing unit to create a second descriptor associated with a second runtime environment for the application, executed on the second dedicated processing unit; obtaining the second descriptor from the second dedicated processing unit; and establishing a first mapping from the first descriptor to the second descriptor to re-direct, to the second dedicated processing unit, a request from the application to the first dedicated processing unit.
18. The non-transient computer readable medium according to claim 17, further comprising: after the first mapping has been established, in response to intercepting the request from the application to the first dedicated processing unit, re-directing the request to the second dedicated processing unit based on the first mapping.
19. The non-transient computer readable medium according to claim 17, further comprising: in response to determining that the application is to be migrated to the second dedicated processing unit, intercepting the request from the application to the first dedicated processing unit; freezing the intercepted request; and in response to the first mapping having been established, forwarding the frozen request to the second dedicated processing unit.
20. The non-transient computer readable medium according to claim 17, further comprising: in response to determining that the application is to be migrated from the first dedicated processing unit to the second dedicated processing unit, causing the first dedicated processing unit to synchronize a plurality of threads associated with the application; and in response to completion of the synchronization, migrating data associated with the application and stored in a first memory for the first dedicated processing unit to a second memory for the second dedicated processing unit.
</claims>
</document>
