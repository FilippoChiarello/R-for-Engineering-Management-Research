<document>

<filing_date>
2020-07-20
</filing_date>

<publication_date>
2020-11-05
</publication_date>

<priority_date>
2018-04-12
</priority_date>

<ipc_classes>
G06F11/20,G06F16/40,G06F16/907,G06F16/955,G06F16/957,G06F40/30,G06F9/445,G06F9/54,G06N20/00,H04L12/24,H04L29/06,H04L29/08
</ipc_classes>

<assignee>
Pearson Management Services Limited
</assignee>

<inventors>
KHAKI, SUHAIL
WALSH, JAMES
</inventors>

<docdb_family_id>
68160334
</docdb_family_id>

<title>
PERSONALIZED MICROSERVICE
</title>

<abstract>
A global architecture (GLP), as disclosed herein, is based on the thin server architectural pattern; it delivers all its services in the form of web services and there are no user interface components executed on the GLP. Each web service exposed by the GLP is stateless, which allows the GLP to be highly scalable. The GLP is further decomposed into components. Each component is a microservice, making the overall architecture fully decoupled. Each microservice has fail-over nodes and can scale up on demand. This means the GLP has no single point of failure, making the platform both highly scalable and available. The GLP architecture provides the capability to build and deploy a microservice instance for each course-recipient-user combination. Because each student interacts with their own microservice, this makes the GLP scale up to the limit of cloud resources availableâ€”i.e. near infinity.
</abstract>

<claims>
1. A system for automatic package-data asset delivery, the system comprising: a memory comprising a database comprising a plurality of package-data assets and user information; at least one processor configured to execute a user microservice comprising: a platform synchronizer configured to synchronize operation of a platform-user microservice and a local-user microservice; an asset sequencer configured to persist user state data and identify next package-data assets for presentation; a recommendation module configured to interact with the asset sequencer to select next package-data assets according to a machine learning model; an asset retriever module configured to retrieve identified next package-data assets; and a scoring module configured to evaluate user performance, wherein the at least one processor is configured to: receive user information; launch a sandbox; launch the user microservice, wherein the user microservice is unique to user identified in the received user information; identify, with the asset sequencer, a next package-data asset for presentation; determine a location of the next package-data asset, wherein the next package-data asset is located external to the user microservice; traverse the sandbox, with the asset retriever module, via a content query requesting the next package-data asset; receive the requested next package-data asset; and provide the received next package-data asset.
2. The system of claim 1, wherein the user microservice comprises the platform-user microservice.
3. The system of claim 1, wherein the user information comprises user login information.
4. The system of claim 1, wherein the user information identifies a course requested by the user.
5. The system of claim 1, wherein the sandbox comprises a controlled environment, and wherein the user microservice is launched within the sandbox.
6. The system of claim 1, wherein the sandbox is unique to the user microservice, and wherein the sandbox is launched based on the received user information.
7. The system of claim 6, wherein the at least one processor is further configured to receive a content request from the user.
8. The system of claim 7, wherein the at least one processor is further configured to update user data in the database.
9. The system of claim 8, wherein the at least one processor is further configured to generate and send a message indicating a changed state of the user based on the next comment.
10. The system of claim 9, wherein the message indicating the changed state of the user is generated and sent by the platform synchronizer.
11. A method for automatic package-data asset delivery, the method comprising: receiving user information; launch a sandbox; launching a user microservice, wherein the user microservice is unique to user identified in the received user information, the user microservice comprising: a platform synchronizer configured to synchronize operation of a platform-user microservice and a local-user microservice; an asset sequencer configured to persist user state data and identify next package-data assets for presentation; a recommendation module configured to interact with the asset sequencer to select next package-data assets according to a machine learning model; an asset retriever module configured to retrieve the identified next package-data assets; and a scoring module configured to evaluate user performance; identifying, with the asset sequencer, a next package-data asset for presentation; determining a location of the next package-data asset, wherein the next package-data asset is located external to the user microservice; traversing the sandbox, with the asset retriever module, via a content query requesting the next package-data asset; receiving the requested next package-data asset; and providing the received next package-data asset.
12. The method of claim 11, wherein the user microservice comprises the platform-user microservice.
13. The method of claim 11, wherein the user information comprises user login information.
14. The method of claim 11, wherein the user information identifies a course requested by the user.
15. The method of claim 11, wherein the sandbox comprises a controlled environment, and wherein the user microservice is launched within the sandbox.
16. The method of claim 11, wherein the sandbox is unique to the user microservice, and wherein the sandbox is launched based on the received user information.
17. The method of claim 16, further comprising receiving a content request from the user.
18. The method of claim 17, further comprising updating user data in a database associated with the user microservice.
19. The method of claim 18, further comprising: generating and sending a message indicating a changed state of the user based on the next comment.
20. The method of claim 19, wherein the message indicating the changed state of the user is generated and sent by the platform synchronizer.
</claims>
</document>
