<document>

<filing_date>
2017-05-05
</filing_date>

<publication_date>
2020-01-28
</publication_date>

<priority_date>
2016-05-06
</priority_date>

<ipc_classes>
H04L29/06
</ipc_classes>

<assignee>
SITELOCK
</assignee>

<inventors>
CONRAD, TRACY
LOVELL, SCOTT
GORNY, TOMAS
FEATHER, NEILL E.
</inventors>

<docdb_family_id>
60203647
</docdb_family_id>

<title>
Security weakness and infiltration detection and repair in obfuscated website content
</title>

<abstract>
Website data security is provided by conditionally accessing, assessing, and processing website content file attribute data and website content files used to host websites with a first set of servers configured with website content security breach analysis, detection, and repair functionality. The website content files are conditionally accessed based on a file modification date without heavily loading the servers hosting the website. The website content is analyzed by decoding PHP code and executing code in a hardened execution environment. Repair is accomplished through removing or replacing breached content.
</abstract>

<claims>
1. A method of data security, comprising: accessing, by a first set of servers, web site content file attribute data for web site files used by one of a second set of servers to host web site content; determining, by the first set of servers, a status of change of the web site files by comparing a file change date attribute value to a most recently analyzed attribute value for the website files that is accessible in a non-transient computer accessible memory by at least one of the first set of servers; based on the determining, downloading website files from at least one of the second set of servers to the non-transient memory that have not been analyzed since being changed; analyzing the downloaded website files for a security risk by performing file integrity techniques on the downloaded website files to identify suspicious or known signatures contained in the downloaded website files; based on the analyzing, decoding, with a server of the first set of servers, scripting code that is detected within the downloaded website files by: parsing the scripting code to separate the scripting code into a plurality of components; analyzing each component of the plurality of components to determine if the component presents a security risk; and flagging a subset of components of the plurality of components that presents the security risk; executing portions of the scripting code corresponding to the subset of components that were flagged using one of the first set of servers that is configured to isolate execution of the portions of the scripting code; and monitoring, using one of the first set of servers, the execution of the portions of the scripting code corresponding to the subset of components that were flagged to determine security breach content in the downloaded website files.
2. The method of claim 1, further comprising: repairing the downloaded website files by doing at least one of: replacing at least one subset of the downloaded website files that contains determined the security breach content with known good content; and removing the determined security breach content.
3. The method of claim 2, further comprising: uploading any of the downloaded website files in which content has been replaced or removed to the second set of servers.
4. The method of claim 3, wherein the website file uploaded to the second set of servers replaces website content containing determined the security breach content.
5. The method of claim 1, wherein total access bandwidth of the web site files consumed during downloading is limited by an algorithm that references a predetermined bandwidth consumption threshold value so that the total access bandwidth plus website files user bandwidth consumption is lower than the predetermined threshold.
6. The method of claim 1, wherein the step of analyzing the downloaded website files for security breach further comprises the step of analyzing the downloaded website files for security breach by executing algorithms that perform at least one of signature checking, fuzzy checking, metadata matching, fingerprinting, link checking, and file checking.
7. The method of claim 1, wherein the scripting code is PHP: Hypertext Preprocessor (PHP) scripting code.
8. A non-transitory computer readable medium including one or more sequences of instructions that, when executed by one or more processors, cause the processors to perform operations, comprising: accessing, by a first server, website content file attribute data for website files used by one of a second set of servers to host website content; determining whether any of the website files contained on the second server have changed by comparing a file change date attribute value of a website file to a stored file change date attribute value stored at the first server for the website file; downloading each website file from the second server to the first server where the file change date attribute value of each web site file does not match the file change date attribute value stored at the first server for each web site file; analyzing each transferred web site file for a security risk by performing file integrity techniques on the downloaded website files to identify suspicious or known signatures contained in the downloaded website files; decoding scripting code that is detected within each transferred web site file by: parsing the scripting code to separate the scripting code into a plurality of components; analyzing each component of the plurality of components to determine if the component presents a security risk; and flagging a subset of components of the plurality of components that presents the security risk; executing portions of the scripting code corresponding to the subset of components that were flagged using the first server configured to isolate execution of the portions of the scripting code; and monitoring, using one of the first set of servers, the execution of the portions of the scripting code corresponding to the subset of components that were flapped to determine security breach content in the downloaded website files.
9. The non-transitory computer readable medium of claim 8, further comprising: repairing the transferred website files, if determined to be the security breached, by doing at least one of: replacing at least a portion of the transferred website file that contains determined security breach content with known good content; and removing the determined security breach content.
10. The non-transitory computer readable medium of claim 9, further comprising: uploading any of the transferred website files in which content has been replaced or removed to the second server.
11. The non-transitory computer readable medium of claim 10, wherein the website file uploaded to the second server replaces web site content containing the determined security breach content.
12. The non-transitory computer readable medium of claim 8, wherein total access bandwidth of the transferred website files transferred is limited by an algorithm that references a predetermined bandwidth consumption threshold value so that total access bandwidth plus transferred website files bandwidth consumption is lower than the predetermined threshold.
13. The non-transitory computer readable medium of claim 8, wherein the step of a analyzing each transferred website file for security breach further comprises the step of analyzing each transferred web site file for security breach by executing algorithms that perform at least one of signature checking, fuzzy checking, metadata matching, fingerprinting, link checking, and file checking.
14. The non-transitory computer readable medium of claim 8, wherein the scripting code is PHP: Hypertext Preprocessor (PHP) scripting code.
</claims>
</document>
