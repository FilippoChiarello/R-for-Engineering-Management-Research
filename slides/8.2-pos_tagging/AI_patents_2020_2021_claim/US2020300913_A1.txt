<document>

<filing_date>
2020-05-14
</filing_date>

<publication_date>
2020-09-24
</publication_date>

<priority_date>
2017-10-18
</priority_date>

<ipc_classes>
G01R31/317,G01R31/3183,G06F30/00
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
BOSE, PRADIP
BUYUKTOSUNOGLU, ALPER
ZU, YAZHOU
ELDRIDGE, SCHUYLER
SWAMINATHAN, KARTHIK V.
</inventors>

<docdb_family_id>
66097421
</docdb_family_id>

<title>
DETERMINATION AND CORRECTION OF PHYSICAL CIRCUIT EVENT RELATED ERRORS OF A HARDWARE DESIGN
</title>

<abstract>
Techniques facilitating determination and correction of physical circuit event related errors of a hardware design are provided. A system can comprise a memory that stores computer executable components and a processor that executes computer executable components stored in the memory. The computer executable components can comprise a simulation component that injects a fault into a latch and a combination of logic of an emulated hardware design. The fault can be a biased fault injection that can mimic an error caused by a physical circuit event error vulnerability. The computer executable components can also comprise an observation component that determines one or more paths of the emulated hardware design that are vulnerable to physical circuit event related errors based on the biased fault injection.
</abstract>

<claims>
1. A system, comprising: a memory that stores computer executable components; and a processor that executes the computer executable components stored in the memory, wherein the computer executable components comprise: an observation component that determines one or more paths of an emulated hardware design that are vulnerable to physical circuit event related errors based on a biased fault injection.
2. The system of claim 1, wherein the computer executable components further comprise: a modification component that selectively adjusts a timing of the one or more paths based on a determination that the one or more paths are vulnerable to the physical circuit event related errors.
3. The system of claim 1, wherein the computer executable components comprise a simulation component that injects a fault into a latch and a combination of logic of the emulated hardware design, wherein the fault is a biased fault injection that mimics an error caused by a physical circuit event error vulnerability.
4. The system of claim 3, further comprising: a selection component that randomly changes bits inside the latch, wherein the changes to the bits mimic the error caused by the physical circuit event error vulnerability.
5. The system of claim 3, further comprising: a comparison component that evaluates a difference between a result of the fault injected into the latch against a determined acceptable result, wherein the observation component determines the one or more paths are vulnerable to the physical circuit event related errors based on a determination that the difference is below a defined difference level.
6. The system of claim 3, wherein the simulation component injects the fault into the one or more paths, and wherein the observation component determines respective criticalities of the one or more paths based on a defined threshold, and wherein the fault comprises a bit flip error.
7. The system of claim 3, wherein the simulation component embeds combination logic that selects between authentic latch data and faulty latch data.
8. The system of claim 1, further comprising: a modification component that changes a timing constraint of the emulated hardware design, wherein the timing constraint increases a resiliency of the emulated hardware design.
9. A computer-implemented method, comprising: determining, by a system operatively coupled to a processor, one or more paths of an emulated hardware design that are vulnerable to physical circuit event related errors based on a biased fault injection.
10. The computer-implemented method of claim 9, further comprising: selectively adjusting, by the system, a timing of the one or more paths based on a determination that the one or more paths are vulnerable to the physical circuit event related errors.
11. The computer-implemented method of claim 9, further comprising: injecting, by the system, the biased fault injection into a latch and a combination of logic of the emulated hardware design, wherein the biased fault injection mimics an error caused by a physical circuit event error vulnerability.
12. The computer-implemented method of claim 11, further comprising: randomly changing, by the system, bits inside the latch, wherein the changes to the bits mimic the error caused by the physical circuit event error vulnerability.
13. The computer-implemented method of claim 11, further comprising: evaluating, by the system, a difference between a result of the biased fault injection injected into the latch against a determined acceptable result; and determining, by the system, the one or more paths are vulnerable to the physical circuit event related errors based on a determination that the difference is below a defined difference level.
14. The computer-implemented method of claim 11, further comprising: embedding, by the system, combination logic that selects between authentic latch data and faulty latch data.
15. The computer-implemented method of claim 11, further comprising: injecting, by the system, the fault into the one or more paths, and determining, by the system, respective criticalities of the one or more paths based on a defined threshold, and wherein the fault comprises a bit flip error.
16. A computer program product that facilitates determination and correction of physical circuit event related errors of a hardware design, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions are executable by a processor to cause the processor to: determine one or more paths of emulated hardware design that are vulnerable to physical circuit event related errors based on a biased fault injection.
17. The computer program product of claim 16, wherein the program instructions cause the processor to: inject the biased fault injection into a latch and a combination of logic of the emulated hardware design, wherein the biased fault injection mimics an error caused by a physical circuit event error vulnerability.
18. The computer program product of claim 17, wherein the program instructions cause the processor to: randomly change bits inside the latch, wherein the changes to the bits mimic the error caused by the physical circuit event error vulnerability.
19. The computer program product of claim 17, wherein the program instructions cause the processor to: evaluate a difference between a result of the biased fault injection injected into the latch against a determined acceptable result; and determine the one or more paths are vulnerable to the physical circuit event related errors based on a determination that the difference is below a defined difference level.
20. The computer program product of claim 17, wherein the program instructions cause the processor to: embedding combination logic that selects between authentic latch data and faulty latch data.
</claims>
</document>
