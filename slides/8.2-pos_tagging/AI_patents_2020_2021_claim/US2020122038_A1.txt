<document>

<filing_date>
2019-10-18
</filing_date>

<publication_date>
2020-04-23
</publication_date>

<priority_date>
2018-10-18
</priority_date>

<ipc_classes>
A63F13/57,G06N20/00
</ipc_classes>

<assignee>
UNITY IPR
</assignee>

<inventors>
EBRAHIMI, AMIR PASCAL
MEULEAU, NICOLAS FRANCOIS XAVIER
SANTARRA, TREVOR JOSEPH
</inventors>

<docdb_family_id>
68290251
</docdb_family_id>

<title>
METHOD AND SYSTEM FOR BEHAVIOR GENERATION WITH A TRAIT BASED PLANNING DOMAIN LANGUAGE
</title>

<abstract>
A method for generating behavior with a trait-based planning domain language is disclosed. A world model of a dynamic environment is created. The world model includes data defining a state for the world model. The data defining the state includes data describing objects within the environment. Input to update the state for the world model is received. The input includes data to change the state and data defining a goal for a future state. A machine-learning model is used to generate a planning state from the state for the world model. The planning state includes a plurality of planning domain objects and associated traits. Based on instructions associated with an action, one or more of modifying values within a trait associated with the planning domain object, adding a trait to the planning domain object, or removing a trait from the planning domain object are performed.
</abstract>

<claims>
1. A system comprising: one or more computer processors; one or more computer memories; one or more modules incorporated into the one or more computer memories, the one or more modules configuring the one or more computer processors to perform operations for generating behavior with a trait-based planning domain language, the operations comprising: creating a world model of a dynamic environment, the world model including data defining a state for the world model, the data defining the state including data describing objects within the environment; receiving input to update the state for the world model, the input including data to change the state and data defining a goal for a future state; using a machine-learning model to generate a planning state from the state for the world model, the planning state including a plurality of planning domain objects and associated traits, the planning domain objects representing objects within the state for the world model; using a machine-learning planning module to create a plan, the plan including a plurality of actions to be performed on planning domain objects within the planning state in order to change the state of the world model to a second state wherein the second state is consistent with the goal, and wherein each action of the plurality of actions includes one or more parameters, one or more preconditions, and one or more effects, and wherein each parameter of the one or more parameters includes one or more planning domain objects and associated traits; performing the plurality of actions within the plan, wherein the performing of the plurality of actions includes performing the following operations for each action of the plurality of actions: determining, for each parameter of the action, whether a planning domain object associated with the parameter has one or more traits that have been predefined as necessary for the execution of the action; analyzing one or more preconditions associated with one or more parameters of the action and, based on the preconditions being satisfied, applying the action to a planning domain object associated with the parameter by performing one or more of the following based on instructions associated with the action: modifying values within a trait associated with the planning domain object, adding a trait to the planning domain object, and removing a trait from the planning domain object.
2. The system of claim 1, wherein applying the action causes a planning domain object associated with the parameter to be destroyed based on instructions associated with the action.
3. The system of claim 1, wherein applying the action causes a planning domain object associated with the parameter to be created based on instructions associated with the action.
4. The system of claim 1, wherein each action of the plurality of actions includes a plurality of possible independent effects associated with the applying of the action, and one of the plurality of possible independent effects is chosen at random when the action is applied.
5. The system of claim 4, wherein each of the plurality of possible independent effects has an associated probability weighting.
6. The system of claim 1, wherein the dynamic environment includes a video game environment or a simulation environment.
7. The system of claim 1, wherein the received input includes data from an input device used by a human to interact with the dynamic environment.
8. A method comprising: performing operations for generating behavior with a trait-based planning domain language, the operations comprising: creating a world model of a dynamic environment, the world model including data defining a state for the world model, the data defining the state including data describing objects within the environment; receiving input to update the state for the world model, the input including data to change the state and data defining a goal for a future state; using a machine-learning model to generate a planning state from the state for the world model, the planning state including a plurality of planning domain objects and associated traits, the planning domain objects representing objects within the state for the world model; using a machine-learning planning module to create a plan, the plan including a plurality of actions to be performed on planning domain objects within the planning state in order to change the state of the world model to a second state wherein the second state is consistent with the goal, and wherein each action of the plurality of actions includes one or more parameters, one or more preconditions, and one or more effects, and wherein each parameter of the one or more parameters includes one or more planning domain objects and associated traits; performing the plurality of actions within the plan, wherein the performing of the plurality of actions includes performing the following operations for each action of the plurality of actions: determining, for each parameter of the action, whether a planning domain object associated with the parameter has one or more traits that have been predefined as necessary for the execution of the action; analyzing one or more preconditions associated with one or more parameters of the action and, based on the preconditions being satisfied, applying the action to a planning domain object associated with the parameter by performing one or more of the following based on instructions associated with the action: modifying values within a trait associated with the planning domain object, adding a trait to the planning domain object, and removing a trait from the planning domain object.
9. The method of claim 8, wherein applying the action causes a planning domain object associated with the parameter to be destroyed based on instructions associated with the action.
10. The method of claim 8, wherein applying the action causes a planning domain object associated with the parameter to be created based on instructions associated with the action.
11. The method of claim 8, wherein each action of the plurality of actions includes a plurality of possible independent effects associated with the applying of the action, and one of the plurality of possible independent effects is chosen at random when the action is applied.
12. The method of claim 11, wherein each of the plurality of possible independent effects has an associated probability weighting.
13. The method of claim 8, wherein the dynamic environment includes a video game environment or a simulation environment.
14. The method of claim 8, wherein the received input includes data from an input device used by a human to interact with the dynamic environment.
15. A non-transitory computer-readable medium storing a set of instructions that, when executed by one or more computer processors, causes the one or more computer processors to perform operations for generating behavior with a trait-based planning domain language, the operations comprising: creating a world model of a dynamic environment, the world model including data defining a state for the world model, the data defining the state including data describing objects within the environment; receiving input to update the state for the world model, the input including data to change the state and data defining a goal for a future state; using a machine-learning model to generate a planning state from the state for the world model, the planning state including a plurality of planning domain objects and associated traits, the planning domain objects representing objects within the state for the world model; using a machine-learning planning module to create a plan, the plan including a plurality of actions to be performed on planning domain objects within the planning state in order to change the state of the world model to a second state wherein the second state is consistent with the goal, and wherein each action of the plurality of actions includes one or more parameters, one or more preconditions, and one or more effects, and wherein each parameter of the one or more parameters includes one or more planning domain objects and associated traits; performing the plurality of actions within the plan, wherein the performing of the plurality of actions includes performing the following operations for each action of the plurality of actions: determining, for each parameter of the action, whether a planning domain object associated with the parameter has one or more traits that have been predefined as necessary for the execution of the action; analyzing one or more preconditions associated with one or more parameters of the action and, based on the preconditions being satisfied, applying the action to a planning domain object associated with the parameter by performing one or more of the following based on instructions associated with the action: modifying values within a trait associated with the planning domain object, adding a trait to the planning domain object, and removing a trait from the planning domain object.
16. The non-transitory computer-readable medium of claim 15, wherein applying the action causes a planning domain object associated with the parameter to be destroyed based on instructions associated with the action.
17. The non-transitory computer-readable medium of claim 15, wherein applying the action causes a planning domain object associated with the parameter to be created based on instructions associated with the action.
18. The non-transitory computer-readable medium of claim 15, wherein each action of the plurality of actions includes a plurality of possible independent effects associated with the applying of the action, and one of the plurality of possible independent effects is chosen at random when the action is applied.
19. The non-transitory computer-readable medium of claim 18, wherein each of the plurality of possible independent effects has an associated probability weighting.
20. The non-transitory computer-readable medium of claim 15, wherein the dynamic environment includes a video game environment or a simulation environment.
</claims>
</document>
