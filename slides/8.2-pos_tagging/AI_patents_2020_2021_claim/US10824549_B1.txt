<document>

<filing_date>
2020-05-26
</filing_date>

<publication_date>
2020-11-03
</publication_date>

<priority_date>
2020-05-19
</priority_date>

<ipc_classes>
G06F11/36,G06F16/23,G06N20/00,G06N5/04,H04L9/06
</ipc_classes>

<assignee>
Mesh Dynamics, Inc
</assignee>

<inventors>
LAHIRI RAHUL
GANTI, VENKATESH
Sudhakar, Ashoke
Desphande, Prasad
Vijay, Ravi
</inventors>

<docdb_family_id>
73019861
</docdb_family_id>

<title>
System and method for regression testing of an application programming interface
</title>

<abstract>
A system for testing of an application programming interface (API) is disclosed. The system includes a usage data collection source to track a trace identity associated with at least one message exchange pattern of the API using an end to end tracing (E2E) technique, captures usage data of an application in one or more modes, wherein the usage data corresponds to the trace identity. A usage data selection subsystem selects a predefined strata of usage data. A test case generation learning subsystem generates multiple test cases. A mocking subsystem use the trace identity to simulate the at least one message pattern associated with the usage data from a current version of the application against an updated version of the application. A comparison subsystem records an actual result, compares the actual result with an expected result and generates a test result upon comparison of the actual result with the expected result.
</abstract>

<claims>
We claim:
1. A system for regression testing of an application programming interface comprising: a usage data collection source configured to: track a trace identity associated with at least one message exchange pattern of the application programming interface using an end to end tracing technique; and capture usage data of an application in one or more modes, wherein the usage data corresponds to the trace identity associated with the at least one message exchange pattern; a usage data selection subsystem operatively coupled to the usage data collection source, wherein the usage data selection subsystem is configured to select a predefined strata of usage data from the usage data using a stratified sampling technique; a test case generation learning subsystem operatively coupled to the usage data selection subsystem, wherein the test case generation learning subsystem is configured to generate a plurality of test cases by learning selection of the predefined strata of usage data using a learning technique; a mocking subsystem operatively coupled to the test case generation learning subsystem, wherein the mocking subsystem is configured to use the trace identity associated with the at least one message exchange pattern of the usage data to simulate the at least one message exchange pattern from a current version of the application against an updated version of the application in a test environment for application testing; and a comparison subsystem operatively coupled to the test case generation learning subsystem, wherein the comparison subsystem is configured to: record an actual result obtained from simulation of the at least one message pattern associated with the usage data in the test environment by enabling one or more mocking services; compare the actual result with an expected result obtained from the plurality of test cases based on a predefined set of comparison rules; and generate a test result for reviewing testing of the application based on at least one difference identified upon comparison of the actual result with the expected result.
2. The system of claim 1, wherein the data collection source comprises one or more virtual agents or a log store or a combination thereof.
3. The system of claim 2, wherein the one or more agents comprises at least one of a proxy agent, a service interface agent, a platform entry agent, a function-level agent or a combination thereof.
4. The system of claim 1, wherein the at least one message exchange pattern comprises at least one of an incoming request, an incoming response, an outgoing request to an external service, an outgoing response to an external service, an outgoing request to a platform, an outgoing response to a platform or a combination thereof.
5. The system of claim 1, wherein the usage data comprises at least one of application programming interface traffic data, aggregated customer or user generated data, limited production data or a combination thereof.
6. The system of claim 1, wherein the one or more modes comprises a record mode, mock mode or a no-operation mode.
7. The system of claim 1 comprising a collector operatively coupled to the usage data collection source, wherein the collector is configured to process the usage data captured by the usage data collection source for storing in a usage data storage repository.
8. The system of claim 1, wherein the stratified sampling technique comprises at least one of a random sampling technique, a user session sampling technique, a sampling technique based on one or more parameters of the message exchange pattern of the application programming interface.
9. The system of claim 1, comprising a test configurator configured to enable one or more users to select subsets of an application to be tested with one or more live services and subsets of the application to be mocked.
10. The system of claim 1, comprising a test driver configured to drive a subset of the usage data for simulation of usage against the updated version of the application in the test environment.
11. The system of claim 1, wherein the one or more mocking services comprises at least one of mocking one or more dependent services, mocking one or more databases, mocking one or more functions associated with application testing process mocking a platform, mocking one or more internal caches or a combination thereof.
12. The system of claim 11, wherein the one or more mocking services modifies at least one response based on mocking of one or more input parameters of at least one request.
13. The system of claim 1, wherein the using the mocking subsystem utilizes the trace identity associated with the at least one request for modifying at least one response corresponding to the at least one request of a similar context to achieve fidelity mocking.
14. The system of claim 1, wherein the predefined set of comparison rules comprises a set of assertion rules for comparison of the test result, wherein the set of assertion rules comprises at least one of a data item path of the message exchange pattern, data type of the message exchange pattern, presence of an item in the message exchange pattern, data operation instruction for the message exchange pattern, comparison type for the message exchange pattern or a combination thereof.
15. The system of claim 1, further comprising a test result analysis and reporting subsystem operatively coupled to the comparison subsystem, wherein the test result analysis and reporting subsystem is configured to generate an action upon review of the test result to notify a user via a plurality of communication channels.
16. The system of claim 1, further comprising an encryption and obfuscation subsystem operatively coupled to the usage data selection subsystem, wherein the encryption and obfuscation subsystem is configured to encrypt and obfuscate one or more fields of the usage data for one or more security purposes maintaining consistency.
17. A method for regression testing of an application programming interface comprising: tracking, by a usage data collection source, a trace identity associated with at least one message exchange pattern of an application programming interface (API) using an end to end (E2E) tracing technique; capturing, by the usage data collection source, usage data of an application in one or more modes, wherein the usage data corresponds to the trace identity associated with the at least one message exchange pattern; selecting, by a usage data selection subsystem, a predefined strata of usage data from the usage data using a stratified sampling technique; generating, by a test case generation learning subsystem, a plurality of test cases by learning selection of the predefined strata from the captured usage data using a learning technique; using, by a mocking subsystem, the trace identity associated with the at least one message pattern of the usage data to simulate the at least one message exchange pattern from a current version of the application against an updated version of the application in a test environment for application testing; recording, by a comparison subsystem, an actual result obtained from simulation of the at least one message pattern associated with the usage data in the test environment by enabling one or more mocking services; comparing, by the comparison subsystem, the actual result with an expected result obtained from the plurality of test cases based on a predefined set of comparison rules; and generating, by the comparison subsystem, a test result for reviewing testing of the application based on at least one difference identified upon comparison of the actual result with the expected result.
18. The method of claim 17, wherein capturing the usage data of the application in the one or more modes comprises capturing the usage data in a record mode or a no-operation mode.
19. The method of claim 17, further comprising notifying, by a test result analysis and reporting subsystem, to generate an action upon review of the test result to notify a user via a plurality of communication channels.
20. The method of claim 17, further comprising encrypting and obfuscating, by an encryption and obfuscation subsystem, one or more fields of the usage data for one or more security purposes.
</claims>
</document>
