<document>

<filing_date>
2019-02-21
</filing_date>

<publication_date>
2020-08-27
</publication_date>

<priority_date>
2019-02-21
</priority_date>

<ipc_classes>
G06F11/07,G06F8/61,G06N20/00,G06N3/02
</ipc_classes>

<assignee>
TELEFONAKTIEBOLAGET LM ERICSSON (PUBL)
</assignee>

<inventors>
BEHRENS, STEFAN
HERMANNS, NIKOLAS
MÃ…NGS, JAN-ERIK
</inventors>

<docdb_family_id>
65520296
</docdb_family_id>

<title>
TRAINING A MODEL FOR USE WITH A SOFTWARE INSTALLATION PROCESS
</title>

<abstract>
There is provided a method of training a model for use with a software installation process. A software installation process is run a plurality of times (102). Each time the software installation process is run, one parameter in a set of parameters with which the software installation process is run is changed to generate a respective software installation process output (104). Each software installation process output is used with its respective set of parameters to train a model (106). The model is trained to identify one or more parameters that are a cause of a failed software installation process based on the output of the failed software installation process.
</abstract>

<claims>
1. A method of training a model for use with a software installation process, the method comprising:
running (102) a software installation process (408) a plurality of times;
each time the software installation process (408) is run:
changing (104) one parameter in a set of parameters (404) with which the software installation process (408) is run to generate a respective software installation process output (410); and
using (106) each software installation process output (410) with its respective set of parameters (404) to train a model (416), wherein the model (416) is trained to identify one or more parameters that are a cause of a failed software installation process based on the output of the failed software installation process. 2. A method as claimed in claim 1 , wherein the method comprises:
in response to a failed software installation process:
using the trained model (416) to identify one or more parameters that are a cause of the failed software installation process based on the output of the failed software installation process.
3. A method as claimed in any of the preceding claims, the method comprising: generating a label vector (406) to represent the set of parameters (404).
4. A method as claimed in any of the preceding claims, wherein the label vector (406) comprises a plurality of items, each item representative of a parameter in the set of parameters (404).
5. A method as claimed in claim 4, wherein each time one parameter in the set of parameters (404) is changed, the item representative of the changed parameter in the set of parameters (404) has a first value and the items representative of all other parameters in the set of parameters (404) have a second value, wherein the second value is different to the first value.
6. A method as claimed in any of the preceding claims, the method comprising: converting each software installation process output (410) into a feature vector
(414).
7. A method as claimed in claim 6, wherein the feature vector (414) comprises a plurality of items, each item representative of a feature of the software installation process output (410) and having a value indicative of whether the item represents a particular feature of the software installation process output.
8. A method as claimed in claim 7, wherein each item representative of the particular feature of the software installation process output (410) has a first value and each item representative of other features of the software installation process output (410) has a second value, wherein the second value is different to the first value.
9. A method as claimed in any of the preceding claims, wherein the model (416) is further trained to indicate a probability that the one or more identified parameters are the cause of the failed software installation process based on the output of the failed software installation process.
10. A method as claimed in any of the preceding claims, the method comprising: further training the trained model (416) based on feedback from a user (508), wherein the feedback from the user (508) comprises an indication of a failed software installation process output with its respective set of parameters.
1 1. A method as claimed in any of the preceding claims, wherein the respective software installation process outputs (410) comprise one or more failed software installation process outputs.
12. A method as claimed in claim 11 , where the respective software installation process outputs (410) comprise one or more successful software installation process outputs.
13. A method as claimed in claim 12, wherein the method comprises:
filtering the failed software installation process outputs based on the successful software installation process outputs.
14. A method as claimed in any of the preceding claims, wherein the software installation process is:
a software installation process that is run for the first time; or
an upgrade of previously run software installation process.
15. A system (10) configured to operate in accordance with any of claims 1 to 14.
16. A system (10) as claimed in claim 15, wherein the system (10) comprises:
processing circuitry (12); and
at least one memory (14) for storing instructions which, when executed by the processing circuitry (12), cause the system (10) to operate in accordance with any of claims 1 to 14.
17. A method of using a trained model with a software installation process, the method comprising:
running (202) a software installation process (408) with a set of parameters to generate an output; and
in response to a failure of the software installation process:
using a trained model (416) to identify which one or more parameters in the set of parameters are a cause of the failed software installation process based on the output of the failed software installation process.
18. A method as claimed in claim 17, wherein the trained model generates a label vector (504) comprising a plurality of items, each item representative of a parameter in the set of parameters (404) and having a value indicative of whether the parameter causes the software installation process to fail.
19. A method as claimed in any of claims 17 or 18, the method comprising:
using the trained model (416) to indicate a probability that the one or more identified parameters are the cause of the failed software installation process based on the output of the failed software installation process.
20. A method as claimed in claim 19, wherein the trained model generates a label vector (504) comprising a plurality of items, each item representative of a parameter in the set of parameters (404) and having a value indicative of a probability that the parameter causes the software installation process to fail.
21. A method as claimed in any of claims 17 to 20, wherein the failed software installation is:
a failed software installation process that is run for the first time; or a failed upgrade of previously run software installation process.
22. A system (20) configured to operate in accordance with any of claims 17 to 21.
23. A system (20) as claimed in claim 22, wherein the system (20) comprises:
processing circuitry (22); and
at least one memory (24) for storing instructions which, when executed by the processing circuitry (22), cause the system (20) to operate in accordance with any of claims 17 to 21.
24. A computer program comprising instructions which, when executed by processing circuitry, cause the processing circuitry to perform the method according to any of claims 1 to 14 or any of claims 17 to 21.
25. A computer program product, embodied on a non-transitory machine-readable medium, comprising instructions which are executable by processing circuitry to cause the processing circuitry to perform the method according to any of claims 1 to 14 or any of claims 17 to 21.
</claims>
</document>
