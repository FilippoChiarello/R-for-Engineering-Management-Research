<document>

<filing_date>
2018-12-28
</filing_date>

<publication_date>
2020-08-25
</publication_date>

<priority_date>
2018-12-28
</priority_date>

<ipc_classes>
G06T1/60,G06T15/06,G06T5/00,G06T9/00
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
APODACA, MICHAEL
XIAO KAI
BENTHIN, CARSTEN
BROWNLEE, CARSON
VAIDYANATHAN, KARTHIK
BARCZAK, JOSHUA
RAOUX, THOMAS
</inventors>

<docdb_family_id>
68290176
</docdb_family_id>

<title>
Apparatus and method for ray tracing instruction processing and execution
</title>

<abstract>
An apparatus and method to execute ray tracing instructions. For example, one embodiment of an apparatus comprises execution circuitry to execute a dequantize instruction to convert a plurality of quantized data values to a plurality of dequantized data values, the dequantize instruction including a first source operand to identify a plurality of packed quantized data values in a source register and a destination operand to identify a destination register in which to store a plurality of packed dequantized data values, wherein the execution circuitry is to convert each packed quantized data value in the source register to a floating point value, to multiply the floating point value by a first value to generate a first product and to add the first product to a second value to generate a dequantized data value, and to store the dequantized data value in a packed data element location in the destination register.
</abstract>

<claims>
1. An apparatus comprising: a ray generation circuit to generate rays for traversal through a graphics scene; a hierarchical acceleration data structure generation circuit to construct a hierarchical acceleration data structure comprising a plurality of hierarchically arranged nodes, traversal/intersection circuitry to traverse one or more of the rays through the hierarchical acceleration data structure and intersect the one or more rays with primitives contained within the hierarchically arranged nodes; wherein at least one of the ray generation circuit, hierarchical acceleration data structure generation circuit, and traversal/intersection circuitry are to quantize a plurality of data values to generate a plurality of quantized data values, respectively; and execution circuitry to execute a dequantize instruction to convert the plurality of quantized data values to a plurality of dequantized data values, the dequantize instruction including a first source operand to identify the plurality of quantized data values in a source register, a second source operand to identify a source data value, and a destination operand to identify a destination register in which to store the plurality of dequantized data values, wherein the execution circuitry is to convert each quantized data value in the source register to a floating point value, to multiply the floating point value by a first value to generate a first product, wherein the first value is generated based on the source data value identified in the dequantize instruction, and to add the first product to a second value to generate a corresponding dequantized data value, and to store the corresponding dequantized data value in a packed data element location in the destination register.
2. The apparatus of claim 1 wherein the packed data element location in the destination register is selected to correspond to a packed data element location in the source register from which the quantized data value was read.
3. The apparatus of claim 1 wherein the operation of generating the first value comprises an integral power of the source data value in a second source register.
4. The apparatus of claim 1 wherein the second value is read from a third source register.
5. The apparatus of claim 1 wherein the execution circuitry is to read a bitmask value comprising a plurality of bits, each bit associated with one of the quantized data values in the source register, wherein the execution circuitry is to generate dequantized data values for only those quantized data values associated with a set bit value in the bitmask.
6. The apparatus of claim 5 wherein the quantized data values comprise unsigned byte values and the dequantized data values comprise 32-bit floating point values.
7. The apparatus of claim 6 wherein the execution circuitry is to generate the first value by performing an operation using the source data value stored in a second source register, the source data value comprising a single byte value, and wherein the execution circuitry is to read the second value from another source data value stored in a third source register, the another source data value comprising a 32-bit floating point value.
8. A method comprising: generating rays for traversal through a graphics scene; constructing a hierarchical acceleration data structure comprising a plurality of hierarchically arranged nodes, traversing one or more of the rays through the hierarchical acceleration data structure and intersecting the one or more rays with primitives contained within the hierarchically arranged nodes; wherein at least one of the operations of generating, constructing, and traversing perform quantization of a plurality of data values to generate a plurality of quantized data values, respectively; and executing a dequantize instruction to convert the plurality of quantized data values to a plurality of dequantized data values, the dequantize instruction including a first source operand to identify a plurality of quantized data values in a source register, a second source operand to identify a source data value, and a destination operand to identify a destination register in which to store a plurality of dequantized data values, wherein executing comprises: converting each quantized data value in the source register to a floating point value, multiplying the floating point value by a first value to generate a first product, wherein the first value is generated based on the source data value, adding the first product to a second value to generate a corresponding dequantized data value, and storing the corresponding dequantized data value in a packed data element location in the destination register.
9. The method of claim 8 wherein the packed data element location in the destination register is selected to correspond to a data element location in the source register from which the quantized data value was read.
10. The method of claim 8 wherein the operation of generating the first value comprises an integral power of the source data value in a second source register.
11. The method of claim 8 wherein the second value is read from a third source register.
12. The method of claim 8 further comprising: reading bitmask value comprising a plurality of bits, each bit associated with one of the quantized data values in the source register, and generating dequantized data values for only those quantized data values associated with a set bit value in the bitmask.
13. The method of claim 12 wherein the quantized data values comprise unsigned byte values and the dequantized data values comprise 32-bit floating point values.
14. The method of claim 13 further comprising: generating the first value by performing an operation using the source data value stored in a second source register, the source data value comprising a single byte value, and reading the second value from another source data value stored in a third source register, the another source data value comprising a 32-bit floating point value.
15. A non-transitory machine-readable medium having program code stored thereon which, when executed by a machine, causes the machine to perform the operations of: generating rays for traversal through a graphics scene; constructing a hierarchical acceleration data structure comprising a plurality of hierarchically arranged nodes, traversing one or more of the rays through the hierarchical acceleration data structure and intersecting the one or more rays with primitives contained within the hierarchically arranged nodes; wherein at least one of the operations of generating, constructing, and traversing perform quantization of a plurality of data values to generate a plurality of quantized data values, respectively; and executing a dequantize instruction to convert the plurality of quantized data values to a plurality of dequantized data values, the dequantize instruction including a first source operand to identify a plurality of quantized data values in a source register, a second source operand to identify a source data value, and a destination operand to identify a destination register in which to store a plurality of dequantized data values, wherein executing comprises: converting each quantized data value in the source register to a floating point value, multiplying the floating point value by a first value to generate a first product, wherein the first value is generated based on the source data value, adding the first product to a second value to generate a corresponding dequantized data value, and storing the corresponding dequantized data value in a packed data element location in the destination register.
16. The non-transitory machine-readable medium of claim 15 wherein the packed data element location in the destination register is selected to correspond to a data element location in the source register from which the quantized data value was read.
17. The non-transitory machine-readable medium of claim 15 wherein the operation of generating the first value comprises an integral power of the source data value in a source register.
18. The non-transitory machine-readable medium of claim 15 wherein the second value is read from a third source register.
19. The non-transitory machine-readable medium of claim 15 further comprising: reading bitmask value comprising a plurality of bits, each bit associated with one of the quantized data values in the source register, and generating dequantized data values for only those quantized data values associated with a set bit value in the bitmask.
20. The non-transitory machine-readable medium of claim 19 wherein the quantized data values comprise unsigned byte values and the dequantized data values comprise 32-bit floating point values.
21. The non-transitory machine-readable medium of claim 20 further comprising: generating the first value by performing an operation using the source data value stored in a second source register, the source data value comprising a single byte value, and reading the second value from another source data value stored in a third source register, the another source data value comprising a 32-bit floating point value.
</claims>
</document>
