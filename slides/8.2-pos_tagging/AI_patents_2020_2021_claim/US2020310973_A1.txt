<document>

<filing_date>
2019-03-27
</filing_date>

<publication_date>
2020-10-01
</publication_date>

<priority_date>
2019-03-27
</priority_date>

<ipc_classes>
G06F12/0811,G06F12/0837,G06F16/907,G06F9/38,H04L9/06
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
COORAY, NIRANJAN, L.
SURTI, PRASOONKUMAR
KOKER, ALTUG
RAY, JOYDEEP
SILVAS, RONALD W.
FEIT, JOHN H.
APPU, ABHISHEK R.
KRISHNAN, VIDHYA
</inventors>

<docdb_family_id>
72605650
</docdb_family_id>

<title>
Control surface access using flat memory mapping
</title>

<abstract>
Embodiments described herein provide an apparatus comprising a processor to allocate a first memory space for data for a graphics workload, the first memory comprising a first plurality of addressable memory locations, allocate a second memory space for compression metadata relating to the data for the graphics workload, the second memory space comprising a second plurality of addressable memory locations and having an amount of memory corresponding to a predetermined ratio of the amount of memory allocated to first memory space, and configure a direct memory mapping between the first plurality of addressable memory locations and the second plurality of addressable memory locations. Other embodiments may be described and claimed.
</abstract>

<claims>
1. An apparatus, comprising: a processor to: allocate a first memory space for data for a graphics workload, the first memory comprising a first plurality of addressable memory locations; allocate a second memory space for compression metadata relating to the data for the graphics workload, the second memory space comprising a second plurality of addressable memory locations and having an amount of memory corresponding to a predetermined ratio of the amount of memory allocated to first memory space; configure a direct memory mapping between the first plurality of addressable memory locations and the second plurality of addressable memory locations; and repack the compression metadata in the second memory space using a hash function that relates a first addressable memory location in the second memory space to a second addressable memory location in the second memory space.
2. The apparatus of claim 1, wherein the predetermined ratio of the amount of memory allocated to the first memory space to the amount of memory in the second memory space is 256:1.
3. The apparatus of claim 1, the processor to: receive a memory access request for data for the graphics workload, the data access request comprising a first memory address in the first memory space; determine, from the first memory address, a second memory address space in the second memory space; and retrieve, from the second memory address, the compression metadata stored therein.
4. The apparatus of claim 3, the processor to: retrieve, from the first memory address, the data for the graphics workload; and use the compression metadata to facilitate decompression of the data for the graphics in the first memory address in the first memory space.
5. (canceled)
6. The apparatus of claim 1, the processor to: receive a memory access request for data for the graphics workload, the data access request comprising a first memory address in the first memory space; determine, from the first memory address and the hash function, a second memory address space in the second memory space; and retrieve, from the second memory address, the compression metadata stored therein.
7. The apparatus of claim 6, the processor to: retrieve, from the first memory address, the data for the graphics workload; and use the compression metadata to facilitate decompressing the data for the graphics in the first memory address in the first memory space.
8. A non-transitory machine readable medium storing instructions which, when executed by one or more processors, cause the one or more processors to: allocate a first memory space for data for a graphics workload, the first memory comprising a first plurality of addressable memory locations; allocate a second memory space for compression metadata relating to the data for the graphics workload, the second memory space comprising a second plurality of addressable memory locations and having an amount of memory corresponding to a predetermined ratio of the amount of memory allocated to first memory space; configure a direct memory mapping between the first plurality of addressable memory locations and the second plurality of addressable memory locations; and repack the compression metadata in the second memory space using a hash function that relates a first addressable memory location in the second memory space to a second addressable memory location in the second memory space.
9. The non-transitory machine readable medium of claim 8, wherein the predetermined ratio of the amount of memory allocated to the first memory space to the amount of memory in the second memory space is 256:1.
10. The non-transitory machine readable medium of claim 8, further comprising instructions which configure the processor to: receive a memory access request for data for the graphics workload, the data access request comprising a first memory address in the first memory space; determine, from the first memory address, a second memory address space in the second memory space; and retrieve, from the second memory address, the compression metadata stored therein.
11. The non-transitory machine readable medium of claim 10, further comprising instructions which configure the processor to: retrieve, from the first memory address, the data for the graphics workload; and use the compression metadata to facilitate decompression of the data for the graphics in the first memory address in the first memory space.
12. (canceled)
13. The non-transitory machine readable medium of claim 8, further comprising instructions which configure the processor to: receive a memory access request for data for the graphics workload, the data access request comprising a first memory address in the first memory space; determine, from the first memory address and the hash function, a second memory address space in the second memory space; and retrieve, from the second memory address, the compression metadata stored therein.
14. The non-transitory machine readable medium of claim 13, further comprising instructions which configure the processor to: retrieve, from the first memory address, the data for the graphics workload; and use the compression metadata to facilitate decompressing the data for the graphics in the first memory address in the first memory space.
15. A computer-implemented method, comprising: allocating a first memory space for data for a graphics workload, the first memory comprising a first plurality of addressable memory locations; allocating a second memory space for compression metadata relating to the data for the graphics workload, the second memory space comprising a second plurality of addressable memory locations and having an amount of memory corresponding to a predetermined ratio of the amount of memory allocated to first memory space; configuring a direct memory mapping between the first plurality of addressable memory locations and the second plurality of addressable memory locations; and repacking the compression metadata in the second memory space using a hash function that relates a first addressable memory location in the second memory space to a second addressable memory location in the second memory space.
16. The method of claim 15, wherein the predetermined ratio of the amount of memory allocated to the first memory space to the amount of memory in the second memory space is 256:1.
17. The method of claim 15, further comprising: receiving a memory access request for data for the graphics workload, the data access request comprising a first memory address in the first memory space; determining, from the first memory address, a second memory address space in the second memory space; and retrieving, from the second memory address, the compression metadata stored therein.
18. The method of claim 17, further comprising: retrieving, from the first memory address, the data for the graphics workload; and using the compression metadata to facilitate decompression of the data for the graphics in the first memory address in the first memory space.
19. (canceled)
20. The method of claim 15, further comprising: receiving a memory access request for data for the graphics workload, the data access request comprising a first memory address in the first memory space; determining, from the first memory address and the hash function, a second memory address space in the second memory space; and retrieving, from the second memory address, the compression metadata stored therein.
21. The method of claim 20, further comprising: retrieving, from the first memory address, the data for the graphics workload; and using the compression metadata to facilitate decompressing the data for the graphics in the first memory address in the first memory space.
</claims>
</document>
