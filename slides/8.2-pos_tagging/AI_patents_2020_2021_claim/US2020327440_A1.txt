<document>

<filing_date>
2020-04-09
</filing_date>

<publication_date>
2020-10-15
</publication_date>

<priority_date>
2019-04-09
</priority_date>

<ipc_classes>
G06F17/11,G06K9/62,G06N10/00,G06N20/00
</ipc_classes>

<assignee>
ZAPATA COMPUTING
</assignee>

<inventors>
CAO, YUDONG
</inventors>

<docdb_family_id>
72748108
</docdb_family_id>

<title>
Discrete Optimization Using Continuous Latent Space
</title>

<abstract>
A hybrid quantum-classical computer enhances discrete optimization by minimizing an objective function which maps from a domain of discrete objects to real numbers obtained from a continuous latent space. Samples are generated, drawn in a discrete space. An encoding function is trained to map from the discrete space to the continuous latent space, and a decoding function is trained to map from the continuous latent space to the discrete space. For each sample, its objective function value is evaluated. Using pairs as training data, another function is learned and established as a proxy for the objective function. An optimization routine is used to find a new latent space point, which yields a more optimized function value compared with the point mapped from the training data.
</abstract>

<claims>
1. A method performed by a hybrid quantum-classical computer for enhancing a discrete optimization problem by minimizing an objective function f which maps from a domain of discrete objects to numbers obtained from a continuous latent space, the hybrid quantum classical computer comprising: a quantum computing component comprising a plurality of qubits, and a classical computing component comprising at least one processor and a non-transitory computer-readable memory, the non-transitory computer-readable memory comprising computer program instructions which, when executed by the at least one processor, perform a method comprising: (A) generating, by a candidate solution generator on the classical computing component, N samples xi for i=1 to N, drawn in a discrete space; and wherein the quantum computing component is adapted to perform steps of: (B) training, on the quantum computing component, an encoding function fE to map from the discrete space to the continuous latent space; (C) training, on the quantum computing component, a decoding function fD to map from the continuous latent space to the discrete space, wherein the encoding function fE and the decoding function fD satisfy xi≈fE(fD(xi)) for any i=and wherein the method performed by the at least one processor further comprises: (D) evaluating, on the classical computing component, for each of the samples xi, its objective function value yi=f(xi) to produce yi as output; (E) performing supervised learning on the quantum computing component, utilizing pairs (fE(xi), yi) as training data, to learn another function fH, such that the resulting function satisfies fH(fE(xi))≈yi; and (F) performing, on the quantum computing component, an optimization on fH to find, and produce as output: (1) a global optimum y*, and (2) a new latent space point y′, such that |y*−y′|<|y*−yi|.
2. The method of claim 1, further including mapping, on the classical computing component, the latent space point y′from the continuous latent space to the discrete space by the decoding function fD to produce as output a new sample x′=fD(y′).
3. The method of claim 2, further comprising evaluating, by the classical computing component, a quality of x′ by: (1) determining whether x′ is a feasible solution to the discrete optimization problem, and then (2) determining whether x′ is sufficiently optimal.
4. The method of claim 3, further comprising, on the classical computing component: if x′ is determined not to be feasible, then discarding x′, and repeating (A) to produce a new sample and repeating (B)-(F); if x′ is determined to be feasible but not sufficiently optimal, then repeating (A) to add x′ to the samples xi, and repeating (B)-(F); and if x′ is sufficiently optimal, then terminating the method and outputting x′ as a solution to the discrete optimization problem.
5. The method of claim 1, further comprising, at the quantum computing component, defining the continuous latent space as a space of quantum states.
6. The method of claim 1, further comprising, at the classical computing component, defining the continuous latent space as a classical state space.
7. A hybrid quantum-classical computer for enhancing a discrete optimization problem by minimizing an objective function f which maps from a domain of discrete objects to numbers obtained from a continuous latent space, the hybrid quantum-classical computer comprising: a classical computing component comprising at least one processor and a non-transitory computer-readable memory; and a quantum computing component comprising a plurality of qubits; wherein the non-transitory computer-readable memory of the classical computing component further comprises computer program instructions executable by the at least one processor to perform a method comprising: (A) generating, by a candidate solution generator on the classical computing component, N samples for i=1 to N, drawn in a discrete space; and wherein the quantum computing component is adapted to perform steps of: (B) training, on the quantum computing component, an encoding function fE to map from the discrete space to the continuous latent space; (C) training, on the quantum computing component, a decoding function fD to map from the continuous latent space to the discrete space, wherein the encoding function fE and the decoding function fD satisfy xi≈fE(fD(xi)) for any i=1, . . . , N; and wherein the method performed by the at least one processor further comprises: (D) evaluating, on the classical computing component, for each of the samples xi, its objective function value yi=f(xi) to produce yi as output; (E) performing supervised learning on the classical computing component, utilizing pairs (fE(xi), yi) as training data, to learn another function fH, such that the resulting function satisfies fH(fE(xi))≈yi; and (F) performing, on the classical computing component, an optimization on fH to find, and produce as output: (1) a global optimum y*, and (2) a new latent space point y′, such that |y*−y′|<|y*−yi|.
8. The hybrid quantum-classical computer of claim 7, wherein the method further comprises mapping, on the classical computing component, the latent space point y′ from the continuous latent space to the discrete space by the decoding function fd to produce as output a new sample x′=fD(y′).
9. The hybrid quantum-classical computer of claim 8, wherein the method further comprises evaluating, by the classical computing component, a quality of x′ by: (1) determining whether x′ is a feasible solution to the discrete optimization problem, and then (2) determining whether x′ is sufficiently optimal.
10. The hybrid quantum-classical computer of claim 9, wherein the method further comprises, on the classical computing component: if x′ is determined not to be feasible, then discarding x′, and repeating (A) to produce a new sample and repeating (B)-(F); if x′ is determined to be feasible but not sufficiently optimal, then repeating (A) to add x′ to the samples xi, and repeating (B)-(F) ; and if x′ is sufficiently optimal, then terminating the method and outputting x′ as a solution to the discrete optimization problem.
11. The hybrid quantum-classical computer of claim 7, wherein the method further comprises, at the quantum computing component, defining the continuous latent space as a space of quantum states.
12. The hybrid quantum-classical computer of claim 7, wherein the method further comprises, at the classical computing component, defining the continuous latent space as a classical state space.
</claims>
</document>
