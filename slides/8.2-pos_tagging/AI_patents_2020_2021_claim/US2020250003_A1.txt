<document>

<filing_date>
2018-06-29
</filing_date>

<publication_date>
2020-08-06
</publication_date>

<priority_date>
2017-12-28
</priority_date>

<ipc_classes>
G06F9/50,G06K9/00,G06N3/04,G06N3/063
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
SMITH NED M.
SOMAYAZULU, VALLABHAJOSYULA, S.
SCHOOLER, EVE M.
KESHAVAMURTHY, ANIL S.
BARTFAI-WALCOTT, KATALIN KLARA
SANJAY, ADDICAM, V.
DATTA, KUSHAL
TICKOO, OMESH
HAHN SCOTT D.
MOUSTAFA, HASSNAA
ILLIKKAL, RAMESHKUMAR
VEMBAR, DEEPAK S.
DULLOOR, SUBRAMANYA R.
SARWAR, USMAN
ZAMORA ESQUIVEL, JULIO C.
CHEN YEN-KUANG
VARADARAJAN, SRENIVAS
YANG SHAOWEN
FLOREZ CHOQUE, OMAR ULISES
RAGHUNATH ARUN
REMIS, LUIS CARLOS MARIA
CHIN, SIEW WEN
HYDE, MARUTI GUPTA
KAMAROL, SITI KHAIRUNI AMALINA
NDIOUR, IBRAHIMA J.
MILLSAP, MICHAEL G.
STRONG, CHRISTINA R.
LIAO, YI-TING
GUPTA, VISHAKHA
MCCARTHY, JESSICA
LAU, HENG KAR
MUNOZ CHIABRANDO, JUAN PABLO
VARGAS, JESÃšS A. CRUZ
JAIN, NILESH KUMAR
LEFMAN, JONATHAN A.
ALTARAWNEH, RAGAAD MOHAMMED IRSEHID
</inventors>

<docdb_family_id>
65230711
</docdb_family_id>

<title>
VISUAL FOG
</title>

<abstract>
In one embodiment, an apparatus comprises a processor to: identify a workload comprising a plurality of tasks; generate a workload graph based on the workload, wherein the workload graph comprises information associated with the plurality of tasks; identify a device connectivity graph, wherein the device connectivity graph comprises device connectivity information associated with a plurality of processing devices; identify a privacy policy associated with the workload; identify privacy level information associated with the plurality of processing devices; identify a privacy constraint based on the privacy policy and the privacy level information; and determine a workload schedule, wherein the workload schedule comprises a mapping of the workload onto the plurality of processing devices, and wherein the workload schedule is determined based on the privacy constraint, the workload graph, and the device connectivity graph. The apparatus further comprises a communication interface to send the workload schedule to the plurality of processing devices.
</abstract>

<claims>
1. 1.-8. (canceled)
9. A processing device for scheduling workloads of a visual computing application on a distributed computing infrastructure, comprising: interface circuitry to communicate over a network; and processing circuitry to: receive, via the interface circuitry, a request to perform a workload for the visual computing application, wherein the workload is to be scheduled across a set of compute resources on a plurality of devices within the distributed computing infrastructure; receive, via the interface circuitry, resource telemetry data indicating an available resource capacity for the set of compute resources; identify a collection of vision capability implementations available for performing the workload, wherein the vision capability implementations are for performing one or more vision capabilities of the workload on a plurality of resource types corresponding to the set of compute resources; determine, based on the resource telemetry data and the collection of vision capability implementations, a workload schedule for the workload, wherein the workload schedule comprises a mapping of the workload onto the set of compute resources on the plurality of devices within the distributed computing infrastructure; and send, via the interface circuitry, the workload schedule to the plurality of devices, wherein the workload is to be performed by the set of compute resources on the plurality of devices based on the workload schedule.
10. The processing device of claim 9, wherein the processing circuitry to identify the collection of vision capability implementations available for performing the workload is further to: receive, via the interface circuitry, vision capability data from a vision capability repository, wherein the vision capability repository stores a plurality of vision capability implementations for a plurality of vision capabilities, and wherein the vision capability data indicates the collection of vision capability implementations that are available for performing the workload.
11. The processing device of claim 9, wherein the one or more vision capabilities of the workload comprise: a facial recognition capability; an object detection capability; or a gesture recognition capability.
12. The processing device of claim 9, wherein: the one or more vision capabilities of the workload comprise a first vision capability and a second vision capability; and the collection of vision capability implementations comprises: a first set of vision capability implementations for performing the first vision capability on the plurality of resource types; and a second set of vision capability implementations for performing the second vision capability on the plurality of resource types.
13. The processing device of claim 12, wherein the first set of vision capability implementations comprises: a first set of software implementations of the first vision capability for a first resource type from the plurality of resource types; and a second set of software implementations of the first vision capability for a second resource type from the plurality of resource types.
14. The processing device of claim 9, wherein the plurality of resource types comprises central processing units, graphics processing units, and special-purpose accelerators.
15. The processing device of claim 14, wherein the special-purpose accelerators comprise hardware video coders and neural network processors.
16. The processing device of claim 14, wherein the special-purpose accelerators comprise field-programmable gate array (FPGA) accelerators and application-specific integrated circuit (ASIC) accelerators.
17. At least one non-transitory machine-readable storage medium having instructions stored thereon, wherein the instructions, when deployed and executed on processing circuitry, cause the processing circuitry to: receive, via interface circuitry, a request to perform a workload for a visual computing application, wherein the workload is to be scheduled across a set of compute resources on a plurality of devices within a distributed computing infrastructure; receive, via the interface circuitry, resource telemetry data indicating an available resource capacity for the set of compute resources; identify a collection of vision capability implementations available for performing the workload, wherein the vision capability implementations are for performing one or more vision capabilities of the workload on a plurality of resource types corresponding to the set of compute resources; determine, based on the resource telemetry data and the collection of vision capability implementations, a workload schedule for the workload, wherein the workload schedule comprises a mapping of the workload onto the set of compute resources on the plurality of devices within the distributed computing infrastructure; and send, via the interface circuitry, the workload schedule to the plurality of devices, wherein the workload is to be performed by the set of compute resources on the plurality of devices based on the workload schedule.
18. The storage medium of claim 17, wherein the instructions that cause the processing circuitry to identify the collection of vision capability implementations available for performing the workload further cause the processing circuitry to: receive, via the interface circuitry, vision capability data from a vision capability repository, wherein the vision capability repository stores a plurality of vision capability implementations for a plurality of vision capabilities, and wherein the vision capability data indicates the collection of vision capability implementations that are available for performing the workload.
19. The storage medium of claim 17, wherein the one or more vision capabilities of the workload comprise: a facial recognition capability; an object detection capability; or a gesture recognition capability.
20. The storage medium of claim 17, wherein: the one or more vision capabilities of the workload comprise a first vision capability and a second vision capability; and the collection of vision capability implementations comprises: a first set of vision capability implementations for performing the first vision capability on the plurality of resource types; and a second set of vision capability implementations for performing the second vision capability on the plurality of resource types.
21. The storage medium of claim 20, wherein the first set of vision capability implementations comprises: a first set of software implementations of the first vision capability for a first resource type from the plurality of resource types; and a second set of software implementations of the first vision capability for a second resource type from the plurality of resource types.
22. The storage medium of claim 17, wherein the plurality of resource types comprises central processing units, graphics processing units, and special-purpose accelerators.
23. The storage medium of claim 22, wherein the special-purpose accelerators comprise hardware video coders and neural network processors.
24. A method for scheduling workloads of a visual computing application on a distributed computing infrastructure, comprising: receiving, via interface circuitry, a request to perform a workload for the visual computing application, wherein the workload is to be scheduled across a set of compute resources on a plurality of devices within the distributed computing infrastructure; receiving, via the interface circuitry, resource telemetry data indicating an available resource capacity for the set of compute resources; identifying a collection of vision capability implementations available for performing the workload, wherein the vision capability implementations are for performing one or more vision capabilities of the workload on a plurality of resource types corresponding to the set of compute resources; determining, based on the resource telemetry data and the collection of vision capability implementations, a workload schedule for the workload, wherein the workload schedule comprises a mapping of the workload onto the set of compute resources on the plurality of devices within the distributed computing infrastructure; and sending, via the interface circuitry, the workload schedule to the plurality of devices, wherein the workload is to be performed by the set of compute resources on the plurality of devices based on the workload schedule.
25. The method of claim 24, wherein identifying the collection of vision capability implementations available for performing the workload comprises: receiving, via the interface circuitry, vision capability data from a vision capability repository, wherein the vision capability repository stores a plurality of vision capability implementations for a plurality of vision capabilities, and wherein the vision capability data indicates the collection of vision capability implementations that are available for performing the workload.
26. The method of claim 24, wherein the one or more vision capabilities of the workload comprise: a facial recognition capability; an object detection capability; or a gesture recognition capability.
27. The method of claim 24, wherein: the one or more vision capabilities of the workload comprise a first vision capability and a second vision capability; and the collection of vision capability implementations comprises: a first set of vision capability implementations for performing the first vision capability on the plurality of resource types; and a second set of vision capability implementations for performing the second vision capability on the plurality of resource types.
28. The method of claim 27, wherein the first set of vision capability implementations comprises: a first set of software implementations of the first vision capability for a first resource type from the plurality of resource types; and a second set of software implementations of the first vision capability for a second resource type from the plurality of resource types.
</claims>
</document>
