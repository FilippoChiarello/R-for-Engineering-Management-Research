<document>

<filing_date>
2018-07-27
</filing_date>

<publication_date>
2020-03-17
</publication_date>

<priority_date>
2017-06-05
</priority_date>

<ipc_classes>
G06F8/30,G06F8/34,G06F8/36,G06F8/41,G06F8/76,H04L29/08,H04W4/80
</ipc_classes>

<assignee>
UMAJIN
</assignee>

<inventors>
BREBNER DAVID
</inventors>

<docdb_family_id>
64566675
</docdb_family_id>

<title>
Application system that enables a plurality of runtime versions of an application
</title>

<abstract>
In embodiments, a system for creating, sharing and managing digital content is presented. The system includes a visual editing environment that enables a developer to create and edit code controlling a digital content asset using a domain-specific declarative language. A script for the digital content asset is specified according to which the digital content asset is at least one of serialized and de-serialized in a host computing environment. The system includes a code execution engine that operates on code created in the visual editing environment to control execution of the code to enable utilization of the digital content asset. The visual editing environment and the code execution engine enable creation, delivery and editing of the digital content asset. The visual editing environment and the code execution engine enable multiple runtime versions, wherein the visual editing environment and the multiple runtime versions are written using the same declarative language.
</abstract>

<claims>
1. A system for creating, sharing and managing digital content, comprising: a processing system having one or more processors that execute computer-executable instructions that cause the processing system to: provide an editor and runtime infrastructure that includes: a visual editing environment configured to enable a developer to create and edit code controlling a digital content asset using a domain-specific declarative language, wherein a script for the digital content asset defines a manner by which the digital content asset is at least one of serialized and de-serialized at a host computing device, the visual editing environment configured to: display a page layout of a page of a digital content asset, receive a first user input to add a visual element to the page layout, display the visual element in the page layout, and generate code based on the page layout and the first user input such that the code causes a host computing device executing the digital content asset to display the visual element in the page of the digital content asset; and operate, by a code execution engine, on the code created in the visual editing environment to control execution of the code to enable utilization of the digital content asset, wherein the visual editing environment and the code execution engine provide for creation, delivery, and editing of the digital content asset, wherein the visual editing environment and the code execution engine enable a plurality of runtime versions, wherein the visual editing environment and each of the plurality of runtime versions are written using a same domain-specific declarative language, and wherein a plurality of end users using different devices can simultaneously experience the same behavior of the digital content asset during its creation and editing.
2. The system of claim 1, wherein the plurality of runtime versions include at least one preview version by which a user may preview the behavior of the digital content asset.
3. The system of claim 1, wherein the plurality of runtime versions include at least one portal version by which an end user may use the digital content asset.
4. The system of claim 1, wherein the script causes the digital content asset to be serialized for running at the host computing device without the need for compiling.
5. The system of claim 1, wherein serialization occurs by converting tokens into bytecodes.
6. The system of claim 5, wherein at least one of a string, a number, and an object name is stored with a bytecode for serialization.
7. The system of claim 1, wherein the script causes the digital content asset to be de-serialized for running at the host computing device without the need for compiling.
8. The system of claim 1, wherein logic for an object event within a serialized digital content asset is constrained to consist of a list of parameterized methods.
9. The system of claim 8, wherein states for a serialized digital content asset are specified in the domain-specific declarative language such that conditional logic is enabled for the digital content asset by the combination of parametrized methods and state-based code execution.
10. The system of claim 1, wherein the code execution engine controls utilization of at least one of a central processing unit ("CPU") and a graphics processing unit ("GPU") of a hardware endpoint device upon which the digital content asset runs.
11. The system of claim 10, wherein control of utilization includes specification and execution of instructions for optimization of thermal performance of the at least one the CPU and the GPU.
12. The system of claim 1, wherein the code execution engine governs execution of the code across a plurality of operating systems to provide a consistent user experience with the digital content asset.
13. The system of claim 12, wherein the operating systems are selected from the group consisting of Windows™, Mac™, Linux™, iOS™ and Android™ operating systems.
14. The system of claim 1, wherein the code execution engine enables control of network layer interactions for the digital content asset.
15. The system of claim 1, wherein the code execution engine enables control of browser interactions for the digital content asset.
16. The system of claim 15, wherein the browser interactions include Comet interactions, Hyper Text Transfer Protocol streaming interactions, Ajax push interactions, reverse Ajax interactions, secure socket interactions, and Hyper Text Transfer Protocol server push interactions.
17. The system of claim 1, wherein the code execution engine enables control of networking middleware for the digital content asset.
18. The system of claim 17, wherein the networking middleware at least one of includes and controls a networking interaction of at least one of Raknet middleware, a gaming engine, a transport layer interaction, a User Datagram Protocol interaction, a Transmission Control Protocol interaction, a 3D rendering engine, a gestural engine, a physics engine, a sound engine, and an animation engine.
19. The system of claim 1, further comprising a plug-in system configured to orchestrate components and events for the digital content asset.
20. The system of claim 19, wherein the plug-in system is a Javascript™ plug-in system.
</claims>
</document>
