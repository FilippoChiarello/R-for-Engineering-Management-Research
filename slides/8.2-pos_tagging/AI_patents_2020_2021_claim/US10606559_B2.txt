<document>

<filing_date>
2019-06-12
</filing_date>

<publication_date>
2020-03-31
</publication_date>

<priority_date>
2017-04-28
</priority_date>

<ipc_classes>
G06F7/533,G06N20/00,G06T1/20
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
FAIVISHEVSKY, LEV
BLEIWEISS, AMIT
BAR-ON, TOMER
SUBAG, JACOB
YAACOBY, EYAL
BEHAR, MICHAEL
JACOB GUY
LEIBOVICH, GAL
RYVCHIN, GALINA
BEN-ARI, ITAMAR
FAIS, YANIV
DREYFUSS, JEREMIE
</inventors>

<docdb_family_id>
61827533
</docdb_family_id>

<title>
Multiply-accumulate "0" data gating
</title>

<abstract>
In an example, an apparatus comprises a plurality of execution units and logic, at least partially including hardware logic, to gate at least one of a multiply unit or an accumulate unit in response to an input of value zero. Other embodiments are also disclosed and claimed.
</abstract>

<claims>
1. A general purpose graphics processor, comprising: an instruction cache to receive graphics processing instructions; a general-purpose graphics processing compute block comprising a plurality of graphics processing cores to perform operations to execute the graphics processing instructions; and processing circuitry to: receive, into at least one of a multiply unit or an accumulate unit, a first inference weight and a second inference weight from a layer of a convolutional neural network; and negate the second inference weight and bypass the multiply unit when at least one of the first inference weight or the second inference weight are within a threshold value of a negative one, such that the multiply unit performs no operations on the first inference weight or the second inference weight.
2. The general purpose graphics processor of claim 1, further comprising processing circuitry to: bypass the multiply unit when at least one of the first inference weight or the second inference weight is within a threshold value of a one, such that the multiply unit performs no operations on the first inference weight or the second inference weight.
3. The general purpose graphics processor of claim 2, further comprising processing circuitry to: bypass the multiply unit when at least one of the first inference weight or the second inference weight is within a threshold value of a one, such that the multiply unit performs no operations on the first inference weight or the second inference weight.
4. The general purpose graphics processor of claim 2, further comprising processing circuitry to: negate the second operand and bypass the multiplier when at least one of the first operand or the second operand is a negative one.
5. The general purpose graphics processor of claim 2, further comprising processing circuitry to: bypass the multiply unit and use a shift register when at least one of the first operand or the second operand is a power of two.
6. The general purpose graphics processor of claim 2, further comprising processing circuitry to: treat at least one of the first operand or the second operand as a zero when a value of the first operand or the second operand is within a threshold of zero.
7. The general purpose graphics processor of claim 2, further comprising processing circuitry to: treat at least one of the first operand or the second operand as a power of two when a value of the first operand or the second operand is within a threshold of a power of two.
8. The general purpose graphics processor of claim 2, further comprising a thread scheduler comprising logic, at least partially including hardware logic, to: break an input vector into a plurality of segments; and perform a dot product using the plurality of segments.
9. The general purpose graphics processor of claim 1, further comprising processing circuitry to: produce no output from the multiply unit when at least one of the first inference weight or the second inference weight is within a threshold value of zero.
10. The general purpose graphics processor of claim 1, wherein the multiply unit comprises processing circuitry to: receive the first inference weight and a first indicator of a first number of valid bits in the first inference weight; receive the second inference weight, and a second indicator of a second number of valid bits in the second inference weight; and multiply only the valid bits in the first inference weight and valid bits in the second inference weight.
11. The apparatus of claim 1, further comprising processing circuitry to: produce no output when at least one of the first inference weight or the second inference weight is within a threshold value of zero.
12. The general purpose graphics processor of claim 1, wherein the plurality of execution units are on a single integrated circuit.
13. A method, comprising: receiving graphics processing instructions in an instruction cache of a general purpose graphics processor: performing operations to execute the graphics processing instructions; and receiving, into at least one of a multiply unit or an accumulate unit of the general purpose graphics processor, a first inference weight and a second inference weight from a layer of a convolutional neural network; and negating the second inference weight and bypassing the multiply unit when at least one of the first inference weight or the second inference weight are within a threshold value of a negative one, such that the multiply unit performs no operations on the first inference weight or the second inference weight.
14. The method of claim 13, further comprising: bypassing the multiply unit when at least one of the first inference weight or the second inference weight is within a threshold value of a one, such that the multiply unit performs no operations on the first inference weight or the second inference weight.
15. The method of claim 14, further comprising: negating the second operand and bypass the multiplier when at least one of the first operand or the second operand is a negative one.
16. The method of claim 14, further comprising: bypassing the multiply unit and use a shift register when at least one of the first operand or the second operand is a power of two.
17. The method of claim 14, further comprising: treating at least one of the first operand or the second operand as a zero when a value of the first operand or the second operand is within a threshold of zero.
18. The method of claim 14, further comprising processing circuitry to: treat at least one of the first operand or the second operand as a power of two when a value of the first operand or the second operand is within a threshold of a power of two.
19. The method of claim 14, further comprising: breaking an input vector into a plurality of segments; and performing a dot product using the plurality of segments.
20. The method of claim 13, further comprising processing: producing no output from the multiply unit when at least one of the first inference weight or the second inference weight is within a threshold value of zero.
21. The method of claim 20, further comprising: bypassing the multiply unit when at least one of the first inference weight or the second inference weight is within a threshold value of a one, such that the multiply unit performs no operations on the first inference weight or the second inference weight.
22. The method of claim 13, further comprising: receiving the first inference weight and a first indicator of a first number of valid bits in the first inference weight; receiving the second inference weight, and a second indicator of a second number of valid bits in the second inference weight; and multiplying only the valid bits in the first inference weight and valid bits in the second inference weight.
23. The method of claim 13, further comprising: producing no output when at least one of the first inference weight or the second inference weight is within a threshold value of zero.
</claims>
</document>
