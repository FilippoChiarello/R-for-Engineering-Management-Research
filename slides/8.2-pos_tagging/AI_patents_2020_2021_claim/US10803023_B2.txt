<document>

<filing_date>
2017-07-11
</filing_date>

<publication_date>
2020-10-13
</publication_date>

<priority_date>
2017-04-02
</priority_date>

<ipc_classes>
G06F11/14,G06F11/20,G06F12/084,G06F16/13,G06F16/18,G06F16/182,G06F17/30,G06F3/06,H04L29/08
</ipc_classes>

<assignee>
SAS INSTITUTE
</assignee>

<inventors>
GHAZALEH, DAVID ABU
</inventors>

<docdb_family_id>
63669421
</docdb_family_id>

<title>
Techniques for reading from and writing to distributed data stores
</title>

<abstract>
Described herein are techniques for reading data from a distributed storage system and for writing data to a distributed storage system. The disclosed techniques make use of efficient computing task and thread usage to minimize or reduce overhead and improve read or write efficiency. For example, read or write tasks may handle multiple read or write operations instead of just a single operation, which may reduce overhead associated with task creation and termination. Additionally, operations within a single task may be processed in parallel. For example, the disclosed techniques provide MapReduce implementations useful in Apache Hadoop that perform better than previous MapReduce implementations.
</abstract>

<claims>
1. A system for reading files from a distributed file system, comprising: one or more processors; and a non-transitory computer readable storage medium in data communication with the one or more processors, wherein the non-transitory computer readable storage medium includes instructions that, when executed by the one or more processors, cause the one or more processors to perform operations including: obtaining a data block distribution map for a distributed file system, wherein the distributed file system corresponds to a plurality of data blocks distributed across a plurality of nodes, wherein the data block distribution map identifies which data blocks are locally stored by each node, and wherein data blocks include multiple data records; receiving a request to read a file from the distributed file system; identifying, using the data block distribution map, multiple data blocks including data responsive to the request and nodes locally storing the multiple data blocks, wherein each of the multiple data blocks corresponds to a portion of the file; assigning each of the multiple data blocks into block queues, wherein each block queue includes a separate subset of data blocks from the multiple data blocks, wherein each block queue is individually associated with a respective read task, and wherein each separate subset of data blocks assigned to a corresponding block queue includes data blocks locally stored by a node that the respective read task is operating on; instantiating, at each of multiple nodes locally storing data responsive to the request, a plurality of read tasks for reading the file from the distributed file system by adding data responsive to the request to an output file associated with the request, wherein each read task corresponds to an individual process operating on a respective node for reading data blocks locally stored on the respective node using pluralities of threads; and processing, in parallel, each plurality of read tasks instantiated at the nodes locally storing data responsive to the request, wherein processing each task includes: instantiating, for the read task, a plurality of threads for reading data responsive to the request; and processing each of the plurality of threads in parallel, wherein processing each thread includes repeating, without terminating the thread until all block assignments from the block queue associated with the read task are retrieved: retrieving a next block assignment from the block queue associated with the read task of the respective node on which the thread is processing; obtaining a next data record from local storage of the node on which the thread is processing, wherein the next data record is associated with a next data block of the next block assignment from the block queue; and adding the next data record to the output file associated with the request.
2. The system of claim 1, wherein the operations further include: returning the file as a response to the request, wherein the response corresponds to data records added to the output file by all the threads.
3. The system of claim 1, wherein processing each thread includes repeating, until all data records associated with the data block of the block assignment are added to the output file: obtaining a next data record from local storage of the particular node on which the thread is processing, wherein the next data record is associated with the data block of the block assignment; and adding the next data record to the output file associated with the request.
4. The system of claim 1, wherein processing each thread includes terminating the thread when all block assignments from the block queue associated with the read task are retrieved.
5. The system of claim 1, wherein a maximum number of read tasks instantiated at the nodes locally storing data responsive to the request is configurable.
6. The system of claim 1, wherein a maximum number of threads instantiated by each read task is configurable.
7. The system of claim 1, wherein the distributed file system corresponds to a Hadoop Distributed File System.
8. The system of claim 1, wherein each read task corresponds to a custom MapReduce task.
9. The system of claim 1, wherein obtaining the data record from local storage of the particular node on which the thread is processing includes instantiating an HCatalog reader object, calling the HCatalog reader object, and reading the data record from local storage using the HCatalog reader object.
10. The system of claim 1, wherein the data block distribution map corresponds to a split distribution map, and wherein each data block is associated with a split.
11. A computer-program product for reading files from a distributed file system, the computer-program product tangibly embodied in a non-transitory computer readable storage medium comprising instructions configured to, when executed by one or more processors, cause the one or more processors to perform operations including: obtaining a data block distribution map for a distributed file system, wherein the distributed file system corresponds to a plurality of data blocks distributed across a plurality of nodes, wherein the data block distribution map identifies which data blocks are locally stored by each node, and wherein data blocks include multiple data records; receiving a request to read a file from the distributed file system; identifying, using the data block distribution map, multiple data blocks including data responsive to the request and nodes locally storing the multiple data blocks, wherein each of the multiple data blocks corresponds to a portion of the file; assigning each of the multiple data blocks into block queues, wherein each block queue includes a separate subset of data blocks from the multiple data blocks, wherein each block queue is individually associated with a respective read task of, and wherein each separate subset of data blocks assigned to a corresponding block queue includes data blocks locally stored by a node that the respective read task is operating on; instantiating, at each of multiple nodes locally storing data responsive to the request, a plurality of read tasks for reading the file from the distributed file system by adding data responsive to the request to an output file associated with the request, wherein each read task corresponds to an individual process operating on a respective node for reading data blocks locally stored on the respective node using pluralities of threads; and processing, in parallel, each plurality of read tasks instantiated at the nodes locally storing data responsive to the request, wherein processing each read task includes: instantiating, for the read task, a plurality of threads for reading data responsive to the request; and processing each of the plurality of threads in parallel, wherein processing each thread includes repeating, without terminating the thread until all block assignments from the block queue associated with the read task are retrieved: retrieving a next block assignment from the block queue associated with the read task of the respective node on which the thread is processing; obtaining a next data record from local storage of the node on which the thread is processing, wherein the next data record is associated with a next data block of the next block assignment from the block queue; and adding the next data record to the output file associated with the request.
12. The computer-program product of claim 11, wherein the operations further include: returning the file as a response to the request, wherein the response corresponds to data records added to the output file by all the threads.
13. The computer-program product of claim 11, wherein processing each thread includes repeating, until all data records associated with the data block of the block assignment are added to the output file: obtaining a next data record from local storage of the particular node on which the thread is processing, wherein the next data record is associated with the data block of the block assignment; and adding the next data record to the output file associated with the request.
14. The computer-program product of claim 11, wherein processing each thread includes terminating the thread when all block assignments from the block queue associated with the respective read task are retrieved.
15. The computer-program product of claim 11, wherein a maximum number of read tasks instantiated at the nodes locally storing data responsive to the request is configurable.
16. The computer-program product of claim 11, wherein a maximum number of threads instantiated by each read task is configurable.
17. The computer-program product of claim 11, wherein the distributed file system corresponds to a Hadoop Distributed File System.
18. The computer-program product of claim 11, wherein each read task corresponds to a custom MapReduce task.
19. The computer-program product of claim 11, wherein obtaining the data record from local storage of the particular node on which the thread is processing includes instantiating an HCatalog reader object, calling the HCatalog reader object, and reading the data record from local storage using the HCatalog reader object.
20. The computer-program product of claim 11, wherein the data block distribution map corresponds to a split distribution map, and wherein each data block is associated with a split.
21. A computer implemented method for reading files from a distributed file system, comprising: obtaining a data block distribution map for a distributed file system, wherein the distributed file system corresponds to a plurality of data blocks distributed across a plurality of nodes, wherein the data block distribution map identifies which data blocks are locally stored by each node, and wherein data blocks include multiple data records; receiving a request to read a file from the distributed file system; identifying, using the data block distribution map, multiple data blocks including data responsive to the request and nodes locally storing the multiple data blocks, wherein each of the multiple data blocks corresponds to a portion of the file; assigning each of the multiple data blocks into block queues, wherein each block queue includes a separate subset of data blocks from the multiple data blocks, wherein each block queue is individually associated with a respective read task, and wherein each separate subset of data blocks assigned to a corresponding block queue includes data blocks locally stored by a node that the respective read task is operating on; instantiating, at each of multiple nodes locally storing data responsive to the request, a plurality of read tasks for reading the file from the distributed file system by adding data responsive to the request to an output file associated with the request, wherein each read task corresponds to an individual process operating on a respective node for reading data blocks locally stored on the respective node using pluralities of threads; and processing, in parallel, each plurality of read tasks instantiated at the nodes locally storing data responsive to the request, wherein processing each read task includes: instantiating a plurality of threads for reading data responsive to the request; and processing each of the plurality of threads in parallel, wherein processing each thread includes repeating, without terminating the thread until all block assignments from the block queue associated with the read task are retrieved: retrieving a next block assignment from the block queue associated with the read task of the respective node on which the thread is processing; obtaining a next data record from local storage of the node on which the thread is processing, wherein the next data record is associated with a next data block of the next block assignment from the block queue; and adding the next data record to the output file associated with the request.
22. The method of claim 21, further comprising: returning the file as a response to the request, wherein the response corresponds to data records added to the output file by all the threads.
23. The method of claim 21, wherein processing each thread includes repeating, until all data records associated with the data block of the block assignment are added to the output file: obtaining a next data record from local storage of the particular node on which the thread is processing, wherein the next data record is associated with the data block of the block assignment; and adding the next data record to the output file associated with the request.
24. The method of claim 21, wherein processing each thread includes terminating the thread when all block assignments from the block queue associated with the respective read task are retrieved.
25. The method of claim 21, wherein a maximum number of read tasks instantiated at the nodes locally storing data responsive to the request is configurable.
26. The method of claim 21, wherein a maximum number of threads instantiated by each read task is configurable.
27. The method of claim 21, wherein the distributed file system corresponds to a Hadoop Distributed File System.
28. The method of claim 21, wherein each read task corresponds to a custom MapReduce task.
29. The method of claim 21, wherein obtaining the data record from local storage of the particular node on which the thread is processing includes instantiating an HCatalog reader object, calling the HCatalog reader object, and reading the data record from local storage using the HCatalog reader object.
30. The method of claim 21, wherein the data block distribution map corresponds to a split distribution map, and wherein each data block is associated with a split.
</claims>
</document>
