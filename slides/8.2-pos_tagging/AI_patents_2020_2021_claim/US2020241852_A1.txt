<document>

<filing_date>
2019-10-28
</filing_date>

<publication_date>
2020-07-30
</publication_date>

<priority_date>
2016-11-30
</priority_date>

<ipc_classes>
G06F8/34,G06N20/00
</ipc_classes>

<assignee>
COMPOSABLE ANALYTICS
</assignee>

<inventors>
FIEDLER, LARS HENRY
VIDAN, ANDY
</inventors>

<docdb_family_id>
68391969
</docdb_family_id>

<title>
Intelligent Assistant for Automating Recommendations for Analytics Programs
</title>

<abstract>
As a user uses a programming system to create programs, data are stored into a computer memory. The data describe actions of the user in creating the programs. The programming system has a user interface and a set of templates for functions. The user interface is designed to receive input from the user to direct the system to assemble functions from the set into the programs, the functions being functions for processing of data. As the user uses the user interface to assemble a program, suggestions to the user are computed, the suggestions recommending functions to be added into the program. The computation of function suggestion is based at least in part on the stored action data.
</abstract>

<claims>
1. A method comprising the steps of: as users of a programming system use the programming system to create programs, storing into a computer memory data describing actions of the users in creating the programs, the programming system having a graphical user interface and a library of templates for functions, the graphical user interface presenting to users functions depicted as templates of blocks to be selected for incorporation into programs, the graphical user interface being programmed to receive input from the users to direct the system to assemble functions from the library into the programs, the functions being functions for processing of data, the graphical user interface depicting the incorporated functions as graphical elements for manipulation in the graphical user interface; the graphical user interface presenting an ability to graphically connect data output connection points of incorporated function graphical elements to input connection points of incorporated function graphical elements; and as a user from among the users uses the graphical user interface to assemble a program, computing suggestions to the user for user data flow paths to be added to connect an output of one function to an input of another function, the computation of data flow suggestions being based at least in part on the stored actions.
2. The method of claim 1, further comprising the step of: computing suggestions to the user for functions to be added into the program, the computation of function suggestion being based at least in part on weighted evaluation of the stored action data, and on a model automatically generated by a machine learning algorithm.
3. The method of claim 2, wherein: the user interface is a graphical user interface designed to show the program's functions as blocks.
4. The method of claim 1, wherein: the machine learning algorithm includes a Markov model.
5. The method of claim 1, wherein: the machine learning algorithm includes an n-gram method.
6. The method of claim 1, wherein: the machine learning algorithm is trained via programs built by multiple users.
7. The method of claim 1, wherein: in computing suggestions to the user for user data flow paths, stored action data of the user are weighted most heavily, stored action data of the user's organization weighted at some medium weight, and stored action data of other users of the programming system being given lesser weight.
8. The method of claim 1: wherein the function templates of the set specify inputs and outputs, the inputs and outputs being strongly typed; and further comprising the step of computing the function suggestions based at least in part on the types of inputs and/or outputs of the functions in the program.
9. The method of claim 1, wherein: the functions of the set are classified into phases, the phases corresponding to sequential operational phases of programs, the suggestions being based at least in part on the respective phase classifications.
10. The method of claim 1, further comprising the step of: as the user assembles functions from the set into a program, executing a partially-assembled program on input data; and computing suggestions to the user for functions to be added into the program based at least in part on the execution of the partially-assembled program.
11. A computer, comprising: a processor designed to execute instructions from a memory; a nontransitory memory having stored therein instructions to cause the processor to: as users of a programming system use the programming system to create programs, store into a computer memory data describing actions of the users in creating the programs, the programming system having a graphical user interface and a library of templates for functions, the graphical user interface designed to present to users functions depicted as templates of blocks to be selected for incorporation into programs, the graphical user interface being programmed to receive input from the users to direct the system to assemble functions from the library into the programs, the functions being functions for processing of data, the graphical user interface designed to depict the incorporated functions as graphical elements for manipulation in the graphical user interface; the graphical user interface designed to present an ability to graphically connect data output connection points of incorporated function graphical elements to input connection points of incorporated function graphical elements; and as a user from among the users uses the graphical user interface to assemble a program, compute suggestions to the user for user data flow paths to be added to connect an output of one function to an input of another function, the computation of data flow suggestions to be based at least in part on the stored actions.
12. The computer of claim 11, the instructions being further programmed to cause the computer to: compute suggestions to the user for functions to be added into the program, the computation of function suggestion to be based at least in part on weighted evaluation of the stored action data, and on a model automatically generated by a machine learning algorithm.
13. The computer of claim 12, wherein: the user interface is a graphical user interface designed to show the program's functions as blocks.
14. The computer of claim 11, wherein: the machine learning algorithm includes a Markov model.
15. The computer of claim 11, wherein: the machine learning algorithm includes an n-gram method.
16. The computer of claim 11, wherein: the machine learning algorithm is trained via programs built by multiple users.
17. The computer of claim 11, wherein: in computing suggestions to the user for user data flow paths, stored action data of the user are to be weighted most heavily, stored action data of the user's organization are to be weighted at some medium weight, and stored action data of other users of the programming system are to be given lesser weight.
18. The computer of claim 11: wherein the function templates of the set specify inputs and outputs, the inputs and outputs being strongly typed; and the instructions being further programmed to cause the computer to compute the function suggestions based at least in part on the types of inputs and/or outputs of the functions in the program.
19. The computer of claim 11, wherein: the functions of the set are classified into phases, the phases corresponding to sequential operational phases of programs, the suggestions being based at least in part on the respective phase classifications.
20. The computer of claim 11, the instructions being further programmed to cause the computer to: as the user assembles functions from the set into a program, execute a partially-assembled program on input data; and compute suggestions to the user for functions to be added into the program based at least in part on the execution of the partially-assembled program.
</claims>
</document>
