<document>

<filing_date>
2020-01-30
</filing_date>

<publication_date>
2020-08-20
</publication_date>

<priority_date>
2019-02-15
</priority_date>

<ipc_classes>
G06F16/2453
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
DA TRINDADE, JOANA MATOS FONSECA
CURINO, CARLO ALDO
KARANASOS, KONSTANTINOS
</inventors>

<docdb_family_id>
69743922
</docdb_family_id>

<title>
MATERIALIZED GRAPH VIEWS FOR EFFICIENT GRAPH ANALYSIS
</title>

<abstract>
Methods, systems, and computer program products are provided for generating and utilizing materialized graph views. A system according to one embodiment includes a graph database including a graph and schema, a workload analyzer, a view enumerator, a query rewriter and an execution engine. The workload analyzer is configured to receive and analyze queries in a query workload. The view enumerator is configured to use an inference engine to operate on facts derived from the graph and a query, and view templates comprising inference rules to enumerate candidate views. The workload analyzer is further configured to selects a candidate view to materialize, provide the selected view to the execution engine that is configured to generate the materialized view. The workload analyzer may select the at least one candidate view based on factors such as query evaluation cost estimates, candidate view performance improvement estimates, view size estimates and view creation cost estimates.
</abstract>

<claims>
1. A computer-implemented method for generating materialized graph views of a graph, the graph being stored in a graph database according to a corresponding graph schema, the method comprising:
receiving a plurality of graph queries comprising a query workload;
receiving one or more graph view templates comprising inference rules;
determining graph query facts for each of the plurality of graph queries;
enumerating sets of candidate views, each set of candidate views corresponding to a respective one of the plurality of graph queries, the candidate views of each set based at least in part on the graph query facts of the graph query corresponding to that set and the one or more graph view templates;
selecting at least one candidate view from the sets of candidate views; and generating and storing a materialized view based at least in part on the selected at least one candidate view.
2. The method of claim 1 further comprising extracting graph structural properties of the graph based at least in part on the graph schema, and wherein the candidate views are further based at least in part on the graph structural properties.
3. The method of claim 1 further comprising:
generating for each candidate view of the sets of candidate views:
a view size estimate; and
a view creation cost estimate;
generating for each graph query of the plurality of graph queries:
a query evaluation cost estimate; and
a candidate view performance improvement estimate for each candidate view of the sets of candidate views.
4. The method of claim 3 further comprising:
generating a workload performance improvement estimate for each candidate view of the sets of candidate views by calculating a sum of the candidate view performance improvement estimates corresponding to each graph query; and
selecting the at least one candidate view from the sets of candidate views based at least in part on the workload performance improvement estimate of the at least one candidate view.
5. The method of claim 3 wherein the candidate view performance improvement estimate comprises a quotient of the view creation cost estimate for the respective one candidate view and the query evaluation cost estimate for the respective one of the graph queries of the plurality of graph queries.
6. The method of claim 1 wherein the one or more graph view templates comprises at least one of:
a summarizer; or
a connector.
7. The method of claim 1 further comprising:
receiving an additional graph query;
enumerating second candidate views for the additional graph query;
selecting at least one previously materialized view corresponding to at least one of the second candidate views;
re-writing the additional graph query based at least in part on the at least one previously materialized view to provide a rewritten graph query; and
executing the rewritten graph query to provide a query result, wherein the query result depends at least in part on the at least one previously materialized view.
8. A graph view enumeration, generation and query system, comprising:
one or more processors;
a graph database including at least one graph and a corresponding graph schema; and
one or more memory devices accessible to the one or more processors, the one or more memory devices storing software components for execution by the one or more processors, the software components including:
a workload analyzer configured to receive a plurality of graph queries comprising a query workload;
a view enumerator configured to:
receive one or more graph view templates comprising inference rules; determine graph query facts for each of the plurality of graph queries; and enumerate sets of candidate views, each set of candidate views corresponding to a respective one of the plurality of graph queries, the candidate views of each set based at least in part on the graph query facts of the graph query corresponding to that set and the one or more graph view templates; and wherein the workload analyzer is further configured to select at least one candidate view from the sets of candidate views; and
an execution engine configured to generate and store at least one materialized view based at least in part the selected at least one candidate view.
9. The system of claim 8 wherein the view enumerator is further configured to extract graph structural properties of the graph based at least in part on the graph schema, and the candidate views are further based at least in part on the graph structural properties.
10. The system of claim 8 wherein the workload analyzer is further configured to: for each candidate view of the sets of candidate views:
generate a view size estimate and a view creation cost estimate; and for each graph query of the plurality of graph queries:
generate a query evaluation cost estimate; and
generate a candidate view performance improvement estimate for each candidate view of the first candidate views.
11. The system of claim 10 wherein the workload analyzer is further configured to: generate a workload performance improvement estimate for each candidate view of the sets of candidate views by calculating a sum of the candidate view performance improvement estimates corresponding to each graph query; and
select the at least one candidate view from the sets of candidate views based at least in part on the workload performance improvement estimate of the at least one candidate view.
12. The system of claim 10 wherein the candidate view performance improvement estimate comprises a quotient of the view creation cost estimate for the respective one candidate view and the query evaluation cost estimate for the respective one of the graph queries of the plurality of graph queries.
13. The system of claim 8 wherein the one or more graph view templates comprises at least one of:
a summarizer; or
a connector.
14. The system of claim 8 further comprising a query rewriter and wherein the view enumerator is further configured to:
enumerate second candidate views for an additional graph query received by the query rewriter, the query rewriter configured to:
select at least one previously materialized view corresponding to at least one of the second candidate views;
rewrite the additional graph query based at least in part on the at least one previously materialized view to provide a rewritten graph query; and the execution engine further configured to execute the rewritten graph query to provide a query result, wherein the query result depends at least in part on the at least one previously materialized view.
15. A computer-readable memory device having computer program logic recorded thereon, comprising:
computer program logic for enabling a processor to perform any of the steps of claims 1-7.
</claims>
</document>
