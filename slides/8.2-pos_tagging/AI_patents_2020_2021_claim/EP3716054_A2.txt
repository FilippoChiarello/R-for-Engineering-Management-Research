<document>

<filing_date>
2020-02-27
</filing_date>

<publication_date>
2020-09-30
</publication_date>

<priority_date>
2019-03-29
</priority_date>

<ipc_classes>
G06F9/30,G06F9/38
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
RUBANOVICH, SIMON
SPERBER, ZEEV
GRADSTEIN, AMIT
</inventors>

<docdb_family_id>
69742732
</docdb_family_id>

<title>
INTERLEAVED PIPELINE OF FLOATING-POINT ADDERS
</title>

<abstract>
Disclosed embodiments relate to an interleaved pipeline of floating-point (FP) adders. In one example, a processor is to execute an instruction specifying an opcode and locations of a M by K first source matrix, a K by N second source matrix, and a M by N destination matrix, the opcode indicating execution circuitry, for each FP element (M, N) of the destination matrix, is to: launch K instances of a pipeline having a first, MULTIPLY stage, during which a FP element (M, K) of the first source matrix and a corresponding FP element (K, N) of the second source matrix are multiplied; concurrently, in an EXPDIFF stage, determine an exponent difference between the product and a previous FP value of the element (M, N) of the destination matrix; and in a second, ADD-BYPASS stage, accumulate the product with the previous FP value and, concurrently, bypassing the accumulated sum to a subsequent pipeline instance.
</abstract>

<claims>
1. A processor comprising: decode circuitry to decode an instruction specifying locations of a M by K first source matrix, a K by N second source matrix, a M by N destination matrix, and an opcode indicating execution circuitry, for each floating-point (FP) element (M, N) of the destination matrix, is to launch K pipeline instances over K cycles, each pipeline instance comprising: in a first, MULTIPLY stage, generating a product of FP element (M, K) of the first source matrix and element (K, N) of the second source matrix; concurrently, in an EXPDIFF stage, determining an exponent difference between the product and a previous FP value of element (M, N) of the destination matrix; in a second, ADD-BYPASS stage, accumulating the product with the previous FP value and storing the accumulated sum to the element (M, N) of the destination matrix, and, if rounding is determined to be required, causing a next pipeline instance to add a one; wherein the product, before the accumulation, is to be brought into alignment by shifting its mantissa by the exponent difference; and concurrently, in the ADD-BYPASS stage, bypassing the accumulated sum to a subsequent instance of the pipeline; and execution circuitry to execute the decoded instruction as per the opcode.
2. The processor of claim 1, wherein the execution circuitry is to complete execution of the K instances of the pipeline over K-plus-one cycles.
3. The processor of claim 1 or 2, wherein the execution circuitry, during the MULTIPLY stage, is to perform rounding of the generated product, as necessary.
4. The processor of any of claims 1 to 3, wherein the execution circuitry, during the ADD-BYPASS stage, is to perform saturation, as necessary, on the accumulated sum.
5. The processor of any of claims 1 to 4, wherein M is one of 1, 2, 3, 4, 8, and 16, N is one of 1, 2, 3, 4, 8, and 16, and K is one of 1, 2, 3, 4, 8, and 16.
6. The processor of any of claims 1 to 5, wherein the first source, second source, and destination matrices are each located in one of a collection of vector registers of a register file, a collection of tile registers, and a plurality of memory locations representing a matrix.
7. The processor of any of claims 1 to 6, wherein the execution circuitry saves a state after performing the K pipeline instances on each element (M,N) of the destination matrix, and, in the case of a fault, uses the saved state after recovering from the fault to continue execution.
8. The processor of any of claims 1 to 7, wherein the EXPDIFF and ADD-BYPASS pipeline stages of the first executed instance of the pipeline receive the previous FP value of the element (M, N) of the destination matrix from its location as specified by the instruction, and the EXPDIFF and ADD-BYPASS pipeline stages of subsequent executed instances of the pipeline receive the previous FP value of the element (M, N) of the destination matrix as a bypass from the ADD-BYPASS stage of an immediately preceding instance of the pipeline.
9. The processor of any of claims 1 to 8, wherein the instruction further specifies a multibit writemask, each bit of which is to mask or otherwise to allow writing of a corresponding element (M, N) of the destination matrix.
10. The processor of claim 9, wherein each of the masked elements is to be either zeroed or merged.
11. A method to be performed by a processor, the method comprising: decoding, using decode circuitry, an instruction specifying locations of a M by K first source matrix, a K by N second source matrix, a M by N destination matrix, and an opcode indicating execution circuitry, for each floating-point (FP) element (M, N) of the destination matrix, is to launch K instances of a pipeline over K cycles; and executing, using execution circuitry, the decoded instruction as per the opcode; and wherein each instance of the pipeline comprises: in a first, MULTIPLY stage, generating a product of FP element (M, K) of the first source matrix and a corresponding FP element (K, N) of the second source matrix; concurrently, in an EXPDIFF stage, determining an exponent difference between the product and a previous FP value of element (M, N) of the destination matrix; in a second, ADD-BYPASS stage, accumulating the product with the previous FP value and storing the accumulated sum to the element (M, N) of the destination matrix, wherein the product, before performing the accumulation, is to be brought into alignment by shifting its mantissa by the exponent difference; and concurrently, in the ADD-BYPASS stage, bypassing the accumulated sum for use by a subsequent instance of the pipeline.
12. The method of claim 11, wherein the execution circuitry is to complete execution of the K instances of the pipeline over K-plus-one cycles.
13. The method of claim 11 or 12, wherein the execution circuitry, during the MULTIPLY stage, is to perform rounding of the generated product, as necessary.
14. The method of any of claims 11 to 13, wherein the execution circuitry, during the ADD-BYPASS stage, is to perform saturation, as necessary, on the accumulated sum.
15. The method of any of claims 11 to 14, wherein M is one of 1, 2, 3, 4, 8, and 16, N is one of 1, 2, 3, 4, 8, and 16, and K is one of 1, 2, 3, 4, 8, and 116.
</claims>
</document>
