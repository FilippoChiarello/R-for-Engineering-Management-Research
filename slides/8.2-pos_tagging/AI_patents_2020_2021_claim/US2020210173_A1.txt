<document>

<filing_date>
2018-12-26
</filing_date>

<publication_date>
2020-07-02
</publication_date>

<priority_date>
2018-12-26
</priority_date>

<ipc_classes>
G06F9/30
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
BAUM, DAN
CHARNEY, MARK J.
ESPIG, MICHAEL
HEINECKE, ALEXANDER F.
HUGHES CHRISTOPHER J.
LUEH, GUEI-YUAN
OULD-AHMED-VALL, ELMOUSTAPHA
PEARCE, JONATHAN D.
SADE, RAANAN
VALENTINE, ROBERT
</inventors>

<docdb_family_id>
71122968
</docdb_family_id>

<title>
SYSTEMS AND METHODS FOR PERFORMING NIBBLE-SIZED OPERATIONS ON MATRIX ELEMENTS
</title>

<abstract>
Disclosed embodiments relate to systems and methods for performing nibble-sized operations on matrix elements. In one example, a processor includes fetch circuitry to fetch an instruction, decode circuitry to decode the fetched instruction the fetched instruction having fields to specify an opcode and locations of first source, second source, and destination matrices, the opcode to indicate the processor is to, for each pair of corresponding elements of the first and second source matrices, logically partition each element into nibble-sized partitions, perform an operation indicated by the instruction on each partition, and store execution results to a corresponding nibble-sized partition of a corresponding element of the destination matrix. The exemplary processor includes execution circuitry to execute the decoded instruction as per the opcode.
</abstract>

<claims>
1. A processor comprising: fetch circuitry to fetch an instruction; decode circuitry to decode the fetched instruction having fields to specify an opcode and locations of first source, second source, and destination matrices, the opcode to indicate the processor is to, for each pair of corresponding elements of the first and second source matrices, logically partition each element into nibble-sized partitions, perform an operation indicated by the instruction on each partition, and store execution results to a corresponding nibble-sized partition of a corresponding element of the destination matrix; and execution circuitry to execute the decoded instruction as per the opcode.
2. The processor of claim 1, wherein the operation is one of addition, subtraction, and multiplication.
3. The processor of claim 1, wherein the operation is a logical operation to be performed by the execution circuitry in bitwise fashion.
4. The processor of claim 1, wherein the operation is indicated by an additional instruction field.
5. The processor of claim 1, wherein the operation is indicated as part of the opcode.
6. The processor of claim 1, wherein the source and destination matrices are each located in any of a memory, a vector register of a register file, and a tile register, the tile register comprising a two-dimensional data structure using an overlay over physical registers.
7. The processor of claim 1, wherein the instruction is further to specify a multi-bit writemask having a plurality of bits to control whether to mask each element of the destination, wherein masked destination elements are either to be zeroed or merged.
8. The processor of claim 1, wherein the instruction is further to specify an element size of each of the elements of the source and destination matrices, the element size being one of 2 bits, 4 bits, 8 bits, 16 bits, 32 bits, 64 bits, and 128 bits.
9. A method to be performed by a processor, the method comprising: fetching, using fetch circuitry, an instruction; decoding, using decode circuitry, the fetched instruction having fields to specify an opcode and locations of first source, second source, and destination matrices, the opcode to indicate the processor is to, for each pair of corresponding elements of the first and second source matrices, logically partition each element into nibble-sized partitions, perform an operation indicated by the instruction on each partition, and store execution results to a corresponding nibble-sized partition of a corresponding element of the destination matrix; and executing, using execution circuitry, the decoded instruction as per the opcode.
10. The method of claim 9, wherein the operation is one of addition, subtraction, and multiplication.
11. The method of claim 9, wherein the operation is a logical operation to be performed by the execution circuitry in bitwise fashion.
12. The method of claim 9, wherein the operation is indicated by an additional instruction field.
13. The method of claim 9, wherein the operation is indicated as part of the opcode.
14. The method of claim 9, wherein the source and destination matrices are each located in any of a memory, a vector register of a register file, and a tile register, the tile register comprising a two-dimensional data structure using an overlay over physical registers.
15. The method of claim 9, wherein the instruction is further to specify a multi-bit writemask having a plurality of bits to control whether the execution circuitry is to mask each element of the destination, wherein masked destination elements are either to be zeroed or merged.
16. The method of claim 9, wherein the instruction is further to specify an element size of each of the elements of the source and destination matrices, the element size being one of 2 bits, 4 bits, 8 bits, 16 bits, 32 bits, 64 bits, and 128 bits.
17. A non-transitory machine-readable medium containing instructions to be performed by a processor by: fetching, using fetch circuitry, an instruction; decoding, using decode circuitry, the fetched instruction having fields to specify an opcode and locations of first source, second source, and destination matrices, the opcode to indicate the processor is to, for each pair of corresponding elements of the first and second source matrices, logically partition each element into nibble-sized partitions, perform an operation indicated by the instruction on each partition, and store execution results to a corresponding nibble-sized partition of a corresponding element of the destination matrix; and executing, using execution circuitry, the decoded instruction as per the opcode.
18. The non-transitory machine-readable medium of claim 17, wherein the operation is one of addition, subtraction, and multiplication.
19. The non-transitory machine-readable medium of claim 17, wherein the operation is a logical operation to be performed by the execution circuitry in bitwise fashion.
20. The non-transitory machine-readable medium of claim 17, wherein the instruction is further to specify a multi-bit writemask having a plurality of bits to control whether to mask each element of the destination, wherein masked destination elements are either to be zeroed or merged.
</claims>
</document>
