<document>

<filing_date>
2018-12-28
</filing_date>

<publication_date>
2020-07-02
</publication_date>

<priority_date>
2018-12-28
</priority_date>

<ipc_classes>
G06T15/00,G06T15/06
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
SURTI, PRASOONKUMAR
BENTHIN, CARSTEN
WOOP, SVEN
JANUS, SCOTT
VAIDYANATHAN, KARTHIK
LAWS, PHILIP
</inventors>

<docdb_family_id>
68290153
</docdb_family_id>

<title>
CLUSTER OF SCALAR ENGINES TO ACCELERATE INTERSECTION IN LEAF NODE
</title>

<abstract>
Cluster of acceleration engines to accelerate intersections. For example, one embodiment of an apparatus comprises: a set of graphics cores to execute a first set of instructions of a primary graphics thread; a scalar cluster comprising a plurality of scalar execution engines; and a communication fabric interconnecting the set of graphics cores and the scalar cluster; the set of graphics cores to offload execution of a second set of instructions associated with ray traversal and/or intersection operations to the scalar cluster; the scalar cluster comprising a plurality of local memories, each local memory associated with one of the scalar execution engines, wherein each local memory is to store a portion of a hierarchical acceleration data structure required by an associated scalar execution engine to execute one or more of the second set of instructions; the plurality of scalar execution engines to store results of the execution of the second set of instructions in a memory accessible by the set of graphics cores; wherein the set of graphics cores are to process the results within the primary graphics thread.
</abstract>

<claims>
1. An apparatus comprising: a set of graphics cores to execute a first set of instructions of a primary graphics thread; a scalar cluster comprising a plurality of scalar execution engines; and a communication fabric interconnecting the set of graphics cores and the scalar cluster; the set of graphics cores to offload execution of a second set of instructions associated with ray traversal and/or intersection operations to the scalar cluster; the scalar cluster comprising: instruction fetch circuitry to fetch the second set of instructions from a specified region in memory; scheduler/dispatcher circuitry to schedule and dispatch the second set of instructions for execution across all or a subset of the plurality of scalar execution engines; a plurality of local memories, each local memory associated with one of the scalar execution engines, wherein each local memory is to store a portion of a hierarchical acceleration data structure required by an associated scalar execution engine to execute one or more of the second set of instructions; the plurality of scalar execution engines to store results of the execution of the second set of instructions in a memory accessible by the set of graphics cores; wherein the set of graphics cores are to process the results within the primary graphics thread.
2. The apparatus of claim 1 wherein the hierarchical acceleration data structure comprises a bounding volume hierarchy (BVH), wherein node data associated with nodes of the BVH are to be stored in the local memories.
3. The apparatus of claim 1 wherein the second set of instructions comprise scalar multiplication and/or scalar division operations.
4. The apparatus of claim 1 wherein the scheduler/dispatcher circuitry is to schedule a plurality of the second set of instructions to be executed in parallel on a plurality of the scalar execution engines.
5. The apparatus of claim 4 wherein the scalar execution engines are to execute the plurality of the second set of instructions in parallel to perform a plurality of parallel scalar multiplication and/or scalar division operations associated with ray intersection.
6. The apparatus of claim 1 further comprising: a plurality of memory interface circuits, each memory interface circuit associated with one of the scalar execution engines, the memory interface circuits to couple the scalar execution engines to a system memory shared by the set of graphics cores.
7. The apparatus of claim 6 wherein the set of graphics cores comprise a multi-core group (MCG) which share a cache and memory controller circuitry to couple the multi-core group to the system memory.
8. The apparatus of claim 7 further comprising: a plurality of additional multi-core groups coupled to the communication fabric, at least one of the plurality of additional multi-core groups to execute a second primary graphics thread comprising the first set of instructions and to offload work to the scalar engine cluster comprising the second set of instructions.
9. The apparatus of claim 8 wherein the second set of instructions comprise ray intersection instructions, the scalar execution engines to perform scalar multiplication and scalar division operations to implement the ray intersection instructions.
10. A method comprising: executing a first set of instructions of a primary graphics thread on a set of graphics cores; providing a scalar cluster comprising a plurality of scalar execution engines; and providing a communication fabric interconnecting the set of graphics cores and the scalar cluster; offloading execution of a second set of instructions associated with ray traversal and/or intersection operations from the set of graphics cores to the scalar cluster; fetching the second set of instructions from a specified region in memory to the scalar cluster; scheduling and dispatching the second set of instructions for execution; executing the second set of instructions across all or a subset of the plurality of scalar execution engines; wherein a plurality of local memories of the scalar cluster are to store a portion of a hierarchical acceleration data structure required by an associated scalar execution engine; storing results of the execution of the second set of instructions in a memory accessible by the set of graphics cores; processing the results within the primary graphics thread.
11. The method of claim 10 wherein the hierarchical acceleration data structure comprises a bounding volume hierarchy (BVH), wherein node data associated with nodes of the BVH are to be stored in the local memories.
12. The method of claim 10 wherein the second set of instructions comprise scalar multiplication and/or scalar division operations.
13. The method of claim 10 wherein scheduling and dispatching further comprises scheduling the second set of instructions to be executed in parallel on a plurality of the scalar execution engines.
14. The method of claim 13 wherein the scalar execution engines are to execute the plurality of the second set of instructions in parallel to perform a plurality of parallel scalar multiplication and/or scalar division operations associated with ray intersection.
15. The method of claim 10 further comprising: coupling the scalar execution engines to a system memory shared by the set of graphics cores, each of the scalar execution engines having an associated memory interface circuit to couple it to the system memory.
16. The method of claim 15 wherein the set of graphics cores comprise a multi-core group (MCG) which share a cache and memory controller circuitry to couple the multi-core group to the system memory.
17. The method of claim 16 further comprising: coupling a plurality of additional multi-core groups to the communication fabric, at least one of the plurality of additional multi-core groups to execute a second primary graphics thread comprising the first set of instructions and to offload work to the scalar engine cluster comprising the second set of instructions.
18. The method of claim 17 wherein the second set of instructions comprise ray intersection instructions, the scalar execution engines to perform scalar multiplication and scalar division operations to implement the ray intersection instructions.
19. A machine-readable medium having program code stored thereon which, when executed by a machine, causes the machine to perform the operations of: executing a first set of instructions of a primary graphics thread on a set of graphics cores; identifying a scalar cluster comprising a plurality of scalar execution engines; and accessing a communication fabric interconnecting the set of graphics cores and the scalar cluster; offloading execution of a second set of instructions associated with ray traversal and/or intersection operations from the set of graphics cores to the scalar cluster; fetching the second set of instructions from a specified region in memory to the scalar cluster; scheduling and dispatching the second set of instructions for execution; executing the second set of instructions across all or a subset of the plurality of scalar execution engines; wherein a plurality of local memories of the scalar cluster are to store a portion of a hierarchical acceleration data structure required by an associated scalar execution engine; storing results of the execution of the second set of instructions in a memory accessible by the set of graphics cores; processing the results within the primary graphics thread.
20. The machine-readable medium of claim 19 wherein the hierarchical acceleration data structure comprises a bounding volume hierarchy (BVH), wherein node data associated with nodes of the BVH are to be stored in the local memories.
21. The machine-readable medium of claim 19 wherein the second set of instructions comprise scalar multiplication and/or scalar division operations.
22. The machine-readable medium of claim 19 wherein scheduling and dispatching further comprises scheduling the second set of instructions to be executed in parallel on a plurality of the scalar execution engines.
23. The machine-readable medium of claim 22 wherein the scalar execution engines are to execute the plurality of the second set of instructions in parallel to perform a plurality of parallel scalar multiplication and/or scalar division operations associated with ray intersection.
24. The machine-readable medium of claim 19 further comprising program code to cause the machine to perform the operations of: establishing communication between the scalar execution engines and a system memory shared by the set of graphics cores, each of the scalar execution engines having an associated memory interface circuit to couple it to the system memory.
25. The machine-readable medium of claim 24 wherein the set of graphics cores comprise a multi-core group (MCG) which share a cache and memory controller circuitry to couple the multi-core group to the system memory.
26. The machine-readable medium of claim 25 further comprising program code to cause the machine to perform the operations of: establishing communication with a plurality of additional multi-core groups to the communication fabric, at least one of the plurality of additional multi-core groups to execute a second primary graphics thread comprising the first set of instructions and to offload work to the scalar engine cluster comprising the second set of instructions.
27. The machine-readable medium of claim 26 wherein the second set of instructions comprise ray intersection instructions, the scalar execution engines to perform scalar multiplication and scalar division operations to implement the ray intersection instructions.
</claims>
</document>
