<document>

<filing_date>
2016-03-15
</filing_date>

<publication_date>
2020-08-25
</publication_date>

<priority_date>
2016-03-15
</priority_date>

<ipc_classes>
G06F11/30,G06F8/41,G06F8/75,G06F9/30,G06N5/02,G06N99/00
</ipc_classes>

<assignee>
WISCONSIN ALUMNI RESEARCH FOUNDATION
</assignee>

<inventors>
SANKARALINGAM, KARTHIKEYAN
ARDALANI, NEWSHA
THAKKER, URMISH
</inventors>

<docdb_family_id>
59855797
</docdb_family_id>

<title>
Method of estimating program speed-up in highly parallel architectures using static analysis
</title>

<abstract>
The amount of speed-up that can be obtained by optimizing the program to run on a different architecture is determined by static measurements of the program. Multiple such static measurements are processed by a machine learning system after being discretized to alter their accuracy vs precision. Static analysis requires less analysis overhead and permits analysis of program portions to optimize allocation of porting resources on a large program.
</abstract>

<claims>
What we claim is:
1. An electronic computer executing a program stored in a non-transitory medium to: (a) perform a static analysis of a target computer program prepared to execute on a first computer architecture to determine static properties of the target computer program selected from a set of static program properties relating to how the target computer program dynamically executes on a second computer architecture having a different architecture than the first computer architecture, wherein the static analysis inspects the target computer program without monitoring execution of the target computer program and does not resolve values accessed from memory or determine execution control flow that requires resolution of the direction of branch instructions that are memory dependent; (b) apply the static properties, exclusive of dynamic properties that can only be measured during execution of the target computer program on a computer, to a machine learning model, the machine learning model trained using a training set of programs each having a first optimization for the first computer architecture and a second optimization for the second computer architecture, wherein the first and second optimizations restructure the programs and data organization, the training set providing (1) an empirically measured change in execution speed between the first optimization and the second optimization when running on the respective computer architectures and (2) static properties of the set of static program properties of the first optimization; and (c) output a speed-up value from the machine learning model to a user, the speed-up value indicating an expected increase in execution speed of the target computer program when executed on the second computer architecture; and wherein the empirically measured changes in execution speed are discretized to a set of ranges selectable by the user and further wherein the speed-up value output to the user is discretized to the user-selected ranges.
2. The electronic computer of claim 1 wherein each of the static properties and training static properties are discretized to a corresponding sets of ranges less than five.
3. The electronic computer of claim 2 wherein the ranges are selected to provide bins holding equal numbers of the measured static properties of the training set of programs.
4. The electronic computer of claim 1 wherein the empirically measured changes in execution speed are discretized to a set of ranges less than five.
5. The electronic computer of claim 1 wherein the set of static program properties provides a static indication of memory coalescing in the target program related to an amount of access to external memory.
6. The electronic computer of claim 5 wherein the static indication of memory coalescing assesses memory access instructions in a loop according to whether an address of the instruction includes loop invariant terms or loop induction variable based terms that are not the loop induction variable times a value.
7. The electronic computer of claim 1 wherein the multiple static program properties further provide a static assessment, of an intensity of arithmetic instructions in the instructions of the target program.
8. The electronic computer of claim 7 wherein the static assessment of an intensity of arithmetic instructions is a ratio of arithmetic to memory access instructions.
9. The electronic computer of claim 7 wherein the static assessment of the intensity of arithmetic instructions is discretized to a binary value.
10. The electronic computer of claim 7 wherein the set of static program properties provides a static indication of branch divergence in the target program related to variation in execution paths between successive executions of a branch instruction.
11. The electronic computer of claim 1 wherein the set of static program properties further includes at least one of assessment of kernel size of an average number of instructions in one thread, available parallelism indicating how many threads can potentially run on the second architecture in parallel, control intensity providing a measure of whether control instructions rely on data from external memory and complex arithmetic ratios indicating the number of complex arithmetic instructions selected from the group of multiplication, division, sine, cosign, floating-point log, floating-point exponent and square root.
12. The electronic computer of claim 1 wherein the machine learning model is a random forest classifier.
13. The electronic computer of claim 12 wherein the random forest classifier selects and combines random forests of binary decision trees.
14. The electronic computer of claim 1 wherein the electric computer further includes each of the first and second architectures.
15. An electronic computer executing a program stored in a non-transitory medium to: (a) perform a static analysis of a target computer program prepared to execute on a first computer architecture to determine static properties of the target computer program selected from a set of static program properties relating to how the target computer program dynamically executes on a second computer architecture having a different architecture than the first computer architecture, wherein the static analysis inspects the target computer program without monitoring execution of the target computer program and does not resolve values accessed from memory or determine execution control flow that requires resolution of the direction of branch instructions that are memory dependent; (b) apply the static properties to a machine learning model, the machine learning model trained using a training set of programs each having a first optimization for the first computer architecture and a second optimization for the second computer architecture, wherein the first and second optimizations restructure the programs and data organization, the training set providing (1) an empirically measured change in execution speed between the first optimization and the second optimization when running on the respective computer architectures and (2) static properties of the set of static program properties of the first optimization; (c) output a speed-up value from the machine learning model to a user, the speed-up value indicating an expected increase in execution speed of the target computer program when executed on the second computer architecture; and wherein the set of static program properties provides a static indication of memory coalescing in the target program related to an amount of access to external memory; and wherein the static indication of memory coalescing assesses memory access instructions in a loop according to whether an address of the instruction includes loop invariant terms or loop induction variable based terms that are not the loop induction variable times a value; and wherein the static indication of memory coalescing is discretized to a binary value.
16. An electronic computer executing a program stored in a non-transitory medium to: (a) perform a static analysis of a target computer program prepared to execute on a first computer architecture to determine static properties of the target computer program selected from a set of static program properties relating to how the target computer program dynamically executes on a second computer architecture having a different architecture than the first computer architecture, wherein the static analysis inspects the target computer program without monitoring execution of the target computer program and does not resolve values accessed from memory or determine execution control flow that requires resolution of the direction of branch instructions that are memory dependent; (b) apply the static properties to a machine learning model, the machine learning model trained using a training set of programs each having a first optimization for the first computer architecture and a second optimization for the second computer architecture, wherein the first and second optimizations restructure the programs and data organization, the training set providing (1) an empirically measured change in execution speed between the first optimization and the second optimization when running on the respective computer architectures and (2) static properties of the set of static program properties of the first optimization; (c) output a speed-up value from the machine learning model to a user, the speed-up value indicating an expected increase in execution speed of the target computer program when executed on the second computer architecture; and wherein the multiple static program properties further provide a static assessment of an intensity of arithmetic instructions in the instructions of the target program; and wherein the set of static program properties provides a static indication of branch divergence in the target program related to variation in execution paths between successive executions of a branch instruction; and wherein the static indication of branch divergence assesses branch instructions in a loop according to whether the branch conditions are loop invariant terms or based on loop induction variables.
17. An electronic computer executing a program stored in a non-transitory medium to: (a) perform a static analysis of a target computer program prepared to execute on a first computer architecture to determine static properties of the target computer program selected from a set of static program properties relating to how the target computer program dynamically executes on a second computer architecture having a different architecture than the first computer architecture, wherein the static analysis inspects the target computer program without monitoring execution of the target computer program and does not resolve values accessed from memory or determine execution control flow that requires resolution of the direction of branch instructions that are memory dependent; (b) apply the static properties to a machine learning model, the machine learning model trained using a training set of programs each having a first optimization for the first computer architecture and a second optimization for the second computer architecture, wherein the first and second optimizations restructure the programs and data organization, the training set providing (1) an empirically measured change in execution speed between the first optimization and the second optimization when running on the respective computer architectures and (2) static properties of the set of static program properties of the first optimization; (c) output a speed-up value from the machine learning model to a user, the speed-up value indicating an expected increase in execution speed of the target computer program when executed on the second computer architecture; and wherein the multiple static program properties further provide a static assessment of an intensity of arithmetic instructions in the instructions of the target program; and wherein the set of static program properties provides a static indication of branch divergence in the target program related to variation in execution paths between successive executions of a branch instruction; and wherein the static indication of branch divergence assesses whether the branch instructions include branch conditions based on access to processor external memory.
18. An electronic computer executing a program stored in a non-transitory medium to: (a) perform a static analysis of a target computer program prepared to execute on a first computer architecture to determine static properties of the target computer program selected from a set of static program properties relating to how the target computer program dynamically executes on a second computer architecture having a different architecture than the first computer architecture, (b) apply the static properties to a machine learning model, the machine learning model trained using a training set of programs each having a first optimization for the first computer architecture and a second optimization for the second computer architecture, wherein the first and second optimizations restructure the programs and data organization, the training set providing (1) an empirically measured change in execution speed between the first optimization and the second optimization when running on the respective computer architectures and (2) static properties of the set of static program properties of the first optimization; and (c) output a speed-up value from the machine learning model to a user, the speed-up value indicating an expected increase in execution speed of the target computer program when executed on the second computer architecture, wherein the program is a portion of a main computer program and wherein the electronic computer includes the first architecture and further executes the program to: execute the main program on the first architecture to measure a call hierarchy of different portions of the main program including the target program when the main program is executing on the first architecture; perform a static analysis of the different portions of the main program to determine static properties of the each of the different portions selected from the set of static program properties; apply the static properties of each of the different portions to the machine learning model; and provide a comparison of speed-up value from the machine learning model for each of the different portions to a user indicating a relative increase in execution speed of each of the different portions when executed on the second computer architecture.
19. A method of assessing effects of a computer architecture on program execution speed of a target program comprising the steps of: (a) performing a static analysis of the target computer program prepared to execute on a first computer architecture to determine static properties of the target computer program selected from a set of static program properties relating to how the target computer program dynamically executes on a second computer architecture having a different architecture than the first computer architecture, wherein the static properties are selected from the group consisting of static measurements of memory coalescing, intensity of arithmetic instructions, branch divergence of branch instructions, kernel size, available parallelism control intensity, and amount of complex arithmetic including multiplication, division, sine, cosine, floating-point log, floating-point exponent and square root; (b) applying the static properties, exclusive of dynamic properties that can only be measured during execution of the target computer program on a computer, to a machine learning model, the machine learning model trained using a training set of programs each having a first optimization for the first computer architecture and a second optimization for the second computer architecture, wherein the first and second optimizations restructure the programs and data organization, the training set providing an empirically measured change in execution speed between the first optimization and the second optimization when running on the respective computer architectures and training static properties of the set of static program properties for the first optimization; and (c) outputting a speed-up value from the machine learning model to a user, the speed-up value indicating an expected increase in execution speed of the target computer program when executed on the second computer architecture; and wherein the empirically measured changes in execution speed are discretized to a set of ranges selectable by the user and further wherein the speed-up value output to the user is discretized to the user-selected ranges.
</claims>
</document>
