<document>

<filing_date>
2016-01-27
</filing_date>

<publication_date>
2020-12-15
</publication_date>

<priority_date>
2016-01-27
</priority_date>

<ipc_classes>
G06F11/30,G06F11/36,G06F8/75,G06F8/77,G06F9/44
</ipc_classes>

<assignee>
ENTIT SOFTWARE
MICRO FOCUS
</assignee>

<inventors>
BYRD, CHRISTOPHER
</inventors>

<docdb_family_id>
59398319
</docdb_family_id>

<title>
Recommendations based on the impact of code changes
</title>

<abstract>
According to an example, an application code graph of an application may be received and the programming structures of the application may be ranked based on a ranking model. When the information regarding code changes associated with the application are received, the ranking model may be applied to the programming structures associated with the code changes. The impact of the code changes on the application performance may be determined and corresponding recommendations may be produced based on the determined impact.
</abstract>

<claims>
1. A computing apparatus comprising: a processor; a non-transitory computer readable medium to store instructions that, when executed by the processor, cause the processor to: receive an application code graph that comprises information regarding programming structures executed by an application, wherein the application code graph is a connected graph comprising nodes representing the programming structures and edges representing values of a performance metric linking the nodes; generate a ranking model based on the values, wherein the ranking model comprises a stochastic transition matrix representing transitions among the nodes and ranks the programming structures from the application code graph; receive information regarding a code change associated with the application; combine the ranking model with the information regarding the code change; obtain an impact of the code change on a performance of the application; produce recommendations associated with the impact of the code change based on the combination of the ranking model with the information regarding the code change; assign a weight to a given node of the nodes based on a direction and a magnitude associated with a value of the values linking the given node to another node of the-nodes; and test the code change based on the recommendations if the code change impacts the performance of the application.
2. The computing apparatus of claim 1, the non-transitory computer readable medium further comprising instructions that cause the processor to: generate the application code graph at runtime, wherein the performance metric comprises one of volume and response time.
3. The computing apparatus of claim 1, wherein the recommendations identify particular programming structures and code changes for further testing.
4. The computing apparatus of claim 1, wherein the instructions, when executed by the processor, further cause the processor to perform multiple iterations to determine a converging page rank vector representing a ranking of the programming structures.
5. The computing apparatus of claim 1, wherein the edges represent values of a plurality of performance metrics.
6. The computing apparatus of claim 5, wherein a contribution of each of the plurality of performance metrics is weighted based on respective relevance.
7. A method, comprising: accessing, by a processor, a code graph of an application associated with a prospective code change, wherein the code graph comprises information regarding a plurality of programming structures executed by the application, and the code graph comprises a connected graph comprising nodes representing the plurality of programming structures and edges representing values of a performance metric linking the nodes; receiving, by the processor, information regarding the prospective code change to be applied to the application; identifying, by the processor, programming structures of the plurality of programming structures to be affected by the prospective code change; assigning, by the processor, importance to the identified programming structures based on the code graph, wherein assigning importance comprises generating a ranking model based on a stochastic transition matrix representing transitions among the nodes, wherein the ranking model ranks the plurality of programming structures; generating, by the processor, recommendations for further testing based on the importance of the identified programming structures comprised in the information; assigning, by the processor, a weight to a given node of the nodes based on a direction and a magnitude associated with a value of the values linking the given node to another node of the-nodes; and testing, by the processor, the prospective code change based on the recommendations if the prospective code change impacts a performance of the application.
8. The method of claim 7, wherein generating the ranking model comprises performing multiple iterations to converge a page rank vector representing the ranking of the plurality of programming structures.
9. The method of claim 7, further comprising weighting the performance metric based on relevance.
10. The method of claim 7, wherein assigning importance to the identified programming structures further comprises: assigning, by the processor, weights to the nodes, wherein the weights are proportional to a relative volume and wherein the performance metric is the relative volume between the nodes; comparing, by the processor, the weights assigned to the nodes to a predetermined threshold; determining, by the processor, one of the plurality of programming structures associated with a particular node of the nodes to be important in response to the weight assigned to the particular node exceeding the predetermined threshold; and recommending, by the processor, further testing in response to the programming structure associated with the particular node being determined to be important.
11. A non-transitory computer readable storage medium comprising machine readable instructions that, when executed by a processor, cause the processor to: detect a code change implemented on an application; retrieve an application code graph that comprises nodes representing programming structures of the application linked by values of a performance metric; identify the programming structures affected by the code change; determine weights associated with the programming structures, wherein the weights are indicative of an effect of the code change on a performance of the application, wherein determining the respective weights comprises generating a ranking model based on a stochastic transition matrix, and the ranking model analyzes the values of the performance metric and ranks the programming structures; provide a recommendation based on the weights associated with the programming structures; assign a weight of the weights to a given node of the nodes based on a direction and a magnitude associated with a value of the values linking the given node to another node of the-nodes; and test the code change based on the recommendation if the code change impacts the performance of the application.
12. The non-transitory computer readable storage medium of claim 11, wherein the performance metric comprises at least one of volume, response time, and latency.
13. The non-transitory computer readable storage medium of claim 11, wherein the instructions, when executed by the processor, further cause the processor to: provide a converging page rank vector representing the ranking of the programming structures.
</claims>
</document>
