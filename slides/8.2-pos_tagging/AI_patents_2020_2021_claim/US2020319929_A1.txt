<document>

<filing_date>
2019-04-02
</filing_date>

<publication_date>
2020-10-08
</publication_date>

<priority_date>
2019-04-02
</priority_date>

<ipc_classes>
G06F9/448,G06F9/50,G06F9/52
</ipc_classes>

<assignee>
SAP
</assignee>

<inventors>
SCHRETER, IVAN
</inventors>

<docdb_family_id>
72661609
</docdb_family_id>

<title>
Associative registry
</title>

<abstract>
A system and method of registering one or more objects in a container of a multi-threaded computing system. A method includes prefixing, to each object of the one or more objects, an object header having a version counter with an initial version count of zero. The method further includes for each object to be allocated to a thread of the multi-threaded computing system, allocating an object frame associated with each allocated object to the thread while maintaining the object header. The method further includes constructing each allocated object in the object frame after the object header, and initializing the object header of each allocated object by executing a store/store memory barrier and incrementing the version counter by a count of one to mark the associated allocated object as valid.
</abstract>

<claims>
1. A computer-implemented method of registering one or more objects in a container of a multi-threaded computing system, the method comprising: prefixing, to each object of the one or more objects, an object header having a version counter with an initial version count of zero; for each object to be allocated to a thread of the multi-threaded computing system, allocating an object frame associated with each allocated object to the thread while maintaining the object header; constructing each allocated object in the object frame after the object header; and initializing the object header of each allocated object by executing a store/store memory barrier and incrementing the version counter by a count of one to mark the associated allocated object as valid.
2. The method in accordance with claim 1, further comprising: deallocating an allocated object by incrementing the version counter by a count of one to mark the associated valid allocated object as invalid; and destroying the allocated object marked as invalid.
3. The method in accordance with claim 1, wherein the allocating the object frame includes allocating using a global instance of an allocator to allocate the object frame.
4. The method in accordance with claim 1, further comprising registering the initializing in a registry without synchronization, the registry having a plurality of containers for storing data associated with each allocated object.
5. A system for allocating memory to a thread of a multi-threaded program, the system comprising: a programmable processor; and a machine-readable medium storing instructions that, when executed by the processor, cause the at least one programmable processor to perform operations comprising: prefix, to each object of the one or more objects, an object header having a version counter with an initial version count of zero; for each object to be allocated to a thread of the multi-threaded computing system, allocate an object frame associated with each allocated object to the thread while maintaining the object header; construct each allocated object in the object frame after the object header; and initialize the object header of each allocated object by executing a store/store memory barrier and incrementing the version counter by a count of one to mark the associated allocated object as valid.
6. The system in accordance with claim 5, wherein the operations further comprise operations to: deallocate an allocated object by incrementing the version counter by a count of one to mark the associated valid allocated object as invalid; and destroy the allocated object marked as invalid.
7. The system in accordance with claim 5, wherein the allocating the object frame includes allocating using a global instance of an allocator to allocate the object frame.
8. The system in accordance with claim 5, wherein the operations further comprise an operation to register the initializing in a registry without synchronization, the registry having a plurality of containers for storing data associated with each allocated object.
9. A computer program product comprising a non-transitory machine-readable medium storing instructions that, when executed by at least one programmable processor, cause the at least one programmable processor to perform operations comprising: prefix, to each object of the one or more objects, an object header having a version counter with an initial version count of zero; for each object to be allocated to a thread of the multi-threaded computing system, allocate an object frame associated with each allocated object to the thread while maintaining the object header; construct each allocated object in the object frame after the object header; and initialize the object header of each allocated object by executing a store/store memory barrier and incrementing the version counter by a count of one to mark the associated allocated object as valid.
10. The computer program product in accordance with claim 9, wherein the operations further comprise operations to: deallocate an allocated object by incrementing the version counter by a count of one to mark the associated valid allocated object as invalid; and destroy the allocated object marked as invalid.
11. The computer program product in accordance with claim 9, wherein the allocating the object frame includes allocating using a global instance of an allocator to allocate the object frame.
12. The computer program product in accordance with claim 9, wherein the operations further comprise an operation to register the initializing in a registry without synchronization, the registry having a plurality of containers for storing data associated with each allocated object.
</claims>
</document>
