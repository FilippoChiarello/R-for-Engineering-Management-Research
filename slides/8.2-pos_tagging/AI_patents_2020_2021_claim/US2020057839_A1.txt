<document>

<filing_date>
2019-10-21
</filing_date>

<publication_date>
2020-02-20
</publication_date>

<priority_date>
2016-08-19
</priority_date>

<ipc_classes>
G06F21/00,G06F21/57,G06N3/04
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
CHAKRABORTY, SUPRIYO
TRIPP, OMER
</inventors>

<docdb_family_id>
61190723
</docdb_family_id>

<title>
SYNTHESIS OF SECURITY EXPLOITS VIA SELF-AMPLIFYING DEEP LEARNING
</title>

<abstract>
Techniques for synthesizing security exploits via self-amplifying deep learning are provided. In one example, a computer-implemented method can comprise generating, by a system operatively coupled to a processor, a probabilistic model based on an evaluation of one or more first payloads included in a first group of payloads. The computer implemented method can also comprise determining, by the system, based on the probabilistic model, that at least one first payload from the first group of payloads is invalid. Additionally, the computer implemented method can comprise, generating, by the system, a second group of payloads based on removing the at least one invalid first payload from the first group of payloads.
</abstract>

<claims>
1. A computer-implemented method, comprising: atomizing, by a system operatively coupled to a processor, a payload of a first group of payloads into a plurality of atomic elements based on a programming language specific grammar of a programming language of the payload; mapping, by the system, atomic elements of the plurality of atomic elements to unique identifiers, where same atomic elements of the plurality of atomic elements have same unique identifiers of the unique identifiers; and generating, by the system, a second group of payloads based upon a deep learning engine and the unique identifiers mapped to the atomic elements.
2. The computer-implemented method of claim 1, further comprising: outputting, by the system, the second group of payloads.
3. The computer-implemented method of claim 1, wherein the generating the second group of payloads comprises: generating an input vector that represents the payload based on the unique identifiers.
4. The computer-implemented method of claim 3, wherein the generating the second group of payloads further comprises: applying the input vector to the deep learning engine of the system.
5. The computer-implemented method of claim 4, wherein the generating the second group of payloads further comprises: generating a sequence of probability vectors in response to applying the input vector to a multilayer recurrent network of the deep learning engine, wherein the multilayer recurrent network comprises a probabilistic model generated based on an evaluation of one or more payloads included in a first group of payloads.
6. The computer-implemented method of claim 5, wherein the generating the second group of payloads further comprises: generating the second group of payloads based on the sequence of probability vectors.
7. The computer-implemented method of claim 1, further comprising merging the second group of payloads with the first group of payloads.
8. A computer program product for synthesizing security exploits via self-amplifying deep learning, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processing component to cause the processing component to: atomize a payload of a first group of payloads into a plurality of atomic elements based on a programming language specific grammar of a programming language of the payload; map atomic elements of the plurality of atomic elements to unique identifiers, where same atomic elements of the plurality of atomic elements have same unique identifiers of the unique identifiers; and generate a second group of payloads based upon a deep learning engine and the unique identifiers mapped to the atomic elements.
9. The computer program product of claim 8, wherein the program instructions are further executable by the processing component to cause the processing component to output the second group of payloads.
10. The computer program product of claim 8, wherein the program instructions are further executable by the processing component to cause the processing component to generate an input vector that represents the payload based on the unique identifiers..
11. The computer program product of claim 10, wherein the program instructions are further executable by the processing component to cause the processing component to apply the input vector to the deep learning engine of the system.
12. The computer program product of claim 11, wherein the program instructions are further executable by the processing component to cause the processing component to generate a sequence of probability vectors in response to applying the input vector to a multilayer recurrent network of the deep learning engine, wherein the multilayer recurrent network comprises a probabilistic model generated based on an evaluation of one or more payloads included in a first group of payloads.
13. The computer program product of claim 12, wherein the program instructions are further executable by the processing component to cause the processing component to generate the second group of payloads based on the sequence of probability vectors.
14. The computer program product of claim 11, wherein the program instructions are further executable by the processing component to cause the processing component to merging the second group of payloads with the first group of payloads.
15. A device, comprising: a processor; and a memory communicatively coupled to the processor, the memory having stored therein computer-executable components, comprising: a payload generator component the: atomizes a payload of a first group of payloads into a plurality of atomic elements based on a programming language specific grammar of a programming language of the payload; maps atomic elements of the plurality of atomic elements to unique identifiers, where same atomic elements of the plurality of atomic elements have same unique identifiers of the unique identifiers; and generates a second group of payloads based upon a deep learning engine and the unique identifiers mapped to the atomic elements.
16. The system of claim 15, wherein the payload generator component outputs the second group of payloads.
17. The system of claim 15, wherein the payload generator component generates an input vector that represents the payload based on the unique identifiers.
18. The system of claim 17, wherein the payload generator component applies the input vector to the deep learning engine of the system.
19. The system of claim 18, wherein the payload generator component generates a sequence of probability vectors in response to applying the input vector to a multilayer recurrent network of the deep learning engine, wherein the multilayer recurrent network comprises a probabilistic model generated based on an evaluation of one or more payloads included in a first group of payloads.
20. The system of claim 19, wherein the payload generator component generates the second group of payloads based on the sequence of probability vectors.
</claims>
</document>
