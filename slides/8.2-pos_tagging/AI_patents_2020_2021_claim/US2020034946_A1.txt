<document>

<filing_date>
2019-08-05
</filing_date>

<publication_date>
2020-01-30
</publication_date>

<priority_date>
2017-04-24
</priority_date>

<ipc_classes>
G06F3/06,G06F3/14,G06N3/04,G06N3/063,G06N3/08,G06T1/20,G06T1/60,G09G5/36
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
MAIYURAN, SUBRAMANIAM
MASTRONARDE JOSH B.
LAKE ADAM T.
SCHLUESSLER, TRAVIS, T.
CHEN FENG
VEMBU, BALAJI
SURTI, PRASOONKUMAR
KOKER, ALTUG
SATISH, NADATHUR RAJAGOPALAN
ASHBAUGH, BEN J.
RAY, JOYDEEP
VAIDYANATHAN, KARTHIK
BAGHSORKHI, SARA, S.
GOTTSCHLICH, JUSTIN E.
HURD, LINDA L.
GALOPPO VON BORRIES, NICOLAS C.
FU, WENYIN
BOLES, JEFFERY S.
FEIT, JOHN H.
BARIK, RAJKISHORE
APPU, ABHISHEK R.
BURKE, DEVAN
SRINIVASA, NARAYAN
LIN, TSUNG-HAN
NURVITADHI, ERIKO
AKHBARI, FARSHAD
SINHA, KAMAL
KIM, DUK HWAN
</inventors>

<docdb_family_id>
63854019
</docdb_family_id>

<title>
COMPUTE OPTIMIZATION MECHANISM FOR DEEP NEURAL NETWORKS
</title>

<abstract>
An apparatus to facilitate compute optimization is disclosed. The apparatus includes a memory device including a first integrated circuit (IC) including a plurality of memory channels and a second IC including a plurality of processing units, each coupled to a memory channel in the plurality of memory channels.
</abstract>

<claims>
1. 1-19. (canceled)
20. An apparatus, comprising: one or more processors including a graphics processor, the one or more processors including: one or more processing units to process data, including the one or more processing units to run a first shader application, a scheduler to schedule shader threads for processing, and a programmable integrated circuit (IC) device, wherein, upon the programmable IC device being configured to operate as a second shader application, each of one or more shader threads is to be processed at either the first shader application or the second shader application based on one or more requirements for each shader thread.
21. The apparatus of claim 20, wherein the one or more requirements include a speed of operation for a shader thread.
22. The apparatus of claim 21, wherein a first shader thread requiring a first speed of operation is to be processed at the first shader application and a second shader thread requiring a second speed of operation, the first speed of operation being greater than the second speed of operation, is to be processed at the second shader application.
23. The apparatus of claim 20, wherein the first shader application and the second shader application are different versions of a same shader.
24. The apparatus of claim 20, wherein the programmable IC device is a field-programmable gate array (FPGA).
25. The apparatus of claim 20, wherein the scheduler is to determine whether a shader thread is to be processed by the first shader application or the second shader application.
26. The apparatus of claim 20, wherein the programmable IC device is triggered to perform as a shader stage in a graphics pipeline.
27. The apparatus of claim 26, wherein the one or more processors are to provide a shader operation for the programmable IC device in a buffer, and wherein the programmable IC device is to process the shader operation and return a signal to the buffer upon completion of the shader operation.
28. A method comprising: receiving a plurality of shader threads at a graphics processor, the graphics processor including a programmable integrated circuit (IC) device; running a first shader application on the graphics processor; configuring the programmable IC device to operate as a second shader application; and scheduling each of one or more shader threads for processing at either the first shader application or the second shader application based on one or more requirements for each shader thread.
29. The method of claim 28, wherein the one or more requirements include a speed of operation required for a shader thread.
30. The method of claim 28, wherein the first shader application and the second shader application are different versions of a same shader.
31. The method of claim 28, wherein the programmable IC device is a field-programmable gate array (FPGA).
32. The method of claim 28, further comprising: determining by a scheduler whether a shader thread is to be processed by the first shader application or the second shader application.
33. The method of claim 28, further comprising: triggering the programmable IC device to perform as a shader stage in a graphics pipeline.
34. The method of claim 33, further comprising: providing a shader operation for the programmable IC device in a buffer; processing the shader operation by the programmable IC device; and returning a signal to the buffer upon completion of the shader operation.
35. A graphics processor, comprising: one or more processing units to process data, including the one or more processing units to run a first shader, a scheduler to schedule shader threads for processing, and a field-programmable gate array (FPGA), the FPGA being configurable to operate as a second shader, wherein the first shader and second shader are different versions of a same shader application; and wherein each of one or more shader threads is to be scheduled for processing at either the first shader or the second shader based on one or more requirements for each shader thread.
36. The graphics processor of claim 35, wherein the FPGA is to be triggered to perform as a shader stage in a graphics pipeline.
37. The graphics processor of claim 36, wherein the one or more processors are to provide a shader operation for the FPGA in a buffer, and wherein the FPGA is to process the shader operation and return a signal to the buffer upon completion of the shader operation.
38. The graphics processor of claim 35, wherein the shader application is a vertex shader application.
39. The graphics processor of claim 35, wherein the one or more processing units comprise one or more streaming multiprocessors (SMs).
</claims>
</document>
