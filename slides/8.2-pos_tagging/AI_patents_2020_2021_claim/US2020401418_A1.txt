<document>

<filing_date>
2019-03-04
</filing_date>

<publication_date>
2020-12-24
</publication_date>

<priority_date>
2018-03-05
</priority_date>

<ipc_classes>
G06F11/34,G06F9/445,G06F9/54
</ipc_classes>

<assignee>
TENSERA NETWORKS
</assignee>

<inventors>
YELLIN, DANIEL
MOSHAVI, SHIMON
PELED, ROEE
BEN ELI, DAVID
REGEV, EILON
</inventors>

<docdb_family_id>
67846932
</docdb_family_id>

<title>
APPLICATION PRELOADING IN THE PRESENCE OF USER ACTIONS
</title>

<abstract>
A method includes, in a processor (44) of a user device (24), preloading one or more user applications (26) in a background mode, in which activities associated with preloaded user applications are hidden from a user of the user device. An activity, which is invoked in the processor and is associated with a given preloaded user application, is detected. An assessment is made by the processor, whether the activity is a preload-initiated activity that is invoked due to preloading of the given user application, or whether the activity is a user-initiated activity that is invoked due to an action by the user. If the activity is assessed to be a preload-initiated activity, the activity is handled using a first handling scheme. If the activity is assessed to be a user-initiated activity, the activity is handled using a second handling scheme, different from the first handling scheme.
</abstract>

<claims>
1. A method, comprising: in a processor of a user device, preloading one or more user applications in a background mode, in which activities associated with preloaded user applications are hidden from a user of the user device; detecting an activity that is invoked in the processor and is associated with a given preloaded user application; assessing, by the processor, whether the activity is a preload-initiated activity that is invoked due to preloading of the given user application, or whether the activity is a user-initiated activity that is invoked due to an action by the user; if the activity is assessed to be a preload-initiated activity, handling the activity using a first handling scheme; and if the activity is assessed to be a user-initiated activity, handling the activity using a second handling scheme, different from the first handling scheme.
2. The method according to claim 1, wherein assessing whether the activity is preload-initiated or user-initiated is performed by a preloading agent, which is configured to preload the user applications.
3. The method according to claim 2, wherein the preloading agent is implemented as one of (i) a software component of an operating system of the user-device, (ii) an application, and (iii) a Software Development Kit (SDK) embedded in an application.
4. The method according to claim 1, wherein assessing whether the activity is preload-initiated or user-initiated is performed by the given user application.
5. The method according to claim 1, wherein assessing whether the activity is preload-initiated or user-initiated comprises applying a predefined heuristic.
6. The method according to claim 5, wherein applying the predefined heuristic comprises assessing that the activity is preload-initiated if the activity is invoked by another activity associated with the given preloaded user application.
7. The method according to claim 5, wherein applying the predefined heuristic comprises assessing that the activity is user-initiated if the activity is not invoked by another activity associated with the given preloaded user application.
8. The method according to claim 5, wherein applying the predefined heuristic comprises assessing that the activity is preload-initiated if a screen of the user device is off during invocation of the activity.
9. The method according to claim 5, wherein applying the predefined heuristic comprises assessing that the activity is user-initiated if the activity is invoked more than a predefined time period after preloading of the given user application.
10. The method according to claim 5, wherein applying the predefined heuristic comprises assessing that the activity is preload-initiated if the activity is invoked less than a predefined time period after preloading of the given user application.
11. The method according to claim 1, wherein preloading the user applications comprises evaluating a predefined preloading-blocking condition, and permitting preloading of the user applications only if the preloading-blocking condition is not met, and wherein assessing whether the activity is preload-initiated or user-initiated comprises assessing that the activity is user-initiated if the preloading-blocking condition is met during invocation of the activity.
12. The method according to claim 1, wherein assessing whether the activity is preload-initiated or user-initiated comprises receiving from the given preloaded user application, via an Application Programming Interface (API), an indication of whether the activity is preload-initiated or user-initiated.
13. The method according to claim 1, wherein handling the activity comprises: sending to the given preloaded user application, via an Application Programming Interface (API), an indication of whether the given user application is currently in a preloaded state; and in the given preloaded user application, based on the indication, applying the first handling scheme if in the preloaded state, and applying the second handling scheme if not in the preloaded state.
14. The method according to claim 1, wherein handling the activity comprises: if the activity is assessed to be user-initiated, executing analytics code that tracks usage of the app by the user; and if the activity is assessed to be preload-initiated, not executing the analytics code.
15. The method according to claim 1, wherein handling the activity comprises: if the activity is assessed to be user-initiated, presenting audio-visual output of the activity to the user; and if the activity is assessed to be preload-initiated, inhibiting the audio-visual output of the activity.
16. The method according to claim 1, wherein handling the activity comprises assigning to the new activity a first execution priority if the activity is assessed to be user-initiated, and, if the activity is assessed to be preload-initiated, assigning to the new activity a second execution priority that is lower than the first execution priority.
17. The method according to claim 1, and comprising determining whether or not the given preloaded user application is in a preloaded state, based on whether the detected activity is assessed to be preload-initiated or user-initiated.
18. The method according to claim 17, and comprising deciding, based on whether the given preloaded user application is determined to be in the preloaded state, whether to handle at least one other activity associated with the given preloaded user application using the first handling scheme or using the second handling scheme.
19. A user device, comprising: an interface for communicating over a communication network; and a processor, configured to: preload one or more user applications in a background mode, in which activities associated with preloaded user applications are hidden from a user of the user device; detect an activity that is invoked in the processor and is associated with a given preloaded user application; assess whether the activity is a preload-initiated activity that is invoked due to preloading of the given user application, or whether the activity is a user-initiated activity that is invoked due to an action by the user; if the activity is assessed to be a preload-initiated activity, handle the activity using a first handling scheme; and if the activity is assessed to be a user-initiated activity, handle the activity using a second handling scheme, different from the first handling scheme.
20. The user device according to claim 19, wherein the processor is configured to run a preloading agent, which is configured to preload the user applications and to assess whether the activity is preload-initiated or user-initiated.
21. The user device according to claim 20, wherein the processor is configured to run the preloading agent as one of (i) a software component of an operating system of the user-device, (ii) an application, and (iii) a Software Development Kit (SDK) embedded in an application.
22. The user device according to claim 19, wherein, in the processor, assessing whether the activity is preload-initiated or user-initiated is performed by the given user application.
23. The user device according to claim 19, wherein the processor is configured to assess whether the activity is preload-initiated or user-initiated by applying a predefined heuristic.
24. The user device according to claim 23, wherein the processor is configured to assess that the activity is preload-initiated if the activity is invoked by another activity associated with the given preloaded user application.
25. The user device according to claim 23, wherein the processor is configured to assess that the activity is user-initiated if the activity is not invoked by another activity associated with the given preloaded user application.
26. The user device according to claim 23, wherein the processor is configured to assess that the activity is preload-initiated if a screen of the user device is off during invocation of the activity.
27. The user device according to claim 23, wherein the processor is configured to assess that the activity is user-initiated if the activity is invoked more than a predefined time period after preloading of the given user application.
28. The user device according to claim 23, wherein the processor is configured to assess that the activity is preload-initiated if the activity is invoked less than a predefined time period after preloading of the given user application.
29. The user device according to claim 19, wherein the processor is configured to: evaluate a predefined preloading-blocking condition, and permit preloading of the user applications only if the preloading-blocking condition is not met, and assess that the activity is user-initiated if the preloading-blocking condition is met during invocation of the activity.
30. The user device according to claim 19, wherein the processor is configured to receive from the given preloaded user application, via an Application Programming Interface (API), an indication of whether the activity is preload-initiated or user-initiated.
31. The user device according to claim 19, wherein the processor is configured to: send to the given preloaded user application, via an Application Programming Interface (API), an indication of whether the given user application is currently in a preloaded state; and in the given preloaded user application, based on the indication, apply the first handling scheme if in the preloaded state, and apply the second handling scheme if not in the preloaded state.
32. The user device according to claim 19, wherein the processor is configured to: if the activity is assessed to be user-initiated, execute analytics code that tracks usage of the app by the user; and if the activity is assessed to be preload-initiated, not execute the analytics code.
33. The user device according to claim 19, wherein the processor is configured to: if the activity is assessed to be user-initiated, present audio-visual output of the activity to the user; and if the activity is assessed to be preload-initiated, inhibit the audio-visual output of the activity.
34. The user device according to claim 19, wherein the processor is configured to assign to the new activity a first execution priority if the activity is assessed to be user-initiated, and, if the activity is assessed to be preload-initiated, assign to the new activity a second execution priority that is lower than the first execution priority.
35. The user device according to claim 19, wherein the processor is configured to determine whether or not the given preloaded user application is in a preloaded state, based on whether the detected activity is assessed to be preload-initiated or user-initiated.
36. The user device according to claim 35, wherein the processor is configured to decide, based on whether the given preloaded user application is determined to be in the preloaded state, whether to handle at least one other activity associated with the given preloaded user application using the first handling scheme or using the second handling scheme.
</claims>
</document>
