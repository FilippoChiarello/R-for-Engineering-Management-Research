<document>

<filing_date>
2019-05-31
</filing_date>

<publication_date>
2020-12-03
</publication_date>

<priority_date>
2019-05-31
</priority_date>

<ipc_classes>
G06F16/22,G06F16/23,G06F16/245,H04L9/06,H04L9/08,H04L9/32
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
DAYAMA, PANKAJ S.
SAKET, RISHI
SINGH, NITIN
</inventors>

<docdb_family_id>
73549705
</docdb_family_id>

<title>
ANONYMOUS DATABASE RATING UPDATE
</title>

<abstract>
An example operation may include one or more of generating, by an executing client, a blockchain transaction comprising an anonymous rating, a proof, a nullifier, and a root node value, receiving, by a smart contract, the blockchain transaction, the anonymous rating related to an authorizing client, verifying the proof with the root node value and the nullifier, verifying that the root node value is a current or a previous merkle tree root node value, adding the anonymous rating to a shared ledger, marking the nullifier as used, and storing the marked nullifier to the shared ledger.
</abstract>

<claims>
1. A system, comprising: an executing client, configured to: generate a blockchain transaction comprising: an anonymous rating related to an authorizing client; and a root node value; and a blockchain network, coupled to the executing client, comprising: a shared ledger, comprising a merkle tree that corresponds to the authorizing client, the merkle tree comprising the root node value; and a smart contract, configured to: receive the blockchain transaction, and in response: verify that the root node value is one of a current or previous merkle tree root node value; and add the anonymous rating to the shared ledger.
2. The system of claim 1, wherein the executing client generates the blockchain transaction in response to the executing client: receives a one-time usable certificate from the authorizing client, wherein the authorizing client is coupled to the executing client; generates a random secret; calls the smart contract to add a new leaf node to the merkle tree, the leaf node comprising a hash of the random secret; and queries the smart contract for an authentication path for the new leaf node and the root node value.
3. The system of claim 2, wherein the blockchain transaction further comprises a proof and a nullifier, wherein the proof provides an indication that the executing client possesses the random secret and the nullifier corresponds to the new leaf node, wherein the smart contract is further configured to: verify the proof with the root node value and the nullifier; in response to the smart contract adds the anonymous rating to the shared ledger, the smart contract is further configured to: mark the nullifier as used; and store the marked nullifier to the shared ledger.
4. The system of claim 2, wherein the anonymous rating is not linked to an identity of the executing client, wherein the authorizing client is unable to determine an identity of the executing client.
5. The system of claim 4, wherein the blockchain transaction comprises a signed transaction, wherein the smart contract is further configured to: verify the signature without revealing the executing client identity.
6. The system of claim 2, wherein the nullifier corresponds to an undisclosed leaf node in the merkle tree, wherein the proof comprises a zero-knowledge proof that does not identify a merkle tree leaf node to use to verify the proof, wherein the smart contract is further configured to: verify the nullifier has not been previously used; and verify the root node value is one of a current or a previous merkle tree root node value.
7. The system of claim 6, wherein the smart contract is further configured to: verify that the root node value is one of the current or previous merkle tree root node values; and in response to verifying that the root node value is one of the current or the previous merkle tree root node values, the smart contract is further configured to: add the anonymous rating to the shared ledger; and in response to not verifying that the root node value is one of the current or the previous merkle tree root node values, the smart contract is further configured to: exit smart contract execution with a failure.
8. A method, comprising: generating, by an executing client, a blockchain transaction comprising an anonymous rating, a proof, a nullifier, and a root node value; receiving, by a smart contract, the blockchain transaction, the anonymous rating related to an authorizing client; verifying the proof with the root node value and the nullifier; verifying that the root node value is a current or a previous merkle tree root node value; adding the anonymous rating to a shared ledger; marking the nullifier as used; and storing the marked nullifier to the shared ledger.
9. The method of claim 8, further comprising: receiving, by the executing client, a one-time usable certificate from the authorizing client; generating a random secret; calling the smart contract to add a new leaf node to the merkle tree, the leaf node comprising a hash of the random secret; and querying the smart contract for an authentication path for the new leaf node and the root node value.
10. The method of claim 9, wherein the proof provides an indication that the executing client possesses the random secret and the nullifier corresponds to the new leaf node.
11. The method of claim 9, wherein the anonymous rating is not linked to an identity of the executing client, wherein the authorizing client is unable to determine the identity of the executing client.
12. The method of claim 11, wherein the blockchain transaction comprises a signed transaction, wherein the method further comprising: verifying, by the smart contract, the signature without revealing the executing client identity.
13. The method of claim 9, wherein the nullifier corresponding to an undisclosed leaf node in the merkle tree, wherein the proof comprising a zero-knowledge proof that does not identify a merkle tree leaf node to use to verify the proof, wherein the method further comprising: verifying, by the smart contract, the nullifier has not been previously used; and verifying the root node value is one of the current or the previous merkle tree root node value.
14. The method of claim 13, wherein verifying the root node value is one of the current or the previous merkle tree root node value comprising: calling, by the smart contract, a query on the current and previous values of the key that stores the merkle tree root node value; and in response to verifying the root node value is one of the current or the previous merkle tree root node value, the method further comprising: adding, by the smart contract, the anonymous rating to the shared ledger; and in response to not verifying the root node value is one of the current or the previous merkle tree root node value, the method further comprising: exiting smart contract execution with a failure.
15. A non-transitory computer readable medium comprising instructions, that when read by a processor, cause the processor to perform: generating, by an executing client, a blockchain transaction comprising an anonymous rating, a proof, a nullifier, and a root node value; receiving, by a smart contract, the blockchain transaction, the anonymous rating related to an authorizing client; verifying the proof with the root node value and the nullifier; verifying that the root node value is a current or a previous merkle tree root node value; adding the anonymous rating to a shared ledger; marking the nullifier as used; and storing the marked nullifier to the shared ledger.
16. The non-transitory computer readable medium of claim 15, wherein the instructions, are further configured to cause the processor to perform: receiving, by the executing client, a one-time usable certificate from the authorizing client; generating a random secret; calling the smart contract to add a new leaf node to the merkle tree, the leaf node comprising a hash of the random secret; and querying the smart contract for an authentication path for the new leaf node and the root node value.
17. The non-transitory computer readable medium of claim 16, wherein the proof provides an indication that the executing client possesses the random secret and the nullifier corresponds to the new leaf node, wherein the anonymous rating is not linked to an identity of the executing client, wherein the authorizing client is unable to determine the identity of the executing client.
18. The non-transitory computer readable medium of claim 17, wherein the blockchain transaction comprises a signed transaction, wherein the instructions are further configured to cause the processor to perform: verifying, by the smart contract, the signature without revealing the executing client identity.
19. The non-transitory computer readable medium of claim 16, wherein the nullifier corresponding to an undisclosed leaf node in the merkle tree, wherein the proof comprising a zero-knowledge proof that does not identify a merkle tree leaf node to use to verify the proof, wherein the instructions are further configured to cause the processor to perform: verifying, by the smart contract, the nullifier has not been previously used; and verifying the root node value is one of the current or the previous merkle tree root node value.
20. The non-transitory computer readable medium of claim 16, wherein verifying the root node value is one of the current or the previous merkle tree root node value comprising: calling, by the smart contract, a query on the current and previous values of the key that stores the merkle tree root node value; and in response to verifying the root node value is one of the current or the previous merkle tree root node value, the instructions are further configured to cause the processor to perform: adding, by the smart contract, the anonymous rating to the shared ledger; and in response to not verifying the root node value is one of the current or the previous merkle tree root node value, the method further comprising: exiting smart contract execution with a failure.
</claims>
</document>
