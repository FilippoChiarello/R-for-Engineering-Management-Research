<document>

<filing_date>
2019-11-04
</filing_date>

<publication_date>
2020-05-14
</publication_date>

<priority_date>
2018-11-08
</priority_date>

<ipc_classes>
G06F16/23,G06N20/00,H04L29/06,H04L29/08,H04L9/00,H04L9/06,H04L9/30
</ipc_classes>

<assignee>
ACCENTURE GLOBAL SOLUTIONS
</assignee>

<inventors>
CHANG, CHIA JUNG
GARAND, DEBORAH
KRISHNAN, ARJUN SITARAMAN
PIZZATO, LUIZ
RANJBAR KERMANY, ATIEH
TREAT, DAVID
TUNG, TERESA SHEAUSAN
VELISSARIOS, JOHN
</inventors>

<docdb_family_id>
68470408
</docdb_family_id>

<title>
Cryptographic datashare control for blockchain
</title>

<abstract>
A system includes circuitry for cryptographic data share controls for distributed ledger technology based data constructs. The system may support placement of compute data on to a distributed ledger technology based data construct. The compute data may have multiple layers of encryption to support permissions and coordination of processing operations for application to the compute data. The multiple layers of encryption may include a homomorphic layer to allow sharing of the compute data for processing by a compute party without divulging the content of the compute data with the compute party. While in the homomorphically encrypted form, the homomorphic compute data supports the application of processing operations while maintaining the secrecy of the underlying data.
</abstract>

<claims>
1. A method including: selecting underlying compute data for provision to a distributed ledger technology (DLT) based data construct; encrypting the underlying compute data, the underlying compute data encrypted in accord with a homomorphic encryption scheme, and the homomorphic encryption scheme to generate homomorphic compute data; determining a compute party associated with the DLT-based data construct, the compute party selected to cause performance of one or more processing operations on the homomorphic compute data, and the one or more processing operations performed without concurrent decrypted access to the underlying compute data; encrypting the homomorphic compute data with a public key, the public key associated with an originating party, and the public key to generate secured homomorphic compute data; causing the secured homomorphic compute data to be added to a current block of the DLT-based data construct, the adding to the current block of the DLT-based data construct to effect a controlled share of the homomorphic compute data with the compute party, and addition of the secured homomorphic compute data to the current block including: generation of a previous hash of a previous block; placement of the previous hash and the secured homomorphic compute data in the current block; and addition of the current block to the DLT-based data construct; and authorizing access, by the compute party, to the secured homomorphic compute data, the access authorized by decrypting the secured homomorphic compute data.
2. The method of claim 1, further including gleaning derived insights by decrypting the homomorphic compute data after machine learning is applied via the one or more processing operations.
3. The method of claim 1, where the compute party is one of multiple parties that direct performance of processing operations on encrypted forms of the underlying compute data.
4. The method of claim 1, where decrypting the secured homomorphic compute data includes using a private key controlled by the originator party, the private key including an asymmetrical pair to the public key.
5. The method of claim 4, where the compute party causes performance of the processing operations on the homomorphic compute data while encrypted using the homomorphic encryption scheme.
6. The method of claim 1, where the one or more processing operations include a multiplication operation (MULT), an addition operation (ADD), or a combination thereof.
7. The method of claim 1, where effecting the controlled share of the underlying compute data does not disclose underlying values within the underlying compute data to the compute party.
8. The method of claim 1, further including: receiving homomorphic processed data, the homomorphic processed data generated by performing the one or more processing operations on the homomorphic computed data on behalf the compute party.
9. The method of claim 8, further including decrypting the homomorphic processed data using identical decryption parameters to those which would successfully decrypt the homomorphic compute data to access underlying processed data.
10. The method of claim 9, further including sharing the underlying processed data by coordinating authorization with the compute party.
11. The method of claim 10, further including effecting the sharing of the underlying processed data by appending the underlying processed data to the DLT-based data construct in a sharing block subsequent to the current block.
12. The method of claim 1, further including confirming that the underlying compute data is the same across multiple instances of the DLT-based data construct.
13. A system including: network interface circuitry configured to establish a communication link with a distributed network supporting a distributed ledger technology (DLT) based data construct; and controlled datashare circuitry configured to: select underlying compute data for provision to a distributed ledger technology (DLT) based data construct; encrypt the underlying compute data in accord with a homomorphic encryption scheme to generate homomorphic compute data; determine a compute party associated with the DLT-based data construct, the compute party selected to cause performance of one or more processing operations on the homomorphic compute data without concurrent decrypted access to the underlying compute data; encrypt the homomorphic compute data with a public key associated with an originating party to generate secured homomorphic compute data; cause the secured homomorphic compute data to be added to a current block of the DLT-based data construct to effect a controlled share of the homomorphic compute data with the compute party, addition of the secured homomorphic compute data to the current block including: generation of a previous hash of a previous block; placement of the previous hash and the secured homomorphic compute data in the current block; and addition of the current block to the DLT-based data construct; and authorize access, by the compute party, to the secured homomorphic compute data by decrypting the secured homomorphic compute data.
14. The system claim 13, where the controlled datashare circuitry is further configured to glean derived insights by decrypting the homomorphic compute data after machine learning is applied via the one or more processing operations.
15. The system of claim 13, where the compute party is one of multiple parties that direct performance of processing operations on encrypted forms of the underlying compute data.
16. The system of claim 13, where the controlled datashare circuitry is configured to decrypt the secured homomorphic compute data includes using a private key controlled by the originator party, the private key including an asymmetrical pair to the public key.
17. The system of claim 16, where the compute party causes performance of the processing operations on the homomorphic compute data while encrypted using the homomorphic encryption scheme.
18. The system of claim 13, where the one or more processing operations include a multiplication operation (MULT), an addition operation (ADD), or a combination thereof.
19. The system of claim 13, where the controlled datashare circuitry is configured to effect the controlled share of the underlying compute data without causing disclosure of underlying values within the underlying compute data to the compute party.
20. A product including: machine-readable media other than a transitory signal; instructions stored on the machine-readable media, the instructions configured to, when executed, cause a machine to: select underlying compute data for provision to a distributed ledger technology (DLT) based data construct; encrypt the underlying compute data in accord with a homomorphic encryption scheme to generate homomorphic compute data; determine a compute party associated with the DLT-based data construct, the compute party selected to cause performance of one or more processing operations on the homomorphic compute data without concurrent decrypted access to the underlying compute data; encrypt the homomorphic compute data with a public key associated with an originating party to generate secured homomorphic compute data; cause the secured homomorphic compute data to be added to a current block of the DLT-based data construct to effect a controlled share of the homomorphic compute data with the compute party, addition of the secured homomorphic compute data to the current block including: generation of a previous hash of a previous block; placement of the previous hash and the secured homomorphic compute data in the current block; and addition of the current block to the DLT-based data construct; and authorize access, by the compute party, to the secured homomorphic compute data by decrypting the secured homomorphic compute data.
</claims>
</document>
