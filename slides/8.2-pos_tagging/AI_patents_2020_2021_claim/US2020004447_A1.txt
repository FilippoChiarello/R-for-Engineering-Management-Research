<document>

<filing_date>
2018-06-29
</filing_date>

<publication_date>
2020-01-02
</publication_date>

<priority_date>
2018-06-29
</priority_date>

<ipc_classes>
G06F16/901,G06F3/06,H03M13/47
</ipc_classes>

<assignee>
EMC IP HOLDING COMPANY
</assignee>

<inventors>
DANILOV, MIKHAIL
GUSAKOV, KIRILL
</inventors>

<docdb_family_id>
69054695
</docdb_family_id>

<title>
System and method for combining erasure-coded protection sets
</title>

<abstract>
Resource-efficient data protection is performed by generating meta chunks in storage systems that utilize erasure coding. During erasure coding with a k+m configuration, a data chunk can be divided into k data fragments, having indices 1 to k, that can be encoded by combining them with corresponding coefficients of a coding matrix, to generate coding fragments. Source portions that have a reduced set (e.g., less than k data fragments) of data fragments and that are complementary (e.g., that do not have common indices) can be determined and combined to generate a meta chunk. The coding fragments of the source portions can be added to generate coding fragments for the meta chunk, which can then be utilized to recover data fragments of any of the source portions. Further, the coding fragments, that were previously generated by individually encoding each source portion, can be deleted.
</abstract>

<claims>
1. A system, comprising: a processor; and a memory that stores executable instructions that, when executed by the processor, facilitate performance of operations, comprising: selecting source chunks stored within a storage system that are determined to have fewer than a defined number of data fragments, wherein the source chunks are divided into indexed data fragments, and wherein the indexed data fragments are erasure-coded to generate source coding fragments; based on combining the source chunks, generating a meta chunk; and in response to verifying that the source chunks do not have data fragments with a common index, adding the source coding fragments to generate combined coding fragments associated with the meta chunk.
2. The system of claim 1, wherein the operations further comprise: linking the source chunks to the meta chunk.
3. The system of claim 2, wherein the linking comprises updating metadata associated with a source chunk of the source chunks to comprise reference data indicative of the meta chunk.
4. The system of claim 1, wherein the operations further comprise: storing the combined coding fragments; and subsequent to the storing, deleting the source coding fragments.
5. The system of claim 1, wherein the meta chunk is a first meta chunk and the source chunks are first source chunks, wherein the first source chunks comprise a second meta chunk that has been generated based on a combination of second source chunks, and wherein the second source chunks are determined to have fewer than the defined number of data fragments.
6. The system of claim 1, wherein a source chunk of the source chunks is determined to have been sealed prematurely.
7. The system of claim 1, wherein the combined coding fragments are employable to recover at least a portion of the indexed data fragments.
8. The system of claim 1, wherein the indexed data fragments comprise indices that are assigned to increase a probability that the two or more of the source chunks do not have the data fragments with the common index.
9. The system of claim 1, wherein physical capacity is not allocated for the meta chunk.
10. The system of claim 1, wherein the storage system comprises a geographically-distributed object storage system.
11. A method, comprising: selecting, by a system comprising a processor, source chunks from chunks of an object storage system, wherein the source chunks are determined to have fewer data fragments than remaining of the chunks other than the source chunks, wherein the data fragments do not have common indices that are utilized for erasure coding the data fragments, and wherein the erasure coding the data fragments results in generation of source coding fragments; determining a meta chunk that represents a combination of the data fragments; and based on a summation of the source coding fragments, determining combined coding fragments for the source chunks at a meta chunk level, wherein the combined coding fragments are to be employed to recover at least a portion of the data fragments during a failure condition.
12. The method of claim 11, further comprising: assigning respective indices to first data fragments, of the data fragments, that are associated with a source chunk of the source chunks, wherein the assigning comprises assigning the respective indices to increase a likelihood that the data fragments do not have the common indices.
13. The method of claim 11, further comprising: storing reference data that links the source chunks to the meta chunk.
14. The method of claim 13, further comprising: in response to determining that the failure condition has been satisfied, determining, based on the reference data, the meta chunk linked to at least the portion of the source chunks.
15. The method of claim 14, further comprising: recovering at least the portion of the source chunks based on performing a decoding operation at the meta chunk level.
16. The method of claim 11, further comprising: subsequent to the determining the combined coding fragments, deleting source coding fragments.
17. A computer-readable storage medium comprising instructions that, in response to execution, cause a server device comprising a processor to perform operations, comprising: encoding chunks of data stored in an object storage system, wherein the chunks comprise data fragments that have been assigned respective indices, and wherein the encoding comprises combining, based on the respective indices, the data fragments with corresponding encoding coefficients to generate respective coding fragments; combining a group of the chunks to generate a meta chunk, wherein the group of the chunks are determined not to have more than a defined number of data fragments, and wherein the group of the chunks are determined not to have data fragments having common indices; and based on a summation of a group of the coding fragments that correspond to the group of the chunks, determining meta chunk coding fragments that are to be employed to recover at least a portion of the group of the chunks during a failure condition.
18. The computer-readable storage medium of claim 17, wherein the coding fragments are meta chunk coding fragments, and the operations further comprise: subsequent to the determining the meta chunk coding fragments, deleting the group of the coding fragments.
19. The computer-readable storage medium of claim 17, wherein the operations further comprise: determining reference data that links the group of the chunks to the meta chunk.
20. The computer-readable storage medium of claim 19, wherein the operations further comprise: updating metadata associated with the group of the chunks the reference data.
</claims>
</document>
