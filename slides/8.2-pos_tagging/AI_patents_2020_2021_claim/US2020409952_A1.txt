<document>

<filing_date>
2019-06-25
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-25
</priority_date>

<ipc_classes>
G06F16/22,G06F16/2453,G06F16/2455,G06F16/27
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
Bernin, Olivier
Dean, Thomas Joseph
Agrawal, Vinayak
Aravind, Kavin
</inventors>

<docdb_family_id>
73851555
</docdb_family_id>

<title>
SQL PROCESSING ENGINE FOR BLOCKCHAIN LEDGER
</title>

<abstract>
An example operation may include one or more of receiving a structured query language (SQL) request which applies to a subset of blocks from among blocks stored on a blockchain ledger, storing, in a cache, a portion of the blocks from among the blocks stored on the blockchain ledger, identifying one or more blocks which the SQL request applies to, which are not stored in the cache, and retrieving the identified one or more blocks not stored in the cache from the blockchain ledger, performing an SQL operation to merge one or more blocks from the cache which the SQL request applies to and the one or more blocks retrieved from the blockchain ledger, and transmitting the merged blocks to a computing system that is associated with the received SQL request.
</abstract>

<claims>
1. A computing system comprising: a network interface configured to receive a structured query language (SQL) request which applies to a subset of blocks from among blocks stored on a blockchain ledger; a cache configured to store a portion of the blocks from among the blocks stored on the blockchain ledger; and a processor configured to identify one or more blocks which the SQL request applies to, which are not stored in the cache, and retrieve the identified one or more blocks not stored in the cache from the blockchain ledger, wherein the processor is further configured to perform a SQL operation to merge one or more blocks from the cache which the SQL request applies to and the one or more blocks retrieved from the blockchain ledger, and control the network interface to transmit the merged blocks to a computing system that is associated with the received SQL request.
2. The computing system of claim 1, wherein the processor is configured to retrieve one or more blocks of the subset from the blockchain ledger which are not currently stored in the cache.
3. The computing system of claim 2, wherein the processor is further configured to execute a predicate pushdown in which the one or more cached blocks are filtered out of the request to identify the one or more non-cached blocks that remain.
4. The computing system of claim 2, wherein the processor is further configured to combine the one or more blocks from cache with the one or more non-cached blocks retrieved from the blockchain ledger via an SQL UNION operation.
5. The computing system of claim 1, wherein the cache comprises a columnar cache table in which different types of block data are stored in respective columns.
6. The computing system of claim 5, wherein one of the columns in the columnar cache table comprises a block index value that corresponds to a block number of the block on the distributed ledger.
7. The computing system of claim 1, wherein the processor is further configured to acquire a plurality of blocks from the blockchain ledger and store the plurality of blocks in the cache in response to receipt of a SQL insert command which identifies indexes of the plurality of blocks.
8. A method comprising: receiving a structured query language (SQL) request which applies to a subset of blocks from among blocks stored on a blockchain ledger; storing, in a cache, a portion of the blocks from among the blocks stored on the blockchain ledger; identifying one or more blocks which the SQL request applies to, which are not stored in the cache, and retrieving the identified one or more blocks not stored in the cache from the blockchain ledger; performing an SQL operation to merge one or more blocks from the cache which the SQL request applies to and the one or more blocks retrieved from the blockchain ledger; and transmitting the merged blocks to a computing system that is associated with the received SQL request.
9. The method of claim 8, wherein the retrieving comprises retrieving one or more blocks of the subset from the blockchain ledger which are not currently stored in the cache.
10. The method of claim 9, wherein the retrieving further comprises executing a predicate pushdown in which the one or more cached blocks are filtered out of the request to identify the one or more remaining non-cached blocks.
11. The method of claim 9, further comprising combining the one or more blocks from cache with the one or more blocks retrieved from the blockchain ledger via an SQLUNION operation.
12. The method of claim 8, wherein the cache comprises a columnar cache table in which different types of block data are stored in respective columns.
13. The method of claim 12, wherein one of the columns in the columnar cache table comprises a block index value that corresponds to a block number of the block on the distributed ledger.
14. The method of claim 8, further comprising acquiring a plurality of blocks from the blockchain ledger and storing the plurality of blocks in the cache in response to receiving a SQL insert command which identifies indexes of the plurality of blocks.
15. A non-transitory computer readable medium comprising instructions, that when read by a processor, cause the processor to perform a method comprising: receiving a structured query language (SQL) request which applies to a subset of blocks from among blocks stored on a blockchain ledger; storing, in a cache, a portion of the blocks from among the blocks stored on the blockchain ledger; identifying one or more blocks which the SQL request applies to, which are not stored in the cache, and retrieving the identified one or more blocks not stored in the cache from the blockchain ledger; performing an SQL operation to merge one or more blocks from the cache which the SQL request applies to and the one or more blocks retrieved from the blockchain ledger; and transmitting the merged blocks to a computing system that is associated with the received SQL request.
16. The non-transitory computer readable medium of claim 15, wherein the retrieving comprises retrieving one or more blocks of the subset from the blockchain ledger which are not currently stored in the cache.
17. The non-transitory computer readable medium of claim 16, wherein the retrieving further comprises executing a predicate pushdown in which the one or more cached blocks are filtered out of the request to identify the one or more remaining non-cached blocks.
18. The non-transitory computer readable medium of claim 16, wherein the method further comprises combining the one or more blocks from cache with the one or more non-cached blocks retrieved from the blockchain ledger via an SQL UNION operation.
19. The non-transitory computer readable medium of claim 15, wherein the cache comprises a columnar cache table in which different types of block data are stored in respective columns.
20. The non-transitory computer readable medium of claim 19, wherein one of the columns in the columnar cache table comprises a block index value that corresponds to a block number of the block on the distributed ledger.
</claims>
</document>
