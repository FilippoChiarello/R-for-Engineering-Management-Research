<document>

<filing_date>
2020-08-18
</filing_date>

<publication_date>
2020-12-03
</publication_date>

<priority_date>
2017-08-22
</priority_date>

<ipc_classes>
G06F8/33,G06F8/41,G06F8/71,G06F8/75,G06F8/77
</ipc_classes>

<assignee>
CODESTREAM
</assignee>

<inventors>
PEZARIS, PETER
</inventors>

<docdb_family_id>
65439860
</docdb_family_id>

<title>
SYSTEMS AND METHODS FOR PROVIDING AN INSTANT COMMUNICATION CHANNEL WITHIN INTEGRATED DEVELOPMENT ENVIRONMENTS
</title>

<abstract>
A method and system may be provided for recording discussions about computer code in an integrated development environment ("IDE"). In some aspects, a communication channel is integrated with an IDE. Communications and discussions may be tracked and linked with specific code sections.
</abstract>

<claims>
1. A communication system for augmenting a software development environment, the system comprising one or more processors configured to perform the operations of: generating a communication panel in conjunction with a code editing panel, wherein the communication panel is configured to display a message stream of user based communication associated with code displayed in the code editing panel; displaying a communication interface providing a text input section for receiving text input for the user based communication, wherein the user based communication accepted by the communication interface is associated with a codeblock and a reference to the codeblock is embedded into the user based communication; receiving a modification of the code in the code editing panel, wherein the modification comprises the addition of code, deletion of code, renumbering of code, and/or moving of code; and in response to receiving the modification, storing metadata for preserving communication thread linkage between modified code and the message stream associated with the code in the code editing panel, wherein the metadata comprises information associated with the location of the code file, location of the code line, position of the code line, number of code lines, message streams and/or user based communications.
2. The system of claim 1, wherein the act of preserving further comprises: store, in the metadata, a first identification of the code in the code editing panel and/or a second identification of the modified code.
3. The system of claim 2, wherein one or both of the first identification and the second identification is a commit identification.
4. The system of claim 1, wherein the act of preserving further comprises: identify a recipient of the user based message in the message stream; and annotate, in tire metadata, the recipient with respect to the user based message.
5. The system of claim 4, wherein the act of identifying the recipient of the user based message in the message stream comprises: distinguish between a target user for the user based message and another user mentioned in the user based message; and select the target user as the recipient of the user based message.
6. The system of claim 1, wherein the act of preserving further comprises: determine whether the modification comprises deletion of at least a portion of the code in the code editing panel; and in response to determining that the modification comprises deletion: visually indicate, in the code editing panel, a portion corresponding to the deleted code; and store, in the metadata, one or more user based messages in the message stream corresponding to the deleted code.
7. The system of claim 1, further comprising the operations of: generating a user interface panel configured to display one or more differences between the code in the code editing panel and the received modification of the code.
8. The system of claim 1, further comprising the operations of: generate a user interface panel configured to display an apply function to change the code in the editing panel based on the received modification of the code.
9. The system of claim 8, wherein the user interface panel is further configured to display a revert function to revert the code in the editing panel to a version prior to the code being changed
10. The system of claim 1, further comprising the operations of: dynamically monitor the message stream for code; and in response to detecting code in the message stream, determine corresponding code in the code editing panel.
11. A computer implemented method for augmenting a software development environment, the method comprising: generating, by at least one processor, a communication panel in conjunction with a code editing panel, wherein the communication panel is configured to display a message stream of user based communication associated with code displayed in the code editing panel; displaying a communication interface providing a text input section for receiving text input for the user based communication, wherein the user based communication accepted by the communication interface is associated with a codeblock and a reference to the codeblock is embedded into the user based communication; receiving a modification of the code in the code editing panel, wherein the modification comprises the addition of code, deletion of code, renumbering of code, and/or moving of code; and in response to receiving the modification, storing metadata for preserving communication thread linkage between modified code and the message stream associated with the code in the code editing panel, wherein the metadata comprises information associated with the location of the code file, location of the code line, position of the code line, number of code lines, message streams and/or user based communications.
12. The method of claim 11, wherein the act of preserving further comprises: storing, in the metadata, a first identification of the code in the code editing panel and/or a second identification of the modified code.
13. The method of claim 12, wherein one or both of the first identification and the second identification is a commit identification.
14. The method of claim 11, wherein the act of preserving further comprises: identifying a recipient of the user based message in the message stream; and annotating, in the metadata, the recipient with respect to the user based message.
15. The method of claim 14, wherein the act of identifying the recipient of the user based message in the message stream comprises: distinguishing between a target user for the user based message and another user mentioned in the user based message; and selecting the target user as the recipient of the user based message.
16. The method of claim 11, wherein the act of preserving further comprises: determining whether the modification comprises deletion of at least a portion of the code in the code editing panel; and in response to determining that the modification comprises deletion: visually indicating, in the code editing panel, a portion corresponding to the deleted code; and storing, in the metadata, one or more user based messages in the message stream corresponding to the deleted code.
17. The method of claim 11, the method further comprising: generating, by the at least one processor, a user interface panel configured to display one or more differences between the code in the code editing panel and the received modification of the code.
18. The method of claim 11, the method further comprising: generating, by the at least one processor, a user interface panel configured to display an apply function to change the code in the editing panel based on the received modification of the code.
19. The method of claim 18, wherein the user interface panel is further configured to display a revert function to revert the code in the editing panel to a version prior to the code being changed.
20. The method of claim 11, the method further comprising: dynamically monitor the message stream for code; and in response to detecting code in the message stream, determine corresponding code in the code editing panel.
</claims>
</document>
