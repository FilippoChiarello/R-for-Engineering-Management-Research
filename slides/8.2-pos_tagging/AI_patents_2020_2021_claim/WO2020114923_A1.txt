<document>

<filing_date>
2019-12-01
</filing_date>

<publication_date>
2020-06-11
</publication_date>

<priority_date>
2018-12-03
</priority_date>

<ipc_classes>
G06F21/55,G06F21/56,G06F21/57,G06N3/04,G06N3/08,H04L29/06
</ipc_classes>

<assignee>
BT (BRITISH TELECOMMUNICATIONS)
</assignee>

<inventors>
GIACONI, GIULIO
HERCOCK, ROBERT
</inventors>

<docdb_family_id>
64604462
</docdb_family_id>

<title>
REMEDIATING SOFTWARE VULNERABILITIES
</title>

<abstract>
A computer implemented method of remediating an increased vulnerability of a software system including a plurality of software components, the method comprising: generating a vector representation of each software component derived from a neural network trained using training data defined from known vulnerabilities of the software components in the software system; aggregating the vector representations for the software component to an aggregate vector representation for a particular time; repeating the generating and aggregating steps for a plurality of points in time to generate multiple generations of aggregate vector representations; comparing the multiple generations of aggregate vector representations to detect a change in an aggregate vector representation exceeding a maximum threshold degree of change as an indication of an increased vulnerability of the software system, responsive to which iteratively adjusting the software components in the software system and, at each iteration, regenerating an aggregate vector representation for the software system so adjusted to compare with the multiple generations of aggregate vector representations to identify a software component adjustment leading to a change in vector representation not exceeding the maximum threshold degree of change so as to reduce the vulnerability of the software system.
</abstract>

<claims>
1. A computer implemented method of remediating an increased vulnerability of a software system including a plurality of software components, the method comprising:
generating a vector representation of each software component derived from a neural network trained using training data defined from known vulnerabilities of the software components in the software system;
aggregating the vector representations for the software component to an aggregate vector representation for a particular time;
repeating the generating and aggregating steps for a plurality of points in time to generate multiple generations of aggregate vector representations;
comparing the multiple generations of aggregate vector representations to detect a change in an aggregate vector representation exceeding a maximum threshold degree of change as an indication of an increased vulnerability of the software system, responsive to which iteratively adjusting the software components in the software system and, at each iteration, regenerating an aggregate vector representation for the software system so adjusted to compare with the multiple generations of aggregate vector representations to identify a software component adjustment leading to a change in vector representation not exceeding the maximum threshold degree of change so as to reduce the vulnerability of the software system.
2. A computer implemented method of remediating an increased vulnerability of a software system including a plurality of software components, the method comprising:
accessing data records each corresponding to a known software vulnerability, each data record including an identification of one or more software components affected by the vulnerability;
generating, for each of at least a subset of the data records, one or more training data items for a neural network, each training data item associating a vulnerability of the data record with affected software components identified by the data record, the neural network having input units corresponding to items in a corpus of all software components and output units corresponding to items in a corpus of all vulnerabilities;
training the neural network using the training data so as to define a vector
representation for each software component in the corpus of all software components based on weights in the neural network for an input unit corresponding to the software component; aggregating, for a subset of software components in the corpus corresponding to software components in the software system, vector representations for each software component in the subset to an aggregate vector representation for the software system for the particular time;
repeating the accessing, generating, augmenting, training and aggregating steps at a subsequent time to generate multiple generations of aggregate vector representations for the software system, each generation corresponding to data records accessed at a different time;
comparing the multiple generations of aggregate vector representations for the software system to detect a change in one or more aggregate vector representation exceeding a maximum threshold degree of change as an indication of an increased vulnerability of the software system;
responsive to the indication of an increased vulnerability, iteratively adjusting the software components in the software system and, at each iteration, regenerating an aggregate vector representation for the software system so adjusted, and comparing each regenerated aggregate vector representation with the multiple generations of aggregate vector representations to identify a software component adjustment leading to a change in vector representation not exceeding the maximum threshold degree of change so as to reduce the vulnerability of the software system.
3. The method of claim 2 wherein adjusting the software components in the software system includes replacing a software component in the software system with a compatible alternative software component.
4. The method of any of claims 2 to 3 wherein adjusting the software components in the software system includes replacing a software component in the software system with an alternative version of the software component.
5. The method of any of claims 2 to 4 wherein adjusting the software components in the software system includes upgrading or updating a software component in the software system.
6. The method of any of claims 2 to 5 wherein adjusting the software components in the software system includes patching a software component in the software system with an available software patch intended to reduce a vulnerability of the software component. 7. The method of any of claims 2 to 6 wherein a new neural network is trained at each repetition of the training step.
8. The method of any of claims 2 to 7 wherein the neural network has a single layer of hidden units, the number of which is smaller than each of: a number of input units of the neural network; and a number of output units of the neural network. 9. The method of any of claims 2 to 8 wherein comparing multiple generations of aggregate vector representations includes performing a vector similarity function on the aggregate vector representations to determine a degree of similarity.
10. The method of claim 9 wherein the identification of a change in an aggregate vector representation indicative of an increased vulnerability of the software system includes detecting a vector similarity below a predetermined threshold degree of similarity.
11. The method of claim 7 wherein comparing multiple generations of aggregate vector representations includes, for each of one or more software components in the corpus of all software components, training a recurrent neural network based on the multiple generations of aggregate vector representations such that the trained recurrent neural network is suitable for classifying a subsequent aggregate vector representation as indicative of increased vulnerability in relation to multiple generations of aggregate vector representations. 12. A computer system including a processor and memory storing computer program code for performing the steps of the method of any preceding claim.
13. A computer program element comprising computer program code to, when loaded into a computer system and executed thereon, cause the computer to perform the steps of a method as claimed in any of claims 1 to 1 1.
</claims>
</document>
