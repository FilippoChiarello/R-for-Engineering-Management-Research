<document>

<filing_date>
2020-07-07
</filing_date>

<publication_date>
2020-12-15
</publication_date>

<priority_date>
2017-07-25
</priority_date>

<ipc_classes>
B60W50/02,B60W50/04,G06F11/07,G06F11/14,G06F11/16,G06F11/36,G06F12/02,G06F12/06,G06F16/188,G06F21/57,G06F8/60,G06F8/65,G06F8/654,G06F8/656,G06F8/658,G06F8/71,G06F9/4401,G06F9/445,G06N20/00
</ipc_classes>

<assignee>
AURORA LABS
</assignee>

<inventors>
FOX, ZOHAR
</inventors>

<docdb_family_id>
65037881
</docdb_family_id>

<title>
Self-healing learning system for one or more controllers
</title>

<abstract>
Disclosed embodiments relate to automatically providing updates to at least one vehicle. Operations may include receiving, at a server remote from the at least one vehicle, Electronic Control Unit (ECU) activity data from the at least one vehicle, the ECU activity data corresponding to actual operation of the ECU in the at least one vehicle; determining, at the server and based on the ECU activity data, a software vulnerability affecting the at least one vehicle, the software vulnerability being determined based on a deviation between the received ECU activity data and expected ECU activity data; identifying, at the server, an ECU software update based on the determined software vulnerability; and sending, from the server, a delta file configured to update software on the ECU with a software update corresponding to the identified ECU software update.
</abstract>

<claims>
1. A non-transitory computer readable medium including instructions that, when executed by at least one processor, cause the at least one processor to perform operations for automatically providing software changes, comprising: identifying a software vulnerability based on anomalous activity data of a controller, wherein: the software vulnerability is identified based on a deviation of activity data from an allowed envelope of at least one operational attribute, the operational attribute being associated with processor activity or memory contents; and the allowed envelope is based on a model or map of at least observed functioning of the controller; determining a controller software change based on the identified software vulnerability, the controller software change being configured to adjust the controller from executing a first version of controller software to a second version of controller software; and sending, to the controller and based on the determining, a delta file configured to: execute the identified software change on the controller to link execution of current code stored on the controller with execution of a segment of code from the delta file; and cause the first version of controller software on the controller to become non-executable.
2. The non-transitory computer readable medium of claim 1, wherein the linked execution of the current code and the segment of code from the delta file form a functional equivalent of a software update that is operable prior to rebooting the controller.
3. The non-transitory computer readable medium of claim 1, wherein the delta file comprises position-independent code.
4. The non-transitory computer readable medium of claim 1, wherein the delta file is multidimensional.
5. The non-transitory computer readable medium of claim 1, the operations further comprising: comparing attributes of the first version of controller software to attributes of the second version of controller software to determine differences between the first version of controller software and the second version of controller software; and generating the delta file to represent the determined differences.
6. The non-transitory computer readable medium of claim 5, wherein: the comparing comprises a multi-dimensional comparison; and the generated delta file is multidimensional.
7. The non-transitory computer readable medium of claim 6, wherein the multidimensional delta file is generated to represent changes to at least one of: binary code on the controller, source code on the controller, variables on the controller, or memory addresses on the controller.
8. The non-transitory computer readable medium of claim 1, wherein the delta file is configured to change multiple segments of code on the controller.
9. The non-transitory computer readable medium of claim 1, wherein the software vulnerability is identified using a multi-tiered monitoring framework.
10. The non-transitory computer readable medium of claim 1, wherein the controller is a virtual controller.
11. The non-transitory computer readable medium of claim 1, wherein the delta file is configured to extract code for updating memory addresses in the controller and update the memory addresses in the controller.
12. The non-transitory computer readable medium of claim 1, wherein the at least one operational attribute comprises a memory access pattern or a user behavior attribute.
13. A method for performing operations for automatically providing software changes, the method comprising: identifying a software vulnerability based on anomalous activity data of a controller, wherein: the software vulnerability is identified based on a deviation of activity data from an allowed envelope of at least one operational attribute, the operational attribute being associated with processor activity or memory contents; and the allowed envelope is based on a model or map of at least observed functioning of the controller; identifying a controller software change based on the identified software vulnerability, wherein the identified controller software change is configured to adjust the controller from executing a first version of controller software to a second version of controller software; and sending, to the controller and based on the determining, a delta file configured to: execute the identified software change on the controller to link execution of current code stored on the controller with execution of a segment of code from the delta file; and cause the first version of controller software on the controller to become non-executable.
14. The method of claim 13, wherein the linked execution of the current code and the segment of code from the delta file form a functional equivalent of a software update that is functioning prior to rebooting the controller.
15. The method of claim 13 further comprising: comparing attributes of the first version of controller software to attributes of the second version of controller software to determine differences between the first version of controller software and the second version of controller software; and generating the delta file representing the determined differences.
</claims>
</document>
