<document>

<filing_date>
2019-04-15
</filing_date>

<publication_date>
2020-10-15
</publication_date>

<priority_date>
2019-04-15
</priority_date>

<ipc_classes>
G06F9/50,G06N20/00,G06Q30/02,H04L29/08
</ipc_classes>

<assignee>
ADOBE
</assignee>

<inventors>
Awatramani, Ajay
Kumbi, Niranjan Shivanand
</inventors>

<docdb_family_id>
72748373
</docdb_family_id>

<title>
DYNAMIC ALLOCATION OF EXECUTION RESOURCES
</title>

<abstract>
An improved marketing automation system can optimize governance of server resources by managing the execution of campaigns. The marketing automation system can develop intelligence around a given customer's inflow of incoming campaigns, the execution time of the campaigns, and general resource utilization over time. The marketing automation system can learn to predict an expected number and type of campaigns for a pre-defined window of time. This intelligence can be leveraged to ensure that one or more executors remain available to execute predicted high priority campaigns upon placement into an execution queue. Further, this intelligence can be applied such that predicted dormant executors can be used to execute low priority tasks. In this way, the marketing automation system minimizes queue time until execution for high priority campaigns while optimizing use of server resources.
</abstract>

<claims>
1. A computer-implemented method, comprising: predicting an inflow of tasks for a window of time; determining availability of an executor based on the predicted inflow of tasks; based on the availability, initiating assignment of a task in a task queue to the executor; and assigning the task to run on the executor.
2. The computer-implemented method of claim 1, further comprising: running the task on the executor.
3. The computer-implemented method of claim 1, further comprising: monitoring an actual inflow of tasks for the window of time; determining an action is needed to mitigate a situation based on the actual inflow of tasks; initiating the action to mitigate the situation, wherein the action quiesces the task; assigning a new task to run on the executor; and running the new task on the executor.
4. The computer-implemented method of claim 1, further comprising: receiving the task; classifying the task based on an action associated with the task; and determining a priority for the task based on the classification of the task.
5. The computer-implemented method of claim 4, further comprising: adding the task to the task queue, the task associated with the priority.
6. The computer-implemented method of claim 1, wherein the inflow of tasks is predicted using a learning model trained using historical knowledge about usage of server resources.
7. The computer-implemented method of claim 3, wherein the action is needed when the new task is an unexpected high priority task in the actual inflow of tasks.
8. The computer-implemented method of claim 1, the availability based on remaining capacity of the executor during the window of time after running the predicted inflow of tasks on the executor.
9. The computer-implemented method of claim 3, wherein quiescing the task reassigns the task to the task queue.
10. One or more computer storage media storing computer-useable instructions that, when used by one or more computing devices, cause the one or more computing devices to perform operations comprising: predicting an inflow of tasks for a window of time using a learning model trained on historical knowledge about usage of server resources; determining availability of the server resources based on the predicted inflow of tasks; based on the availability, initiating a task to be assigned to an executor of the server resources, wherein the task is predicted to finish run on the executor within the window of time; and assigning the task to run on the executor.
11. The one or more computer storage media of claim 10, wherein the operations further comprise: monitoring an actual inflow of tasks for the window of time; determining an action is needed to mitigate a situation based on the actual inflow of tasks; initiating the action to mitigate the situation, wherein the action quiesces the task; assigning a new task to run on the executor; and running the new task on the executor.
12. The one or more computer storage media of claim 10, further comprising: receiving the task; classifying the task based on an action associated with the task; and determining a priority for the task based on the classification of the task.
13. The one or more computer storage media of claim 12, further comprising: adding the task to the task queue, the task associated with the priority.
14. The one or more computer storage media of claim 11, wherein the action is needed when the new task is an unexpected high priority task in the actual inflow of tasks.
15. The one or more computer storage media of claim 10, the availability based on remaining capacity of the executor during the window of time after running the predicted inflow of tasks on the executor.
16. The one or more computer storage media of claim 11, wherein quiescing the task reassigns the task to the task queue.
17. The one or more computer storage media of claim 11, wherein the action is needed when the new task is an unexpected high priority task in the actual inflow of tasks.
18. The one or more computer storage media of claim 10, the availability based on remaining capacity of the executor during the window of time after running the predicted inflow of tasks on the executor.
19. A computing system comprising: means for predicting an inflow of tasks for a window of time; and means for assigning tasks in a task queue to an executor using determined availability of the executor based on the predicted inflow of tasks.
20. The computing system of claim 19, further comprising: means for monitoring an actual inflow of tasks for the window of time; and means for initiating an action to mitigate a situation based on the actual inflow of tasks, wherein the action quiesces one or more tasks.
</claims>
</document>
