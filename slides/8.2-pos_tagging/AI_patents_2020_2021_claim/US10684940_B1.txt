<document>

<filing_date>
2018-09-18
</filing_date>

<publication_date>
2020-06-16
</publication_date>

<priority_date>
2018-09-18
</priority_date>

<ipc_classes>
G06F11/36,G06F9/44,G06N20/00
</ipc_classes>

<assignee>
AMAZON TECHNOLOGIES
</assignee>

<inventors>
KAYAL, AKASH
CHITTLE, JOSHUA
</inventors>

<docdb_family_id>
71075074
</docdb_family_id>

<title>
Microservice failure modeling and testing
</title>

<abstract>
Generally described, one or more aspects of the present application correspond to an artificial intelligence (AI) system that helps developers build failure-resilient microservices. The AI system can analyze the code of a microservice to identify other, similar microservices, and then use historical data about performance of those similar microservices to build a failure model for the microservice. The AI system can also automatically run failure tests based on the failure model, and can suggest code changes (based on analyzing historical code changes and test performance data) that can help a microservice become resilient to a particular failure.
</abstract>

<claims>
1. A system comprising: a memory storing instructions for implementing an artificial intelligence (AI) failure model; and one or more processors in communication with the memory, the one or more processors configured by the instructions to at least: receive executable code of a microservice for failure model testing; analyze the executable code of the microservice to determine a characteristic of the microservice; use a machine learning (ML) classifier to determine a type of the microservice from among a plurality of microservice types based at least in part on the characteristic of the microservice; identify a similar microservice that also belongs to the type of the microservice; based at least in part on observed performance of the similar microservice, generate a failure model specifying an operating condition and a failure possibility associated with the microservice; identify, from among a plurality of targeted scripts, a targeted script that simulates the operating condition specified in the failure model; execute the targeted script in response to identifying the targeted script that simulates the operating condition in the failure model; and cause output of a failure test user interface on a user computing device, where in the failure test user interface represents the targeted script and a result of executing the targeted script in response to identifying the targeted script that simulates the operating condition in the failure model.
2. The system of claim 1, wherein the one or more processors are further configured by the instructions to at least populate the failure test user interface with instructions for modifying executable code of the microservice to mitigate the failure possibility.
3. The system of claim 2, wherein the one or more processors are further configured by the instructions to at least: access a first version and a second version of executable code of the similar microservice; determine that the first version of the executable code for the similar microservice that resulted in a failure related to the failure possibility and the second version of the executable code for the similar microservice that did not result in the failure; determine a difference between the first version and the second version of the executable code for the similar microservice; and generate the instructions based at least in part on the difference.
4. The system of claim 1, wherein the characteristic of the microservice is at least one of a capability of the microservice or a dependency of the microservice.
5. A computer-implemented method for implementing an artificial intelligence (AI) failure model, the computer-implemented method comprising: receiving executable code of a microservice for failure model testing; analyzing the executable code of the microservice to determine a characteristic of the microservice; using a machine learning (ML) classifier, determining a type of the microservice from among a plurality of microservice types based at least in part on the characteristic of the microservice; identifying a similar microservice that also belongs to the type of the microservice; based at least in part on observed performance of the similar microservice, generating a failure model specifying an operating condition and a failure possibility for the microservice; identifying, from among a plurality of targeted scripts, a targeted script that simulates the operating condition specified in the failure model; executing the targeted script in response to identifying the targeted script that simulates the operating condition in the failure model; and causing output of information representing the targeted script and a result of executing the targeted script in response to identifying the targeted script that simulates the operating condition in the failure model.
6. The computer-implemented method of claim 5, further causing output of instructions for modifying executable code of the microservice to mitigate the failure possibility.
7. The computer-implemented method of claim 6, further comprising: accessing multiple versions of executable code of another microservice that was tested relating to the operating condition and failure possibility, the multiple versions including (i) a first version of the executable code that resulted in a failure related to the failure possibility, and (ii) a second version of the executable code that did not result in the failure; determining a difference between the first version and the second version of the executable code; and generating the instructions to include information representing the difference.
8. The computer-implemented method of claim 5, further comprising: identifying a plurality of similar microservices belonging to the type; and generating the failure model based at least in part on observed performance of the plurality of similar microservices.
9. The computer-implemented method of claim 8, further comprising: identifying a plurality of different operating conditions and associated failure possibilities based at least in part on the observed performance of the plurality of similar microservices; and including the plurality of different operating conditions and associated failure possibilities in the failure model.
10. The computer-implemented method of claim 9, further comprising, for each of the plurality of different operating conditions and associated failure possibilities, identifying a corresponding targeted script to use for testing the microservice.
11. The computer-implemented method of claim 5, further comprising: identifying that the microservice belongs to a second type; identifying a second similar microservice that belongs to the second type; and based at least in part on observed performance of the second similar microservice, including a second operating condition and associated failure possibility in the failure model for the microservice.
12. A non-transitory computer-readable medium comprising computer-executable instructions for implementing an artificial intelligence (AI) failure model that, when executed on a computing system, cause the computing system to perform operations comprising: receiving executable code of a microservice for failure model testing; analyzing the executable code of the microservice to determine a characteristic of the microservice; using a machine learning (ML) classifier, determining a type of the microservice from among a plurality of microservice types based on the characteristic of the microservice; identifying a similar microservice that also belongs to the type of the microservice; based at least in part on observed performance of the similar microservice, generating a failure model specifying an operating condition and a failure possibility for the microservice; identifying, from among a plurality of targeted scripts, a targeted script that simulates the operating condition specified in the failure model; automatically executing the targeted script in response to identify the target script that simulates the operating condition in the failure model; and causing output of an indication of the targeted script and represents a result of executing the targeted script in response to identify the target script that simulates operation condition in the failure model to a user.
13. The non-transitory computer-readable medium of claim 12, the operations further comprising causing output of information representing the failure model to the user.
14. The non-transitory computer-readable medium of claim 12, the operations further comprising: executing the targeted script to simulate the operating condition specified in the failure model; and causing output of information representing a result of simulating the operating condition.
15. The non-transitory computer-readable medium of claim 14, the operations further comprising: additionally receiving information representing an infrastructure of the microservice; and generating the failure model to additionally specify an additional operating condition and additional associated failure possibility for the infrastructure.
16. The non-transitory computer-readable medium of claim 14, the operations further comprising: identifying, from among the plurality of targeted scripts, an additional targeted script that simulates the additional operating condition; executing the additional targeted script; and based on a result of executing the additional targeted script, causing output of instructions for modifying the infrastructure to mitigate the additional failure possibility.
17. The non-transitory computer-readable medium of claim 12, the operations further comprising causing output of instructions for modifying executable code of the microservice to mitigate the failure possibility.
18. The non-transitory computer-readable medium of claim 17, the operations further comprising: accessing multiple versions of executable code of another microservice that was tested relating to the operating condition and failure possibility, the multiple versions including (i) a first version of the executable code that resulted in a failure related to the failure possibility, and (ii) a second version of the executable code that did not result in the failure; determining a difference between the first version and the second version of the executable code; and generating the instructions to include information representing the difference.
</claims>
</document>
