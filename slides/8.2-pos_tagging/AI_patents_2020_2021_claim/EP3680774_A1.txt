<document>

<filing_date>
2019-10-22
</filing_date>

<publication_date>
2020-07-15
</publication_date>

<priority_date>
2019-01-09
</priority_date>

<ipc_classes>
G06F9/50
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
RAMADOSS, MURALI
VEMBU, BALAJI
RAY, JOYDEEP
APODACA, MICHAEL
NAVALE, ADITYA
NALLURI, HEMA
PUFFER, DAVID
APPU, ABHISHEK
ASHBAUGH, BEN
VALERIO, JAMES
SCHLUESSLER, TRAVIS
FLIFLET, BRANDON
SHAH, ANKUR
</inventors>

<docdb_family_id>
68296356
</docdb_family_id>

<title>
WORKLOAD SCHEDULING AND DISTRIBUTION ON A DISTRIBUTED GRAPHICS DEVICE
</title>

<abstract>
Embodiments described herein provide a graphics, media, and compute device having a tiled architecture composed of a number of tiles of smaller graphics devices. The work distribution infrastructure for such device enables the distribution of workloads across multiple tiles of the device. Work items can be submitted to any one or more of the multiple tiles, with workloads able to span multiple tiles. Additionally, upon completion of a work item, graphics, media, and/or compute engines within the device can readily acquire new work items for execution with minimal latency.
</abstract>

<claims>
1. A graphics processor comprising: a first tile of graphics processing engines; a second tile of graphics processing engines; and an interface between a host system and the graphics processor, the interface to receive a set of commands for a workload having a first partition and a second partition, submit the set of commands to the first tile of graphics processing engines, and submit the set of commands the second tile of graphics processing engines; wherein the first tile of graphics processing engines is to read a first partition identifier from a first hardware context, the first partition identifier associated with the first partition, and conditionally execute commands of the first partition while bypassing commands of the second partition; and wherein the second tile of graphics processing engines is to read a second partition identifier from a second hardware context, the second partition identifier associated with the second partition, and conditionally execute commands of the second partition while bypassing commands of the first partition.
2. The graphics processor as in claim 1, the interface to the host system further to receive a command to associate the first hardware context with the first tile of graphics processing engines.
3. The graphics processor as in claim 2, the interface to the host system further to receive a command to configure the first hardware context based on a first logical render context.
4. The graphics processor as in claim 3, the interface to the host system further to receive a command to associate the second hardware context with the second tile of graphics processing engines.
5. The graphics processor as in claim 4, the interface to the host system further to receive a command to configure the second hardware context based on a second logical render context.
6. The graphics processor as in claim 5, wherein the interface is to receive the set of commands for the workload via a memory buffer including commands to be executed for the workload.
7. The graphics processor as in claim 6, wherein the first hardware context includes a first offset within the memory buffer associated with a start of the first partition and the second hardware context includes a second offset within the memory buffer associated with the start of the second partition.
8. The graphics processor as in claim 7, wherein the first tile of graphics processing engines is to begin execution of commands for the first partition with a command stored at the first offset within the memory buffer.
9. The graphics processor as in claim 7, wherein the second tile of graphics processing engines is to begin execution of commands for the second partition with a command stored at the second offset within the memory buffer.
10. The graphics processor as in claim 7, wherein the second tile of graphics processing engines is to synchronize with the second tile of graphics processing engines when execution of the first partition and the second partition complete.
11. A non-transitory machine-readable medium storing instructions which cause one or more processors to perform operations comprising: generating a set of commands of a workload to be executed by a graphics processor having multiple tiles of graphics processing engines; partitioning the set of commands into a first partition and a second partition; associating a first partition identifier with a first render context, the first partition identifier to identify the first partition; associating a second partition identifier with a second render context, the second partition identifier to identify the second partition; submitting the first partition and the second partition to each of a first graphics processing engine tile and a second graphics processing engine tile of the multiple tiles of graphics processing engines; executing the first partition via the first graphics processing engine tile; and executing the second partition via the second graphics processing engine tile.
12. The non-transitory machine-readable medium as in claim 11, the operations additionally comprising, before executing the first partition and the second partition: assigning the first partition identifier to the first partition; assigning the second partition identifier to the second partition; initializing the first render context and defining execution state used to execute the first partition; and initializing the second render context and defining execution state used to execute the second partition.
13. The non-transitory machine-readable medium as in claim 12, wherein submitting the first partition and the second partition to each of the first graphics processing engine tile and the second graphics processing engine tile includes submitting a memory buffer including commands of the first partition and the second partition.
14. The non-transitory machine-readable medium as in claim 14, the operations additionally comprising, before executing the first partition and the second partition, assigning the first render context to the first graphics processing engine tile and assigning the second render context to the second graphics processing engine tile, wherein the first render context includes a first offset in the memory buffer to a start of the first partition, the second render context includes a second offset in the memory buffer to a start of the second partition, and the memory buffer includes a synchronization command at an end of first partition and the second partition.
15. A system comprising the non-transitory machine-readable medium as in any one of claims 11-14.
</claims>
</document>
