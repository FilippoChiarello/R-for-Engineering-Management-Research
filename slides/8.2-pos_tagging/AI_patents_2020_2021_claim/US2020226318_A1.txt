<document>

<filing_date>
2020-03-27
</filing_date>

<publication_date>
2020-07-16
</publication_date>

<priority_date>
2018-05-17
</priority_date>

<ipc_classes>
G06F17/16,G06F40/137,G06F40/146,G06N5/04,G06N7/00,H03M7/30
</ipc_classes>

<assignee>
ORACLE INTERNATIONAL CORPORATION
</assignee>

<inventors>
GREEN, STEPHEN JOSEPH
TRISTAN, JEAN-BAPTISTE FREDERIC GEORGE
WICK, MICHAEL LOUIS
</inventors>

<docdb_family_id>
68533619
</docdb_family_id>

<title>
SYSTEMS AND METHODS FOR SCALABLE HIERARCHICAL COREFERENCE
</title>

<abstract>
A scalable hierarchical coreference method that employs a homomorphic compression scheme that supports addition and partial subtraction to more efficiently represent the data and the evolving intermediate results of probabilistic inference. The method may encode the features underlying conditional random field models of coreference resolution so that cosine similarities can be efficiently computed. The method may be applied to compressing features and intermediate inference results for conditional random fields. The method may allow compressed representations to be added and subtracted in a way that preserves the cosine similarities.
</abstract>

<claims>
1. 1.-20. (canceled)
21. A system, comprising: one or more storage devices; one or more processors; and a memory comprising program instructions executable by the one or more processors to: store compressed entity information representing mentions associated with a plurality of entities on the one or more storage devices; wherein each mention is represented in the compressed entity information as a low-dimensional fixed-width feature vector comprising n features, wherein the feature vectors are compressed according to a locality sensitive hash (LSH) function H that, for a feature vector a, stores a dot product a·hi as the hash of a such that H(a) is an array of dot products of length n.
22. The system as recited in claim 21, wherein the program instructions are further executable by the one or more processors to compute cosine similarity between two entities with compressed feature vectors in the compressed entity information based on the compressed feature vectors.
23. The system as recited in claim 21, wherein the program instructions are further executable by the one or more processors to add compressed feature vectors to the compressed entity information without requiring the feature vectors to be added to original uncompressed entity information and recompressing the entity information.
24. The system as recited in claim 21, wherein the program instructions are further executable by the one or more processors to subtract compressed feature vectors from the compressed entity information without requiring the feature vectors to be subtracted from original uncompressed entity information and recompressing the entity information.
25. The system as recited in claim 21, wherein the program instructions are further executable by at least one of the one or more processors to: determine, based on the compressed entity information, that two entities with compressed feature vectors in the compressed entity information are to be merged; and merge the two entities in the compressed entity information without requiring the compressed entity information to be decompressed.
26. The system as recited in claim 25, wherein, to merge the two entities, the program instructions are further executable by the one or more processors to add the compressed feature vectors of the two entities without requiring the compressed entity information to be decompressed.
27. The system as recited in claim 21, wherein the program instructions are further executable by at least one of the one or more processors to: determine, based on the compressed entity information that an entity with compressed feature vectors in the compressed entity information is to be split to form two different entities; and split the entity in the compressed entity information to form the two different entities in the compressed entity information without requiring the compressed entity information to be decompressed.
28. The system as recited in claim 27, wherein, to split the entity, the program instructions are further executable by the one or more processors to subtract one or more compressed feature vectors from the entity without requiring the compressed entity information to be decompressed.
29. A method, comprising: performing, by a computer system comprising one or more processors: compressing feature vectors representing mentions associated with a plurality of entities according to a locality sensitive hash (LSH) function H that, for a feature vector a, stores a dot product a·hi as the hash of a such that H(a) is an array of dot products of length n; and adding the compressed feature vectors to compressed entity information for the plurality of entities on one or more storage devices without decompressing the entity information.
30. The method as recited in claim 29, further comprising computing cosine similarity between two entities with compressed feature vectors in the compressed entity information based on the compressed feature vectors without decompressing the entity information.
31. The method as recited in claim 29, further comprising subtracting a compressed feature vector from the compressed entity information without decompressing the entity information.
32. The method as recited in claim 29, further comprising: determining, based on the compressed entity information, that two entities with compressed feature vectors in the compressed entity information are to be merged; and merging the two entities in the compressed entity information without requiring the compressed entity information to be decompressed.
33. The method as recited in claim 32, wherein merging the two entities comprises adding the compressed feature vectors of the two entities without requiring the compressed entity information to be decompressed.
34. The method as recited in claim 29, further comprising: determining that an entity with compressed feature vectors in the compressed entity information is to be split to form two different entities; and splitting the entity in the compressed entity information to form the two different entities in the compressed entity information without requiring the compressed entity information to be decompressed.
35. The method as recited in claim 34, wherein splitting the entity comprises subtracting one or more compressed feature vectors from the entity without requiring the compressed entity information to be decompressed.
36. One or more non-transitory, computer-readable storage media storing program instructions that when executed on or across one or more processors cause the one or more processors to: compress feature vectors representing mentions associated with entities according to a locality sensitive hash (LSH) function H that, for a feature vector a, stores a dot product a·hi as the hash of a such that H(a) is an array of dot products of length n; and store the compressed feature vectors as compressed entity information for a plurality of entities on one or more storage devices.
37. The one or more non-transitory, computer-readable storage media of claim 36, further storing program instructions that when executed on or across one or more processors further cause the one or more processors to compute cosine similarity between two entities with compressed feature vectors in the compressed entity information based on the compressed feature vectors.
38. The one or more non-transitory, computer-readable storage media of claim 36, further storing program instructions that when executed on or across one or more processors further cause the one or more processors to add a compressed feature vector to the compressed entity information without requiring the feature vector to be added to original uncompressed entity information and recompressing the entity information.
39. The one or more non-transitory, computer-readable storage media of claim 36, further storing program instructions that when executed on or across one or more processors further cause the one or more processors to subtract a compressed feature vector from the compressed entity information without requiring the feature vector to be subtracted from original uncompressed entity information and recompressing the entity information.
40. The one or more non-transitory, computer-readable storage media of claim 36, further storing program instructions that when executed on or across one or more processors further cause the one or more processors to: determine, based on the compressed entity information, that two entities with compressed feature vectors in the compressed entity information are to be merged; and merge the two entities in the compressed entity information without requiring the compressed entity information to be decompressed; wherein, to merge the two entities, the program instructions when executed further cause the one or more computers to add the compressed feature vectors of the two entities without requiring the compressed entity information to be decompressed.
</claims>
</document>
