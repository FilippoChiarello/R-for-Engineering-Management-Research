<document>

<filing_date>
2020-03-26
</filing_date>

<publication_date>
2020-10-08
</publication_date>

<priority_date>
2019-04-03
</priority_date>

<ipc_classes>
G06F16/242,G06F16/28,G06F16/36,G06F16/901,G06F16/957
</ipc_classes>

<assignee>
UNITED HEALTH GROUP
</assignee>

<inventors>
CLEGG, W. RANDAL
HILADO, RUDY R.
KORPMAN, RALPH, A.
POST, CINDY A.
</inventors>

<docdb_family_id>
72661889
</docdb_family_id>

<title>
MANAGING DATA OBJECTS FOR GRAPH-BASED DATA STRUCTURES
</title>

<abstract>
Various embodiments provide methods, systems, apparatus, computer program products, and/or the like for managing, ingesting, monitoring, updating, and/or extracting/retrieving information/data associated with an electronic record (ER) stored in an ER data store and/or accessing information/data from the ER data store, wherein the ERs are generated, updated/modified, and/or accessed via a graph-based domain ontology.
</abstract>

<claims>
1. A method for providing information stored in a database, the method comprising: automatically receiving, by a computing entity, an extractable packet data object, wherein (a) the extractable packet data object is an XML document, (a) a data artifact packet data object is generated based at least in part on the extractable packet data object, (b) the data artifact packet data object comprises an entity identifier identifying a subject entity, (c) the data artifact packet data object comprises one or more ontology concept identifiers corresponding respectively to one or more concepts defined within a graph-based domain ontology, and (d) the graph-based domain ontology comprises a specific set or hierarchy of concepts and relationships among those concepts related to a domain; automatically generating, by the computing entity, a container tree data structure comprising a data artifact container node as the root node based at least in part on the data artifact packet data object, wherein (a) the container tree data structure comprises a plurality of container nodes that are descendants of the root node based at least in part on the data artifact packet data object, (b) each container node of plurality of container nodes comprises an observable and an empty value for the corresponding observable, (c) each empty value is to be retrieved from a database or aggregated from retrieved empty values; automatically traversing, by the computing entity, each of the plurality of container nodes of the container tree data structure in a depth-first traversal, wherein (a) at each container node that is a leaf node in the traversal, a method is executed to retrieve a non-empty value from the database for the corresponding observable, and (b) at the completion of the traversal, each of the plurality of container nodes comprises a non-empty value for the corresponding observable; after the depth-first traversal, automatically processing, by the computing entity, the container tree data structure to generate at least one observable group, wherein the at least one observable group comprises each observable and the corresponding non-empty value; and generating, by the computing entity and based at least in part on the observable groups, an information message comprising the observable group.
2. The method of claim 1, wherein a hierarchy of container nodes of the container tree data structure is determined based at least in part on the graph-based domain ontology.
3. The method of claim 1, wherein automatically generating the container tree data structure comprises: determining a type of container node that should contain an observable corresponding to an ontology concept identifier in the data artifact packet data object; determining whether a container node having the determined type is present in the container tree data structure; and responsive to determining that a container node having the determined type is present in the container tree data structure, storing the observable and a corresponding empty value in the container node.
4. The method of claim 1, wherein automatically generating the container tree data structure comprises: determining a type of container node that should contain an observable corresponding to an ontology concept identifier in the data artifact packet data object; determining whether a container node having the determined type is present in the container tree data structure; and responsive to determining that a container node having the determined type is not present in the container tree data structure: (a) constructing the container node having the determine type, (b) storing the observable and a corresponding empty value in the container node, and inserting the container node into an appropriate position in the container tree data structure, wherein the appropriate position in the container tree data structure is determined based at least in part on the graph-based domain ontology.
5. The method of claim 1, wherein the depth-first traversal of the container tree data structure comprises aggregating two or more values of a subcontainer node to generate a value of container comprising the subcontainer.
6. The method of claim 1, wherein the requested information message is configured to be provided, at least in part, via a portlet for user consumption.
7. The method of claim 1, wherein the depth-first traversal of the container tree data structure comprises retrieving the originating source vocabulary corresponding to the values.
8. The method of claim 1, further comprising retrieving a confidence score corresponding to at least a portion of an observable group from the database, wherein the information message comprises the confidence score.
9. A system comprising one or more processors, one or more memory storage areas comprising program code, the one or more memory storage areas and the program code configured to, with the one or more processors, cause the system to at least: automatically receive an extractable packet data object, wherein (a) the extractable packet data object is an XML document, (a) a data artifact packet data object is generated based at least in part on the extractable packet data object, (b) the data artifact packet data object comprises an entity identifier identifying a subject entity, (c) the data artifact packet data object comprises one or more ontology concept identifiers corresponding respectively to one or more concepts defined within a graph-based domain ontology, and (d) the graph-based domain ontology comprises a specific set or hierarchy of concepts and relationships among those concepts related to a domain; automatically generate a container tree data structure comprising a data artifact container node as the root node based at least in part on the data artifact packet data object, wherein (a) the container tree data structure comprises a plurality of container nodes that are descendants of the root node based at least in part on the data artifact packet data object, (b) each container node of plurality of container nodes comprises an observable and an empty value for the corresponding observable, (c) each empty value is to be retrieved from a database or aggregated from retrieved empty values; automatically traverse each of the plurality of container nodes of the container tree data structure in a depth-first traversal, wherein (a) at each container node that is a leaf node in the traversal, a method is executed to retrieve a non-empty value from the database for the corresponding observable, and (b) at the completion of the traversal, each of the plurality of container nodes comprises a non-empty value for the corresponding observable; after the depth-first traversal, automatically process the container tree data structure to generate at least one observable group, wherein the at least one observable group comprises each observable and the corresponding non-empty value; and generate, based at least in part on the observable groups, an information message comprising the observable group.
10. The system of claim 9, wherein a hierarchy of container nodes of the container tree data structure is determined based at least in part on the graph-based domain ontology.
11. The system of claim 9, wherein automatically generating the container tree data structure comprises: determining a type of container node that should contain an observable corresponding to an ontology concept identifier in the data artifact packet data object; determining whether a container node having the determined type is present in the container tree data structure; and responsive to determining that a container node having the determined type is present in the container tree data structure, storing the observable and a corresponding empty value in the container node.
12. The system of claim 9, wherein automatically generating the container tree data structure comprises: determining a type of container node that should contain an observable corresponding to an ontology concept identifier in the data artifact packet data object; determining whether a container node having the determined type is present in the container tree data structure; and responsive to determining that a container node having the determined type is not present in the container tree data structure: (a) constructing the container node having the determine type, (b) storing the observable and a corresponding empty value in the container node, and inserting the container node into an appropriate position in the container tree data structure, wherein the appropriate position in the container tree data structure is determined based at least in part on the graph-based domain ontology.
13. The system of claim 9, wherein the depth-first traversal of the container tree data structure comprises aggregating two or more values of a subcontainer node to generate a value of container comprising the subcontainer.
14. The system of claim 9, wherein the requested information message is configured to be provided, at least in part, via a portlet for user consumption.
15. The system of claim 9, wherein the depth-first traversal of the container tree data structure comprises retrieving the originating source vocabulary corresponding to the values.
16. The system of claim 9, wherein the one or more memory storage areas and the program code are further configured to, with the one or more processors, cause the system to at least retrieve a confidence score corresponding to at least a portion of an observable group from the database, wherein the information message comprises the confidence score.
17. A computer program product comprising at least one non-transitory computer-readable storage medium having computer-readable program code stored therein, the computer-readable program code configured to at least: automatically receive an extractable packet data object, wherein (a) the extractable packet data object is an XML document, (a) a data artifact packet data object is generated based at least in part on the extractable packet data object, (b) the data artifact packet data object comprises an entity identifier identifying a subject entity, (c) the data artifact packet data object comprises one or more ontology concept identifiers corresponding respectively to one or more concepts defined within a graph-based domain ontology, and (d) the graph-based domain ontology comprises a specific set or hierarchy of concepts and relationships among those concepts related to a domain; automatically generate a container tree data structure comprising a data artifact container node as the root node based at least in part on the data artifact packet data object, wherein (a) the container tree data structure comprises a plurality of container nodes that are descendants of the root node based at least in part on the data artifact packet data object, (b) each container node of plurality of container nodes comprises an observable and an empty value for the corresponding observable, (c) each empty value is to be retrieved from a database or aggregated from retrieved empty values; automatically traverse each of the plurality of container nodes of the container tree data structure in a depth-first traversal, wherein (a) at each container node that is a leaf node in the traversal, a method is executed to retrieve a non-empty value from the database for the corresponding observable, and (b) at the completion of the traversal, each of the plurality of container nodes comprises a non-empty value for the corresponding observable; after the depth-first traversal, automatically process the container tree data structure to generate at least one observable group, wherein the at least one observable group comprises each observable and the corresponding non-empty value; and generate, based at least in part on the observable groups, an information message comprising the observable group.
18. The computer program product of claim 17, wherein a hierarchy of container nodes of the container tree data structure is determined based at least in part on the graph-based domain ontology.
19. The computer program product of claim 17, wherein automatically generating the container tree data structure comprises: determining a type of container node that should contain an observable corresponding to an ontology concept identifier in the data artifact packet data object; determining whether a container node having the determined type is present in the container tree data structure; and responsive to determining that a container node having the determined type is present in the container tree data structure, storing the observable and a corresponding empty value in the container node.
20. The computer program product of claim 17, wherein automatically generating the container tree data structure comprises: determining a type of container node that should contain an observable corresponding to an ontology concept identifier in the data artifact packet data object; determining whether a container node having the determined type is present in the container tree data structure; and responsive to determining that a container node having the determined type is not present in the container tree data structure: (a) constructing the container node having the determine type, (b) storing the observable and a corresponding empty value in the container node, and inserting the container node into an appropriate position in the container tree data structure, wherein the appropriate position in the container tree data structure is determined based at least in part on the graph-based domain ontology.
21. The computer program product of claim 17, wherein the depth-first traversal of the container tree data structure comprises aggregating two or more values of a subcontainer node to generate a value of container comprising the subcontainer.
22. The computer program product of claim 17, wherein the requested information message is configured to be provided, at least in part, via a portlet for user consumption.
23. The computer program product of claim 17, wherein the depth-first traversal of the container tree data structure comprises retrieving the originating source vocabulary corresponding to the values.
24. The computer program product of claim 17, wherein the computer-readable program code is further configured to retrieve a confidence score corresponding to at least a portion of an observable group from the database, wherein the information message comprises the confidence score.
</claims>
</document>
