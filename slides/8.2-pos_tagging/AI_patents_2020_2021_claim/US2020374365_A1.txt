<document>

<filing_date>
2018-08-13
</filing_date>

<publication_date>
2020-11-26
</publication_date>

<priority_date>
2017-08-14
</priority_date>

<ipc_classes>
G06F9/54,H04L29/06,H04L29/08
</ipc_classes>

<assignee>
RELIANCE JIO INFOCOMM
</assignee>

<inventors>
AGRAWAL, ANSHUL
Rai, Manvendra
Gandhi, Sanjay
</inventors>

<docdb_family_id>
65361858
</docdb_family_id>

<title>
Systems and Methods for Controlling Real-time Traffic Surge of Application Programming Interfaces (APIs) at Server
</title>

<abstract>
The present invention relates to systems and methods for controlling real-time traffic surge at a server [102]. An Application Programming Interface (API) gateway [104] receives at least one service request from at least one application device [106] for availing at least one service from a server [102], and enables at least one part of the server [102] based on a count of the received requests determined by a load counter. A throttling parameter, including one of a static throttling parameter and a dynamic throttling parameter, is determined by a throttling parameter module [204] for the enabled at least one part of the server [102]. The API gateway [104] validates the at least one service request based on the count and the throttling parameter. Thereafter, the at least one part of the server [102] provides at least one service to the validated at least one application device [106].
</abstract>

<claims>
1. A method for controlling a surge in traffic at a server the method comprising: receiving, by an Application Programming Interface (API) gateway, at least one service request from at least one application device for availing at least one service, wherein the at least one service is provided by at least one part of the server; determining, by a load counter module, a count of the at least one service request received from the at least one application device; enabling, by the API gateway, the at least one part of the server based on the count of the at least one service request received from the at least one application device; determining, by a throttling module, a throttling parameter for the at least one part of the server enabled by the API gateway, wherein the throttling parameter includes one of a static throttling parameter and a dynamic throttling parameter; one of validating and invalidating, by the API gateway, each of the at least one service request based on the count of the at least one service request and the throttling parameter; and providing, by the at least one part of the server, the at least one service to each of the at least one application device in an event the at least one service request is validated.
2. The method as claimed in claim 1, further comprising transmitting, by the API gateway, a notification to the at least one application device in an event the at least one service request is invalidated.
3. The method as claimed in claim 1, wherein the count is incremented, each time a new service request is received.
4. The method as claimed in claim 1, wherein the count is decremented, each time the at least one service is provided by the at least one part of the server against the unique service request.
5. The method as claimed in claim 1, wherein the count is decremented, each time the notification to the at least one application device is sent in response to the at least one service request.
6. The method as claimed in claim 1, wherein enabling the at least one part of the server includes enabling the at least one part of the server up to a maximum part of the server in an event the count of the at least one service exceeds a predefined service request limit.
7. The method as claimed in claim 1, wherein the static throttling parameter corresponds to a predefined service handling capacity of the at least one part of the server.
8. The method as claimed in claim 1, wherein the dynamic throttling parameter corresponds to an on-the-fly service handling capacity of the at least one part of the server, determined on the basis of at least one of a device ID, a device type, an Operating System (OS) type, and a quota limit, of the application device.
9. The method as claimed in claim 1, wherein the throttling parameter is further determined based on one of a time-period, and a set at one of a plurality of granular levels including second, minute, hour, day, month, and year.
10. The method as claimed in claim 1, wherein the at least service request is validated in an event the count of the at least one service request is one of equal to and below the throttling parameter.
11. The method as claimed in claim 1, wherein the at least service request is invalidated in an event the count of the at least one service request exceeds the throttling parameter.
12. A system for controlling a surge in traffic at a server, the system comprising: an Application Programming Interface (API) gateway configured to receive at least one service request from at least one application device for availing at least one service, wherein the at least one service is provided by at least one part of the server; a load counter module configured to determine a count of the at least one service request received from the at least one application device; the API gateway configured to enable the at least one part of the server based on the count of the at least one service request received from the at least one application device; a throttling module configured to determine a throttling parameter for the at least one part of the server enabled by the API gateway, wherein the throttling parameter includes one of a static throttling parameter and a dynamic throttling parameter; the API gateway configured to one of validate and invalidate each of the at least one service request based on the count of the at least one service request and the throttling parameter; and the at least one part of the server configured to provide the at least one service to each of the at least one application device in an event the at least one service request is validated.
13. The system as claimed in claim 12, further comprising a database configured in communication with the API gateway for storing the throttle parameter and the count of the at least one service request.
14. The system as claimed in claim 12, further comprising an authentication module configured to authorize the plurality of requests received from the at least one client application device for availing the at least one service from the server.
</claims>
</document>
