<document>

<filing_date>
2019-07-24
</filing_date>

<publication_date>
2021-01-28
</publication_date>

<priority_date>
2019-07-24
</priority_date>

<ipc_classes>
H04L12/24,H04L12/26,H04L29/08
</ipc_classes>

<assignee>
CISCO TECHNOLOGY
</assignee>

<inventors>
HULICK, JR., WALTER THEODORE
NATARAJ, HARISH
</inventors>

<docdb_family_id>
74189716
</docdb_family_id>

<title>
DYNAMIC CIRCUIT BREAKER APPLICATIONS USING A PROXYING AGENT
</title>

<abstract>
In one embodiment, a proxying agent loaded at application startup loads a circuit breaker framework into a class loader, and also loads a circuit breaker proxy into an extension class loader seen by the proxying agent and by the application. The proxying agent may also instrument selected methods of the application, such that, when calling to run an instrumented method: an ID of the circuit breaker proxy is set to a trackable context, and the proxy execution may be held until exit of the run method (and if exit of the run method is due to a particular exception, an exception of the proxy may also be set to reflect the particular exception). The circuit breaker may then monitor the proxy for latency, exceptions, and circuit breaker trip criteria, and stops the run method in response to the latency, exceptions, or circuit breaker trip criteria surpassing a particular respective threshold.
</abstract>

<claims>
1. A method, comprising: loading, by a proxying agent loaded at an application startup, a circuit breaker framework into a class loader; loading, by the proxying agent, a circuit breaker proxy into an extension class loader seen by the proxying agent and by the application; instrumenting, by the proxying agent, selected methods of the application; and in response to a call to run an instrumented method: setting an identifier (ID) of the circuit breaker proxy to a trackable context; holding proxy execution until exit of the run method; and setting, if exit of the run method is due to a particular exception, an exception of the proxy to reflect the particular exception; wherein the circuit breaker monitors the proxy for latency, exceptions, and circuit breaker trip criteria, and stops the run method in response to the latency, exceptions, or circuit breaker trip criteria surpassing a particular respective threshold.
2. The method as in claim 1, further comprising: loading the proxying agent into an isolated class loader invisible to the application; and monitoring, by the proxying agent, the run method execution without circuit breaker knowledge.
3. The method as in claim 1, further comprising: finding circuit beaker instrumented method candidates based on one or more of annotations, specifications of class/method, and outbound exit point identification.
4. The method as in claim 1, wherein setting the ID of the circuit breaker proxy to the trackable context comprises: creating an exit point name for the trackable context of run method; passing the exit point name to the circuit breaker proxy; and setting a command key for the circuit breaker to be the exit point name.
5. The method as in claim 1, further comprising: dynamically disconnecting instrumentation of one or more particular instrumented methods to disable circuit breaker monitoring of the one or more particular instrumented methods.
6. The method as in claim 1, further comprising: learning and setting one or more circuit breaker thresholds based on metrics discovered during a learning period.
7. The method as in claim 1, wherein holding proxy execution until exit of the run method comprises: locking operation of the circuit breaker proxy upon starting the run method; and unlocking operation of the circuit breaker proxy upon exit of the run method.
8. The method as in claim 1, wherein execution of the run method takes place based on a circuit breaker execution selected from a group consisting of: synchronous, asynchronous, and observable.
9. The method as in claim 1, further comprising: determining first whether the application has a native circuit breaker preinstalled; and using the native circuit breaker as the circuit breaker framework.
10. The method as in claim 1, further comprising: enabling a test mode by disabling circuit breaker stopping of the run method.
11. The method as in claim 1, further comprising: setting the one or more circuit breaker thresholds based on one or more user-specified criteria.
12. The method as in claim 1, further comprising: setting the one or more circuit breaker thresholds according to one or more security criteria.
13. The method as in claim 1, further comprising: setting one or more fallback configurations to perform in response to stopping the run method by the circuit breaker.
14. A tangible, non-transitory, computer-readable medium having computer-executable instructions stored thereon that, when executed by a processor on a computer, cause the computer to perform a method comprising: loading, by a proxying agent loaded at an application startup, a circuit breaker framework into a class loader; loading, by the proxying agent, a circuit breaker proxy into an extension class loader seen by the proxying agent and by the application; instrumenting, by the proxying agent, selected methods of the application; and in response to a call to run an instrumented method: setting an identifier (ID) of the circuit breaker proxy to a trackable context; holding proxy execution until exit of the run method; and setting, if exit of the run method is due to a particular exception, an exception of the proxy to reflect the particular exception; wherein the circuit breaker monitors the proxy for latency, exceptions, and circuit breaker trip criteria, and stops the run method in response to the latency, exceptions, or circuit breaker trip criteria surpassing a particular respective threshold.
15. The computer-readable media as in claim 14, wherein the method further comprises: loading the proxying agent into an isolated class loader invisible to the application; and monitoring, by the proxying agent, the run method execution without circuit s breaker knowledge.
16. The computer-readable media as in claim 14, wherein the method further comprises: finding circuit beaker instrumented method candidates based on one or more of annotations, specifications of class/method, and outbound exit point identification.
17. The computer-readable media as in claim 14, wherein setting the ID of the circuit breaker proxy to the trackable context comprises: creating an exit point name for the trackable context of run method; passing the exit point name to the circuit breaker proxy; and setting a command key for the circuit breaker to be the exit point name.
18. The computer-readable media as in claim 14, wherein the method further comprises: dynamically disconnecting instrumentation of one or more particular instrumented methods to disable circuit breaker monitoring of the one or more particular instrumented methods.
19. The computer-readable media as in claim 14, wherein the method further comprises: learning and setting one or more circuit breaker thresholds based on metrics discovered during a learning period.
20. An apparatus, comprising: a processor configured to execute one or more processes; and a memory configured to store a process executable by the processor, the process, when executed, configured to: load, by a proxying agent loaded at an application startup, a circuit breaker framework into a class loader; load, by the proxying agent, a circuit breaker proxy into an extension class loader seen by the proxying agent and by the application; instrument, by the proxying agent, selected methods of the application; and in response to a call to run an instrumented method: set an identifier (ID) of the circuit breaker proxy to a trackable context; hold proxy execution until exit of the run method; and set, if exit of the run method is due to a particular exception, an exception of the proxy to reflect the particular exception; wherein the circuit breaker monitors the proxy for latency, exceptions, and circuit breaker trip criteria, and stops the run method in response to the latency, exceptions, or circuit breaker trip criteria surpassing a particular respective threshold.
</claims>
</document>
