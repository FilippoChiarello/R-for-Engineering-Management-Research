<document>

<filing_date>
2020-01-13
</filing_date>

<publication_date>
2020-05-14
</publication_date>

<priority_date>
2018-03-20
</priority_date>

<ipc_classes>
G06F8/41,G06F8/72,G06F9/44
</ipc_classes>

<assignee>
ARCHITECTURE TECHNOLOGY CORPORATION
</assignee>

<inventors>
NICOTERA, PAUL
KIMBALL, COLLEEN
HUDDLESTON, KATEY
</inventors>

<docdb_family_id>
69141118
</docdb_family_id>

<title>
Software refactoring systems and methods
</title>

<abstract>
A computer-implemented method includes creating, by a computing device, an abstract syntax tree based on a source code file of a software application, the source code file including source code defining operations of the software application. The method also includes traversing, by the computing device, the abstract syntax tree. The method further includes identifying, by the computing device and based on the traversing of the abstract syntax tree, one or more code violations present in the source code. The method also includes generating, by the computing device, at least one refactoring option for the one or more code violations, each refactoring option of the at least one refactoring option representing a change to the source code file that is configured to remediate the associated code violation.
</abstract>

<claims>
1. 1-20: (canceled)
21. A computer-implemented method comprising: identifying, by one or more computing devices and based on traversing an abstract syntax tree, code violations present in source code; generating, by the one or more computing devices, refactoring options for the code violations, each refactoring option representing a change to the source code that is configured to remediate an associated code violation; receiving indications, from users, of selected refactoring options associated with particular code violations; analyzing the selected refactoring options using machine learning; identifying, by the one or more computing devices and based on traversing the abstract syntax tree, code violations present in additional source code; and generating updated refactoring options for the identified code violations in the additional source code based on the analysis of the selected refactoring options.
22. The computer-implemented method of claim 21, wherein the one or more computing devices comprise a plurality of computing devices in an enterprise network.
23. The computer-implemented method of claim 21, further comprising: automatically performing, by the one or more computing devices, one or more changes to the additional source code based on the updated refactoring options.
24. The computer-implemented method of claim 21, wherein analyzing the selected refactoring options using machine learning comprises: analyzing the selected refactoring options using one or more of decision tree learning, association rule learning, learning via artificial neural networks, inductive logic programming, support vector machines, clustering, Bayesian networks, reinforcement learning, representation learning, similarity and metric learning, sparse dictionary learning, genetic algorithms, or rule-based machine learning.
25. The computer-implemented method of claim 21, further comprising: displaying a segment of the additional source code including the identified code violations present in the additional source code and the updated refactoring options; receiving an indication of a selection of a first refactoring option of the updated refactoring options; and changing the additional source code based on the first refactoring option.
26. The computer-implemented method of claim 21, further comprising: traversing the abstract syntax tree and counting a total number of significant nodes within a code block during the traversing, wherein a significant node represents a significant line of source code, and wherein identifying the code violations further includes determining that the total number of significant nodes within the code block exceeds a pre-determined threshold.
27. The computer-implemented method of claim 21, further comprising: disallowing transmission of the source code between computing devices of the one or more computing devices.
28. A device comprising: a memory configured to store source code; and one or more processors in communication with the memory, the one or more processors configured to: identify, based on traversing an abstract syntax tree, code violations present in the source code; generate refactoring options for the code violations, each refactoring option representing a change to the source code that is configured to remediate an associated code violation; receive indications, from a user, of selected refactoring options associated with particular code violations; analyze the selected refactoring options using machine learning; identify, based on traversing the abstract syntax tree, code violations present in additional source code; and generate updated refactoring options for the identified code violations in the additional source code based on the analysis of the selected refactoring options.
29. The device of claim 28, wherein the one or more processors are further configured to: automatically perform one or more changes to the additional source code based on the updated refactoring options.
30. The device of claim 28, wherein to analyze the selected refactoring options using machine learning, the one or more processors are further configured to: analyze the selected refactoring options using one or more of decision tree learning, association rule learning, learning via artificial neural networks, inductive logic programming, support vector machines, clustering, Bayesian networks, reinforcement learning, representation learning, similarity and metric learning, sparse dictionary learning, genetic algorithms, or rule-based machine learning.
31. The device of claim 28, wherein the one or more processors are further configured to: display a segment of the additional source code including the identified code violations present in the additional source code and the updated refactoring options; receive an indication of a selection of a first refactoring option of the updated refactoring options; and change the additional source code based on the first refactoring option.
32. The device of claim 28, wherein the one or more processors are further configured to: traverse the abstract syntax tree and count a total number of significant nodes within a code block during the traversing, wherein a significant node represents a significant line of source code, and wherein to identify the code violations, the one or more processors are further configured to determine that the total number of significant nodes within the code block exceeds a pre-determined threshold.
33. The device of claim 28, wherein the one or more processors are further configured to: disallow transmission of the source code to another computing device.
34. A non-transitory computer-readable storage medium storing instructions that, when executed, cause one or more processors to: identify, based on traversing of abstract syntax tree, code violations present in source code; generate refactoring options for the code violations, each refactoring option representing a change to the source code that is configured to remediate an associated code violation; receive indications, from a user, of selected refactoring options associated with particular code violations; analyze the selected refactoring options using machine learning; subsequently identify, based on traversing the abstract syntax tree, code violations present in additional source code; and generate updated refactoring options for the identified code violations in the additional source code based on the analysis of the selected refactoring options.
35. The non-transitory computer-readable storage medium of claim 34, wherein the instructions further cause the one or more processors to: automatically perform one or more changes to the additional source code based on the updated refactoring options.
36. The non-transitory computer-readable storage medium of claim 34, wherein to analyze the selected refactoring options using machine learning, the instructions further cause the one or more processors to: analyze the selected refactoring options using one or more of decision tree learning, association rule learning, learning via artificial neural networks, inductive logic programming, support vector machines, clustering, Bayesian networks, reinforcement learning, representation learning, similarity and metric learning, sparse dictionary learning, genetic algorithms, or rule-based machine learning.
37. The non-transitory computer-readable storage medium of claim 34, wherein the instructions further cause the one or more processors to: display a segment of the additional source code including the identified code violations present in the additional source code and the updated refactoring options; receive an indication of a selection of a first refactoring option of the updated refactoring options; and change the additional source code based on the first refactoring option.
38. The non-transitory computer-readable storage medium of claim 34, wherein the instructions further cause the one or more processors to: traverse the abstract syntax tree and count a total number of significant nodes within a code block during the traversing, wherein a significant node represents a significant line of source code, and wherein to identify the code violations, the one or more processors are further configured to determine that the total number of significant nodes within the code block exceeds a pre-determined threshold.
39. The non-transitory computer-readable storage medium of claim 34, wherein the instructions further cause the one or more processors to: disallow transmission of the source code to another computing device.
</claims>
</document>
