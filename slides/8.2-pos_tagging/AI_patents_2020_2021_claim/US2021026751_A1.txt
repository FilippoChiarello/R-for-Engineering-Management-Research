<document>

<filing_date>
2020-07-24
</filing_date>

<publication_date>
2021-01-28
</publication_date>

<priority_date>
2019-07-25
</priority_date>

<ipc_classes>
G06F11/30,G06F11/32
</ipc_classes>

<assignee>
DEEP FACTOR, INC.
</assignee>

<inventors>
KAMITY, KIRAN
Larkin, Michael Kevin
</inventors>

<docdb_family_id>
74189767
</docdb_family_id>

<title>
SYSTEMS, METHODS, AND COMPUTER-READABLE MEDIA FOR INSTRUMENTING AN APPLICATION TO OPERATE IN CONJUNCTION WITH A TELEMETRY INTERCEPTION AND ANALYSIS PLATFORM
</title>

<abstract>
Systems, methods, and computer-readable media for intercepting telemetry events obtained during operation of an application and analyzing the telemetry events are provided. The telemetry events are intercepted at the library level by interposing on application calls to a native library. The telemetry events are collected and transmitted to a platform that analyzes the collected events and presents information based on the analysis.
</abstract>

<claims>
1. 1.-20. (canceled)
21. A method for configuring an application to operate in conjunction with a telemetry interception and analysis platform (TIAP), comprising: receiving an instrumentation command via a user interface to create a sealed output file of an application, wherein the application comprises a plurality of components, and wherein the user interface communicates with the TIAP; registering the plurality of components with the TIAP to correlate each component with a corresponding one of a plurality of interception codes; receiving the plurality of interception codes from the TIAP; receiving TIAP runtime code from the TIAP; storing the interception codes in an interception library, and where each interception code comprises at least one telemetry grammar and a trampoline function; and generating a sealed output file comprising the interception library and the TIAP runtime code.
22. The method of claim 21, wherein the application further comprises application executable code.
23. The method of claim 22, wherein the sealed output file comprises the application executable code, and wherein the TIAP runtime code comprises a loader that instructs the application to direct all calls to the interception library.
24. The method of claim 22, wherein the TIAP runtime code comprises a launcher that instructs the application to direct all calls to the interception library, and wherein the sealed output file does not include the application execution code.
25. The method of claim 21, wherein the at least one telemetry grammar defines an API or function call to intercept and record as a telemetry event.
26. The method of claim 21, wherein the at least one telemetry grammar is selected from a library of telemetry grammars hosted by the TIAP.
27. The method of claim 21, wherein the at least one telemetry grammar is generated by a customer interacting with the user interface.
28. The method of claim 21, wherein the user interface is a command line interface.
29. The method of claim 21, wherein the trampoline function redirects a call from the interception library to a native library associated with the application such that the call is implemented as originally intended.
30. A computer-readable storage medium containing program instructions for a method for configuring an application to operate in conjunction with a telemetry interception and analysis platform (TIAP), wherein execution of the program instructions by one or more processors of a computer system causes the one or more processor to perform steps comprising: receiving an instrumentation command via a user interface to create a sealed output file of an application, wherein the application comprises a plurality of components, wherein the user interface communicates with the TIAP; registering the plurality of components with the TIAP to correlate each component with a corresponding one of a plurality of interception codes; receiving the plurality of interception codes from the TIAP; receiving TIAP runtime code from the TIAP; storing the interception codes in an interception library, and where each interception code comprises at least one telemetry grammar and a trampoline function; and generating a sealed output file comprising the interception library and the TIAP runtime code.
31. The computer readable storage medium of claim 30, wherein the application further comprises application executable code.
32. The computer readable storage medium of claim 31, wherein the sealed output file comprises the application executable code, and wherein the TIAP runtime code comprises a loader that instructs the application to direct all calls to the interception library.
33. The computer readable storage medium of claim 31, wherein the TIAP runtime code comprises a launcher that instructs the application to direct all calls to the interception library, and wherein the sealed output file does not include the application execution code.
34. The computer readable storage medium of claim 30, wherein the at least one telemetry grammar defines an API or function call to intercept and record as a telemetry event.
35. The computer readable storage medium of claim 30, wherein the at least one telemetry grammar is selected from a library of telemetry grammars hosted by the TIAP.
36. The computer readable storage medium of claim 30, wherein the at least one telemetry grammar is generated by a customer interacting with the user interface.
37. The computer readable storage medium of claim 30, wherein the user interface is a command line interface.
38. The computer readable storage medium of claim 30, wherein the trampoline function redirects a call from the interception library to a native library associated with the application such that the call is implemented as originally intended.
39. 39.-64. (canceled)
</claims>
</document>
