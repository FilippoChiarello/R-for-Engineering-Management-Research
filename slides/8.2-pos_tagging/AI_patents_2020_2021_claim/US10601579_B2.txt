<document>

<filing_date>
2017-12-20
</filing_date>

<publication_date>
2020-03-24
</publication_date>

<priority_date>
2017-12-20
</priority_date>

<ipc_classes>
G06F17/10,H04L9/00,H04L9/14
</ipc_classes>

<assignee>
NXP SEMICONDUCTORS
</assignee>

<inventors>
SALEHI, FARIBORZ
JOYE, MARC
</inventors>

<docdb_family_id>
66816504
</docdb_family_id>

<title>
Privacy preserving comparison
</title>

<abstract>
A method for performing a secure comparison between a first secret data and a second secret data, including: receiving, by a processor of a first party, encrypted bits of the second secret data y from a second party, where is an integer; computing the Hamming weight h of first secret data x, wherein x has bits; computing the value of a first comparison bit δA such that δA=0 when h>└/2┘, δA=1 when h<┌/2┐, and δA is randomly selected when h=/2; forming a set of └/2┘ indexes that includes at least the indexes i where xi=δA; selecting random invertible scalars ri for each i in and computing c*i=(1+(1−2δA)xi·yi2δA−1·(xj⊕yj))ri wherein w denotes the homomorphic encryption of w using a cryptographic key of the second party; selecting random invertible scalars r−1 and computing c*−1=(δA·xj⊕yj)r−1; transmitting ciphertexts c*i in a random order to the second party.
</abstract>

<claims>
1. A method for performing a secure comparison between a first secret data and a second secret data, comprising: receiving, by a processor of a first party, encrypted bits of the second secret data y from a second party, where is an integer; computing the Hamming weight h of first secret data x, wherein x has bits; computing the value of a first comparison bit δA such that δA=0 when h>└/2┘, δA=1 when h<┌/2┐, and δA is randomly selected when h=/2; forming a set of └/2┘ indexes that includes at least the indexes i where xi=δA; selecting random invertible scalars ri for each i in and computing
description="In-line Formulae" end="lead"?c*i=(1+(1−2δA)xi·yi2δA−1·(xj⊕yj))ri description="In-line Formulae" end="tail"? wherein w denotes the homomorphic encryption of w using a cryptographic key of the second party; selecting random invertible scalars r−1 and computing
description="In-line Formulae" end="lead"?c*−1=(δA·xj⊕yj)r−1;description="In-line Formulae" end="tail"? transmitting ciphertexts c*i in a random order to the second party.
2. The method of claim 1, wherein when the second party sets a value of a second comparison bit δB based upon the decrypted c*i's and wherein δA⊕δB=[x≤y].
3. The method of claim 2, wherein when the second party sets a second comparison bit δB=1 when any one of the decrypted c*i's is equal to zero.
4. The method of claim 2, wherein when the second party sets a second comparison bit δB=0 when none of the decrypted c*i's is equal to zero.
5. The method of claim 1, wherein the encryption uses the Pallier cryptosystem.
6. The method of claim 1, wherein the encryption uses the exponential variant of the ElGamal cryptosystem.
7. The method of claim 1, further comprising receiving an encryption of the second comparison bit δB from the second party and computing δ=δB when δA=0 and δ=1·δB−1 when δA≠0, wherein δ=[x≤y].
8. A method for performing a secure comparison between a first secret data and a second secret data, comprising: receiving, by a processor of a first party, encrypted second secret data y from a second party, wherein where is the number of bits in y and wherein y denotes the additive homomorphic encryption of y; choosing a random mask ρ in , where κ is a security parameter; computing z†=y·x−1·+ρ, wherein x is the first secret data having bits; sending z†to the second party; computing x′=ρ mod ; receiving, by the processor of a first party, encrypted bits of y′ from the second party, wherein y′ is based upon z†; computing the Hamming weight h of x′; computing the value of a first comparison bit δ′A such that δ′A=0 when h>└/2┘, δ′A=1 when h<┌/2┐, and δ′A is randomly selected when h=/2; forming a set of └/2┘ indexes that includes at least the indexes i where x′i=δ′A; selecting random invertible scalars ri for each i in and computing
description="In-line Formulae" end="lead"?c*i=(1+(1−2δ′A)x′i·y′i2δ′A−1·(xj⊕yj))ri;description="In-line Formulae" end="tail"? selecting random invertible scalars r−1 and computing
description="In-line Formulae" end="lead"?c*−1=(δ′A·x′j⊕y′j)r−1;description="In-line Formulae" end="tail"? transmitting ciphertexts c*i in a random order to the second party.
9. The method of claim 8, wherein when the second party decrypts z†and defines y′=z† mod .
10. The method of claim 8, wherein the first party sets δA=δ′A when └ρ/┘ is even, and δA=1−δ′A otherwise, second party sets a value of a second comparison bit δB=δ′B when └z†/┘ is odd, and δB=1−δ′B otherwise and wherein δA⊕δB=[x≤y].
11. A non-transitory machine-readable storage medium encoded with instructions for performing a secure comparison between a first secret data and a second secret data, comprising: instructions for receiving, by a processor of a first party, encrypted bits of the second secret data y from a second party, where is an integer; instructions for computing the Hamming weight h of first secret data x, wherein x has bits; instructions for computing the value of a first comparison bit δA such that δA=0 when h>└/2┘, δA=1 when h<┌/2┐, and δA is randomly selected when h=/2; instructions for forming a set of └/2┘ indexes that includes at least the indexes i where xi=δA; instructions for selecting random invertible scalars ri for each i in and computing
description="In-line Formulae" end="lead"?c*i=(1+(1−2δA)xi·yi2δA−1·(xj⊕yj))ri description="In-line Formulae" end="tail"? wherein w denotes the homomorphic encryption of w using a cryptographic key of the second party; instructions for selecting random invertible scalars r−1 and computing
description="In-line Formulae" end="lead"?c*−1=(δA·xj⊕yj)r−1;description="In-line Formulae" end="tail"? instructions for transmitting ciphertexts c*i in a random order to the second party.
12. The non-transitory machine-readable storage medium of claim 11, wherein when the second party sets a value of a second comparison bit δB based upon the decrypted c*i's and wherein δA⊕δB=[x≤y].
13. The non-transitory machine-readable storage medium of claim 12, wherein when the second party sets a second comparison bit δB=1 when any one of the decrypted c*i's is equal to zero.
14. The non-transitory machine-readable storage medium of claim 12, wherein when the second party sets a second comparison bit δB=0 when none of the decrypted c*i's is equal to zero.
15. The non-transitory machine-readable storage medium of claim 11, wherein the encryption uses the Pallier cryptosystem.
16. The non-transitory machine-readable storage medium of claim 11, wherein the encryption uses the exponential variant of the ElGamal cryptosystem.
17. The non-transitory machine-readable storage medium of claim 11, further comprising instructions for receiving an encryption of the second comparison bit δB from the second party and computing δ=δB when δA=0 and δ=1·δB−1 when δA≠0, wherein δ=[x≤y].
18. A non-transitory machine-readable storage medium encoded with instructions for performing a secure comparison between a first secret data and a second secret data, comprising: instructions for receiving, by a processor of a first party, encrypted second secret data y from a second party, wherein where is the number of bits in y and wherein y denotes the additive homomorphic encryption of y; instructions for choosing a random mask ρ in , where κ is a security parameter; instructions for computing z†=y·x−1·+ρ, wherein x is the first secret data having bits; instructions for sending z† to the second party; instructions for computing x′=ρ mod ; instructions for receiving, by the processor of a first party, encrypted bits of y′ from the second party, wherein y′ is based upon z†; instructions for computing the Hamming weight h of x′; instructions for computing the value of a first comparison bit δ′A such that δ′A=0 when h>└/2┘, δ′A=1 when h<┌/2┐, and δ′A is randomly selected when h=/2; instructions for forming a set of └/2┘ indexes that includes at least the indexes i where x′i=δ′A; instructions for selecting random invertible scalars ri for each i in and computing
description="In-line Formulae" end="lead"?c*i=(1+(1−2δ′A)x′i·y′i2δ′A−1·(x′j⊕y′j))ri;description="In-line Formulae" end="tail"? instructions for selecting random invertible scalars r−1 and computing
description="In-line Formulae" end="lead"?c*−1=(δ′A·x′j⊕y′j)r−1;description="In-line Formulae" end="tail"? instructions for transmitting ciphertexts c*iin a random order to the second party.
19. The non-transitory machine-readable storage medium of claim 18, wherein when the second party decrypts z† and defines y′=z† mod .
20. The non-transitory machine-readable storage medium of claim 18, wherein the first party sets δA=δ′A when └ρ/┘ is even, and δA=1−δ′A otherwise, second party sets a value of a second comparison bit δB=δ′B when └z†/┘ is odd, and δB=1−δ′B otherwise and wherein δA⊕δB=[x≤y].
</claims>
</document>
