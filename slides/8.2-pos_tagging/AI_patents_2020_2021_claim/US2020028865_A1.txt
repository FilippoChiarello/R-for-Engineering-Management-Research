<document>

<filing_date>
2019-05-23
</filing_date>

<publication_date>
2020-01-23
</publication_date>

<priority_date>
2017-06-27
</priority_date>

<ipc_classes>
G06N20/00,G06N5/00,H04L29/06
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
CHEN LI
</inventors>

<docdb_family_id>
64567994
</docdb_family_id>

<title>
MALWARE DETECTION SYSTEM ATTACK PREVENTION
</title>

<abstract>
Systems and methods may be used to prevent attacks on a malware detection system. A method may include modeling a time series of directed graphs using incoming binary files during training of a machine learning system and detecting, during a time-window of the time series, an anomaly based on a directed graph of the time series of directed graphs. The method may include providing an alert that the anomaly has corrupted the machine learning system. The method may include preventing or remedying corruption of the machine learning system.
</abstract>

<claims>
1. (canceled)
2. A method for preventing attacks on a malware detection system, the method comprising: during training of a machine learning system to detect malware attacks based on incoming binary files, detecting an anomaly in the incoming binary files; and providing an alert that the anomaly has corrupted the training of the machine learning system.
3. The method of claim 2, wherein the anomaly is detected using a time series of a directed graph with vertices that are functions corresponding to the incoming binary files and edges that are call relationships between functions of respective vertices connected by the edges.
4. The method of claim 3, wherein the directed graph corresponds to a previous time-window that occurred before a current time-window, the anomaly detected during the current time-window.
5. The method of claim 3, wherein the directed graph is a call graph.
6. The method of claim 2, wherein detecting the anomaly includes: deriving scan statistics for a plurality of subgraphs of a directed graph, the plurality of subgraphs including respective vertices a number of connected edges away from a particular vertex in the directed graph; and detecting a change-point of the scan statistics within a current time-window, the change-point representing the anomaly and corresponding to a value of a scan statistic of the scan statistics that is above a threshold.
7. The method of claim 6, wherein the scan statistic includes a count of a maximum of the number of connected edges of a subgraph of the plurality of subgraphs over the current time-window, and wherein the number of connected edges away from a particular vertex of the subgraph includes a set of k-nearest neighbors vertices from the particular vertex.
8. The method of claim 6, wherein the scan statistic includes a count of a maximum of the number of connected edges of a subgraph of the plurality of subgraphs over a previous time-window.
9. The method of claim 6, wherein the scan statistic includes a weighted geometric average of locality statistics derived over the current time-window and a scan statistic derived over a previous time-window.
10. The method of claim 6, wherein deriving the scan statistics includes performing temporal normalization on the scan statistics to smooth the scan statistics over the time-window.
11. The method of claim 2, further comprising preventing at least one of the binary files from reaching the machine learning system.
12. The method of claim 2, further comprising blocking an IP address of a source of at least one of the binary files.
13. The method of claim 2, further comprising causing the machine learning system to perform a roll back to a previous state before the anomaly.
14. A malware detection system for preventing poison attacks, the malware detection system comprising: a processor of an anomaly detection system; and memory, the memory including instructions, which when executed by the processor, cause the processor to: during training of a machine learning system to detect malware attacks based on incoming binary files, detect an anomaly in the incoming binary files; and provide an alert that the anomaly has corrupted the training of the machine learning system.
15. The malware detection system of claim 14, wherein the anomaly is detected using a time series of a directed graph with vertices that are functions corresponding to the incoming binary files and edges that are call relationships between functions of respective vertices connected by the edges.
16. The malware detection system of claim 15, wherein the directed graph corresponds to a previous time-window that occurred before a current time-window, the anomaly detected during the current time-window.
17. The malware detection system of claim 14, wherein the directed graph is a call graph.
18. The malware detection system of claim 14, wherein to detect the anomaly, the anomaly detection system is to: derive scan statistics for a plurality of subgraphs of a directed graph, the plurality of subgraphs including respective vertices a number of connected edges away from a particular vertex in the directed graph; and detect a change-point of the scan statistics within a current time-window, the change-point representing the anomaly and corresponding to a value of a scan statistic of the scan statistics that is above a threshold.
19. The malware detection system of claim 18, wherein the scan statistic includes a count of a maximum of the number of connected edges of a subgraph of the plurality of subgraphs over the current time-window, and wherein the number of connected edges away from a particular vertex of the subgraph includes a set of k-nearest neighbors vertices from the particular vertex.
20. At least one non-transitory machine-readable medium including instructions for preventing attacks on a malware detection system, which when executed by a machine, cause the machine to: during training of a machine learning system to detect malware attacks based on incoming binary files, detect an anomaly in the incoming binary files; and provide an alert that the anomaly has corrupted the training of the machine learning system.
21. The at least one machine-readable medium of claim 20, wherein the anomaly is detected using a time series of a directed graph with vertices that are functions corresponding to the incoming binary files and edges that are call relationships between functions of respective vertices connected by the edges.
22. The at least one machine-readable medium of claim 21, wherein the directed graph corresponds to a previous time-window that occurred before a current time-window, the anomaly detected during the current time-window.
23. The at least one machine-readable medium of claim 20, wherein the directed graph is a call graph.
24. The at least one machine-readable medium of claim 20, wherein detecting the anomaly includes: deriving scan statistics for a plurality of subgraphs of a directed graph, the plurality of subgraphs including respective vertices a number of connected edges away from a particular vertex in the directed graph; and detecting a change-point of the scan statistics within a current time-window, the change-point representing the anomaly and corresponding to a value of a scan statistic of the scan statistics that is above a threshold.
25. The at least one machine-readable medium of claim 24, wherein the scan statistic includes a count of a maximum of the number of connected edges of a subgraph of the plurality of subgraphs over a previous time-window.
</claims>
</document>
