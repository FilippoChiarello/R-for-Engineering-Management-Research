<document>

<filing_date>
2020-04-20
</filing_date>

<publication_date>
2020-12-10
</publication_date>

<priority_date>
2019-06-05
</priority_date>

<ipc_classes>
G06N20/00,G06N5/04
</ipc_classes>

<assignee>
PHILIPS ELECTRONICS
</assignee>

<inventors>
STASSEN, MAURICE LEONARDUS ANNA
</inventors>

<docdb_family_id>
73650668
</docdb_family_id>

<title>
TUNING IMPLEMENTATION OF MACHINE LEARNING MODEL FOR RESOURCE-CONSTRAINED DEVICE
</title>

<abstract>
The present disclosure is directed to methods and apparatus for tuning implementations of machine learning models for resource-constrained devices. In various embodiments, computer-readable instructions that utilize a trained machine learning model during execution of the computer-readable instructions on a resource-constrained device may be evaluated. Based on the evaluating, it may be determined that an amount of a first computing resource required by the resource-constrained device to execute the computer-readable instructions fails to satisfy a constraint related to the first computing resource. Based on the constraint, one or more candidate alterations to the computer-readable instructions may be identified.
</abstract>

<claims>
1. A method implemented using one or more processors, comprising: evaluating computer-readable instructions that utilize a trained machine learning model during execution of the computer-readable instructions on a resource-constrained device; based on the evaluating, determining that an amount of a first computing resource of a plurality of computing resources required by the resource-constrained device to execute the computer-readable instructions fails to satisfy a constraint related to the first computing resource; and based on the determining, identifying one or more candidate alterations to the computer-readable instructions, wherein the one or more candidate alterations are associated with the constraint.
2. The method of claim 1, further comprising causing one or more computing devices to render output, wherein the output identifies the one or more candidate alterations to an individual in a position to alter the computer-readable instructions.
3. The method of claim 1, wherein the computer-readable instructions comprise executable object code.
4. The method of claim 3, further comprising: automatically updating source code underlying the object code in accordance with the one or more candidate alterations; and compiling the updated source code to generate updated object code.
5. The method of claim 1, wherein the first computing resource comprises read-only memory that stores information that remains constant during execution of the computer-readable instructions.
6. The method of claim 1, wherein the first computing resource comprises volatile memory that stores information that changes during execution of the computer-readable instructions.
7. The method of claim 1, wherein the first computing resource comprises computational power.
8. A system comprising one or more processors and memory storing instructions that, in response to execution of the instructions by the one or more processors, cause the one or more processors to: perform an evaluation of computer-readable instructions that utilize a trained machine learning model during execution of the computer-readable instructions on a resource-constrained device; based on the evaluation, identify respective amounts of a plurality of computing resources required by the resource constrained device to execute the computer-readable instructions; determine that the amount of a first computing resource of the plurality of resources required by the resource-constrained device to execute the computer-readable instructions fails to satisfy a constraint related to the first computing resource; and based on the constraint, identify one or more candidate alterations to the computer-readable instructions.
9. The system of claim 8, further comprising instructions to cause one or more computing devices to render output, wherein the output identifies the one or more candidate alterations to an individual in a position to alter the computer-readable instructions.
10. The system of claim 8, wherein the computer-readable instructions comprise executable object code.
11. The system of claim 10, further comprising instructions to: automatically update source code underlying the object code in accordance with the one or more candidate alterations; and compile the updated source code to generate updated object code.
12. The system of claim 8, wherein the first computing resource comprises read-only memory that stores information that remains constant during execution of the computer-readable instructions.
13. The system of claim 8, wherein the first computing resource comprises volatile memory that stores information that changes during execution of the computer-readable instructions.
14. The system of claim 8, wherein the first computing resource comprises computational power.
15. At least one non-transitory computer-readable medium comprising instructions that, in response to execution of the instructions by one or more processors, cause the one or more processors to perform the following operations: evaluating computer-readable instructions that utilize a trained machine learning model during execution of the computer-readable instructions on a resource-constrained device; based on the evaluating, determining that an amount of a first computing resource required by the resource-constrained device to execute the computer-readable instructions fails to satisfy a constraint related to the first computing resource; and based on the constraint, identifying one or more candidate alterations to the computer-readable instructions.
</claims>
</document>
