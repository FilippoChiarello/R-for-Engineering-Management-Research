<document>

<filing_date>
2019-04-30
</filing_date>

<publication_date>
2020-11-05
</publication_date>

<priority_date>
2019-04-30
</priority_date>

<ipc_classes>
G06F11/36,G06F3/0484,G06F8/30,G06F8/71
</ipc_classes>

<assignee>
EMC IP HOLDING COMPANY
</assignee>

<inventors>
ARAKELIAN, MARK ADAM
Pradeep Kumar, Belagapu
Balaji, Gayatri Singh
Reddy, Venkat Mattapalli
Bhandiwad, Santosh Govindrao
Robitaille, Debra J.
Chamala, Sindhura
</inventors>

<docdb_family_id>
73016061
</docdb_family_id>

<title>
SYSTEM AND METHOD FOR MANAGING A CODE REPOSITORY
</title>

<abstract>
A data processing device includes persistent storage and a software development manager. The persistent storage stores a code repository. The software development manager generates commit impact information based on: pre-commit code for a code base stored in the code repository, and dependency data based on committed code of the code base; displays a pre-commit analysis graphic user interface (GUI) reflecting the commit impact information and testing information for the pre-commit code; obtains, using the displayed pre-commit analysis GUI, reviewer feedback regarding approval of the pre-commit code; makes a determination, based on the reviewer feedback, that the pre-commit code has been approved; in response to the determination: performs limited testing of the code base based upon the dependency data to obtain testing results; and commits the pre-commit code to the committed code when the testing results match a predetermined behavior.
</abstract>

<claims>
1. A data processing device, comprising: persistent storage for storing a code repository; and a software development manager programmed to: generate commit impact information based on: pre-commit code for a code base stored in the code repository, and dependency data based on committed code of the code base; display a pre-commit analysis graphic user interface (GUI) reflecting the commit impact information and testing information for the pre-commit code; obtain, using the displayed pre-commit analysis GUI, reviewer feedback regarding approval of the pre-commit code; make a determination, based on the reviewer feedback, that the pre-commit code has been approved; in response to the determination: perform limited testing of the code base based upon the dependency data to obtain testing results; and commit the pre-commit code to the committed code when the testing results match a predetermined behavior.
2. The data processing device of claim 1, wherein the-pre-commit code is not committed to the committed code when the testing results matches a second predetermined behavior.
3. The data processing device of claim 1, wherein the pre-commit analysis GUI comprises: a first graphical element representing the commit impact information; and a second graphical element representing the test information.
4. The data processing device of claim 1, wherein the commit impact information specifies: a modification of the committed code that would be caused by updating the committed code using the pre-commit code; a modification of a function that would be caused by updating the committed code using the pre-commit code; a modification of a module that would be caused by updating the committed code using the pre-commit code; a modification of a component that would be caused by updating the committed code using the pre-commit code; and a modification of an interdependent component that would be caused by updating the committed code using the pre-commit code.
5. The data processing device of claim 1, wherein the commit impact information specifies: a modification of a library that would be caused by updating the committed code using the pre-commit code; and a modification of a binary that would be caused by updating the committed code using the pre-commit code.
6. The data processing device of claim 1, wherein the test information specifies: a test that will be performed as part of the limited testing of the code base; and an estimate of a duration of the limited testing of the code base.
7. The data processing device of claim 1, wherein performing the limited testing of the code base does not include generation of executables for a portion of the code base that would not be impacted by updating the committed code using the pre-commit code.
8. The data processing device of claim 7, wherein performing the limited testing of the code base is automated.
9. The data processing device of claim 7, wherein performing the limited testing of the code base comprises: generating a binary based on: a portion of the pre-commit code, and a portion of the committed code; deploying the binary to an image associated with the code base to obtain an updated image; and. simulating a workload on the image based on a test case to obtain a portion of the testing results.
10. The data processing device of claim 1, wherein obtaining, using the displayed pre-commit analysis GUI, the reviewer feedback regarding approval of the pre-commit code comprises: obtaining first user input associated with the commit impact information; updating the commit impact information using the first user input; and obtaining second user input that indicates the reviewer feedback.
11. A method for managing a code repository, comprising: generating commit impact information based on: pre-commit code for a code base stored in the code repository, and dependency data based on committed code of the code base; displaying a pre-commit analysis graphic user interface (GUI) reflecting the commit impact information and testing information for the pre-commit code; obtaining, using the displayed pre-commit analysis GUI, reviewer feedback regarding approval of the pre-commit code; making a determination, based on the reviewer feedback, that the pre-commit code has been approved; in response to the determination: performing limited testing of the code base based upon the dependency data to obtain testing results; and committing the pre-commit code to the committed code when the testing results match a predetermined behavior.
12. The method of claim 11, wherein the-pre-commit code is not committed to the committed code when the testing results matches a second predetermined behavior.
13. The method of claim 11, wherein the pre-commit analysis GUI comprises: a first graphical element representing the commit impact information; and a second graphical element representing the test information.
14. The method of claim 11, wherein the commit impact information specifies: a modification of the committed code that would be caused by updating the committed code using the pre-commit code; a modification of a function that would be caused by updating the committed code using the pre-commit code; a modification of a module that would be caused by updating the committed code using the pre-commit code; a modification of a component that would be caused by updating the committed code using the pre-commit code; and a modification of an interdependent component that would be caused by updating the committed code using the pre-commit code.
15. The method of claim 11, wherein the commit impact information specifies: a modification of a library that would be caused by updating the committed code using the pre-commit code; and a modification of a binary that would be caused by updating the committed code using the pre-commit code.
16. A non-transitory computer readable medium comprising computer readable program code, which when executed by a computer processor enables the computer processor to perform a method for managing a code repository, the method comprising: generating commit impact information based on: pre-commit code for a code base stored in the code repository, and dependency data based on committed code of the code base; displaying a pre-commit analysis graphic user interface (GUI) reflecting the commit impact information and testing information for the pre-commit code; obtaining, using the displayed pre-commit analysis GUI, reviewer feedback regarding approval of the pre-commit code; making a determination, based on the reviewer feedback, that the pre-commit code has been approved; in response to the determination: performing limited testing of the code base based upon the dependency data to obtain testing results; and committing the pre-commit code to the committed code when the testing results match a predetermined behavior.
17. The non-transitory computer readable medium of claim 16, wherein the-pre-commit code is not committed to the committed code when the testing results matches a second predetermined behavior.
18. The non-transitory computer readable medium of claim 16, wherein the pre-commit analysis GUI comprises: a first graphical element representing the commit impact information; and a second graphical element representing the test information.
19. The non-transitory computer readable medium of claim 16, wherein the commit impact information specifies: a modification of the committed code that would be caused by updating the committed code using the pre-commit code; a modification of a function that would be caused by updating the committed code using the pre-commit code; a modification of a module that would be caused by updating the committed code using the pre-commit code; a modification of a component that would be caused by updating the committed code using the pre-commit code; and a modification of an interdependent component that would be caused by updating the committed code using the pre-commit code.
20. The non-transitory computer readable medium of claim 16, wherein the commit impact information specifies: a modification of a library that would be caused by updating the committed code using the pre-commit code; and a modification of a binary that would be caused by updating the committed code using the pre-commit code.
</claims>
</document>
