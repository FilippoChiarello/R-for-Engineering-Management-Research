<document>

<filing_date>
2019-08-06
</filing_date>

<publication_date>
2020-11-12
</publication_date>

<priority_date>
2019-05-06
</priority_date>

<ipc_classes>
G06F17/16,G06F8/71,G06N20/00
</ipc_classes>

<assignee>
RED HAT
</assignee>

<inventors>
GUPTA, AVISHKAR
Masud, Sarah
Shah, Aagam
</inventors>

<docdb_family_id>
73046364
</docdb_family_id>

<title>
AUTOMATED SOFTWARE SELECTION USING MATRIX FACTORIZATION
</title>

<abstract>
A processing device can establish a machine learning model to produce software dependency recommendations. The model can be periodically retrained to update its knowledge of available dependencies. The software dependencies can be incorporated into software by developers who receive the selection or automatically by an intelligent software development platform. A processing device can train the model by assembling sparse user data based on feedback corresponding to software dependencies to produce a vector of preferences for each user. The processing device can also generate a latent vector of attributes for each software dependency. The processing device can then apply matrix factorization to the vectors to produce a behavior matrix that is used to train the machine learning model.
</abstract>

<claims>
1. A system comprising: a processing device; and a memory device including instructions that are executable by the processing device for causing the processing device to perform operations comprising: assembling sparse user data based on feedback corresponding to a plurality of software dependencies to produce a vector of preferences for each user; generating a latent vector of attributes for each software dependency of the plurality of software dependencies; applying matrix factorization to the latent vector of attributes and the vector of preferences to produce a behavior matrix; receiving user input of an application stack; and producing a software dependency recommendation based on the application stack, the software dependency recommendation produced using a machine learning model of the behavior matrix.
2. The system of claim 1 wherein the matrix factorization comprises hierarchical Poisson matrix factorization.
3. The system of claim 1 wherein the operations further comprise accessing manifests corresponding to the software dependencies to produce the vector of preferences.
4. The system of claim 1 wherein the operations further comprise training the machine learning model.
5. The system of claim 4 wherein the operations further comprise retraining the machine learning model to produce the software dependency recommendations based on updated software dependencies.
6. The system of claim 1 wherein the operations further comprising: determining if a user is a new user; and accessing view data to assemble the sparse user data when the user is a new user.
7. The system of claim 6 wherein the operations further comprise using global popularity data to assemble the sparse user data when the user is a new user.
8. A method comprising: assembling, by a processor, sparse user data based on feedback corresponding to a plurality of software dependencies to produce a vector of preferences for each user; generating, by the processor, a latent vector of attributes for each software dependency of the plurality of software dependencies; applying, by the processor, matrix factorization to the latent vector of attributes and the vector of preferences to produce a behavior matrix; receiving, by the processor, user input of an application stack; and producing, by the processor, a software dependency recommendation based on the application stack, the software dependency recommendation produced using a machine learning model of the behavior matrix.
9. The method of claim 8 wherein the matrix factorization comprises hierarchical Poisson matrix factorization.
10. The method of claim 8 further comprising accessing manifests corresponding to the software dependencies to produce the vector of preferences.
11. The method of claim 8 further comprising training the machine learning model.
12. The method of claim 11 further comprising retraining the machine learning model to produce the software dependency recommendations based on updated software dependencies.
13. The method of claim 8 further comprising: determining when a user is a new user; accessing view data to assemble the sparse user data when the user is a new user; and using global popularity data to assemble the sparse user data when the user is a new user and when view data is not available.
14. A non-transitory computer-readable medium comprising program code that is executable by a processing device for causing the processing device to: assemble sparse user data based on feedback corresponding to a plurality of software dependencies to produce a vector of preferences for each user; generate a latent vector of attributes for each software dependency of the plurality of software dependencies; apply matrix factorization to the latent vector of attributes and the vector of preferences to produce a behavior matrix; receive user input of an application stack; and produce a software dependency recommendation based on the application stack, the software dependency recommendation produced using a machine learning model of the behavior matrix.
15. The non-transitory computer-readable medium of claim 14 wherein the matrix factorization comprises hierarchical Poisson matrix factorization.
16. The non-transitory computer-readable medium of claim 14 wherein the program code is executable by the processing device to cause the processing device to access manifests corresponding to the software dependencies to produce the vector of preferences.
17. The non-transitory computer-readable medium of claim 14 wherein the program code is executable by the processing device to cause the processing device to train the machine learning model.
18. The non-transitory computer-readable medium of claim 17 wherein the program code is executable by the processing device to cause the processing device to retrain the machine learning model to produce the software dependency recommendations based on updated software dependencies.
19. The non-transitory computer-readable medium of claim 14 wherein the program code is executable by the processing device to cause the processing device to: determine when a user is a new user; and access view data to assemble the sparse user data when the user is a new user.
20. The non-transitory computer-readable medium of claim 19 wherein the program code is executable by the processing device to cause the processing device to use global popularity data to assemble the sparse user data when the user is a new user.
</claims>
</document>
