<document>

<filing_date>
2019-03-08
</filing_date>

<publication_date>
2020-09-10
</publication_date>

<priority_date>
2019-03-08
</priority_date>

<ipc_classes>
G06K9/00,G06K9/32,G06K9/34,G06K9/62,G06N20/10
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
SACHETI, ARUN
WANG, YAN
WU, YE
</inventors>

<docdb_family_id>
72336392
</docdb_family_id>

<title>
LAYOUT-AWARE, SCALABLE RECOGNITION SYSTEM
</title>

<abstract>
Described herein is a mechanism for visual recognition of items or visual search using Optical Character Recognition (OCR) of text in images. Recognized OCR blocks in an image comprise position information and recognized text. The embodiments utilize a location-aware feature vector created using the position and recognized information in each recognized block. The location-aware features of the feature vector utilize position information associated with the block to calculate a weight for the block. The recognized text is used to construct a tri-character gram frequency, inverse document frequency (TGF-IDP) metric using tri-character grams extracted from the recognized text. Features in location-aware feature vector for the block are computed by multiplying the weight and the corresponding TGF-IDF metric. The location-aware feature vector for the image is the sum of the location-aware feature vectors for the individual blocks.
</abstract>

<claims>
1. A method for visual recognition, comprising: receiving an output of an optical character recognition process comprising one or more recognized blocks, each recognized block comprising a set of positional properties and recognized text; creating a block weight from the set of positional properties for each of the recognized blocks; creating a set of block tri-character grams for each recognized block based on the recognized text for that block; creating a block tri-character gram feature vector based the set of block tri-character grams; creating a block feature vector each recognized block from the weight and the block tri-character gram feature vector for the recognized block; creating a feature vector based on an aggregation of the block feature vectors; retrieving a set of results from an index based on the feature vector.
2. The method of claim 1 wherein the weight comprises an aggregation of subweights derived from the set of positional properties for the recognized block, the subweights comprising one or more of: a subweight based on an estimated font size; a subweight based on an estimated font weight; and a subweight based on a location of the recognized block.
3. The method of claim 1 wherein the block feature vector is a vector of TGF-IDF features based on tri-character grams.
4. The method of claim 3 wherein each TGF-IDF feature for a tri-character gram is a product of a tri-character gram frequency for the tri-character gram multiplied by an inverse document frequency for the tri-character grain.
5. The method of claim 1 wherein the block feature vector for a recognized block comprises the weight for the recognized block multiplied by each entry in the tri-character gram feature vector.
6. The method of claim 1 wherein entries in the index comprise document feature vectors based on tri-character grams of a corresponding document and wherein the document feature vectors are normalized by an ∞-norm.
7. The method of claim 1 wherein retrieving a set of results from an index based on the feature vector comprises: calculating a document retrieval score for each of a plurality of entries in the index based on the feature vector and the plurality of entries in the index; ranking the plurality of entries by their respective document retrieval scores; adding to a candidate set of results those entries with a document retrieval score above a threshold; and selecting the set of results as a subset of the candidate set of results based on a selection criteria.
8. The method of claim 1 wherein the index is an inverted index. The method of claim 1 further comprising: submitting the feature vector to a trained machine classifier; and wherein retrieving the set of results from an index based on the feature vector occurs responsive to the trained machine classifier classifying the feature vector into a designated category.
10. The method of claim 9 wherein the trained machine classifier is trained based on documents represented by entries in the index.
11. A system comprising a processor and computer executable instructions, that when executed by the processor, cause the system to perform operations comprising: receive an output of an optical character recognition process comprising one or more recognized blocks, each recognized block comprising a set of positional properties and recognized text; create a block weight from the set of positional properties for each of the recognized blocks; create a set of block tri-character grams for each recognized block based on the recognized text for that block; create a block tri-character grain feature vector based the set of block tri-character grams; create a block feature vector each recognized block from the weight and the block tri-character gram feature vector for the recognized block; create a feature vector based on an aggregation of the block feature vectors; retrieve a set of results from an index based on the feature vector.
12. The system of claim 11 wherein the weight comprises an aggregation of subweights derived from the set of positional properties for the recognized block, the subweights comprising one or more of: a subweight based on an estimated font size; a subweight based on an estimated font weight; and a subweight based on a location of the recognized block.
13. The system of claim 11 wherein the block feature vector is a vector of TGF-IDF features based on tri-character grams.
14. The system of claim 13 wherein each TGF-IDF feature for a tri-character grain is a product of a tri-character gram frequency for the tri-character gram multiplied by an inverse document frequency for the tri-character gram.
15. The system of claim 11 wherein the block feature vector for a recognized block comprises the weight for the recognized block multiplied by each entry in the tri-character gram feature vector.
16. The system of claim 11 wherein entries in the index comprise document feature vectors based on tri-character grams of a corresponding document and wherein the document feature vectors are normalized by the ∞-norm.
17. The system of claim 11 wherein retrieve a set of results from an index based on the feature vector comprises: calculate a document retrieval score for each of a plurality of entries in the index based on the feature vector and the plurality of entries in the index; rank the plurality of entries by their respective document retrieval scores; add to a candidate set of results those entries with a document retrieval score above a threshold; and select the set of results as a subset of the candidate set of results based on a selection criteria.
18. The system of claim 11 wherein the index is an inverted index.
19. The system of claim 11 further comprising: submit the feature vector to a trained machine classifier; and wherein retrieving the set of results from an index based on the feature vector occurs responsive to the trained machine classifier classifying the feature vector into a designated category.
20. A computer storage medium comprising executable instructions that, when executed by a processor of a machine, cause the machine to perform operations comprising: receive an output of an optical character recognition process comprising one or more recognized blocks, each recognized block comprising a set of positional properties and recognized text; create a block weight from the set of positional properties for each of the recognized blocks; create a set of block tri-character grams for each recognized block based on the recognized text for that block; create a block tri-character gram feature vector based the set of block tri-character grams; create a block feature vector each recognized block from the weight and the block hi-character gram feature vector for the recognized block; create a feature vector based on an aggregation of the block feature vectors; retrieve a set of results from an index based on the feature vector.
</claims>
</document>
