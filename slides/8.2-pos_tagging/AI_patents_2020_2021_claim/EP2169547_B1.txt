<document>

<filing_date>
2009-09-30
</filing_date>

<publication_date>
2020-05-27
</publication_date>

<priority_date>
2008-09-30
</priority_date>

<ipc_classes>
G05B19/05,G06F8/52,G06F9/445
</ipc_classes>

<assignee>
ICS TRIPLEX ISAGRAF
</assignee>

<inventors>
CHOUINARD, JULIEN
BRUNET, GILLES
LAVALLEE, DENIS
TRANG, CHAN-DARA
LALIBERTE, JEAN-FRANCOIS
DARVEAU, FRÉDÉRIC
LAROUCHE, OLIVIER
</inventors>

<docdb_family_id>
41206318
</docdb_family_id>

<title>
Compilation model for programmable logic controllers (PLC).
</title>

<abstract>
The claimed subject matter provides a system and/or method that facilitates creating executable code for an industrial environment. A language editor can enable a programming of a portion of data within a programming language. A compiler can compile the portion of data within the programming language. An assembler component can utilize an intermediate language to convert the portion of data into a portion of assembly object code, wherein the assembly object code is target independent. A linker can create a binary file from the portion of assembly object code, wherein the binary file is target independent. A loader can specifically tailor the binary file to a target resource by leveraging at least one PLC definition, wherein the loader creates a target executable code (TEC) program at runtime or at development time.
</abstract>

<claims>
1. A system that facilitates creating executable code for an industrial environment, comprising: language editors (202-212) that enable a programming of a portion of data within a programming language, each language editor being specific to a programming language; compilers (214-224) that compile the portion of data within the programming language creating a portion of compiled code in a target-independent intermediate language, wherein the intermediate language is instruction list, IL; an IL assembler component (228) that assembles the compiled code from the compilers into an instruction list object code; a linker (236) that creates an instruction list binary file from the instruction list object code; wherein the language editors are two or more language editors, the compilers are two or more compilers, each compiler being specific to a language editor; the instruction list object code is target independent; the instruction list binary file is target independent; and the system further comprises:
a loader (240) that creates a target executable code, TEC, program, by utilizing the instruction list binary file and at least one PLC definition which describes a PLC hardware constraint and which includes an instruction list transformation code, wherein the TEC program is target dependent and directly executable by a target processor.
2. The system of claim 1, wherein the compiler includes a one-to-one ratio with the programming language.
3. The system of claim 1, wherein the PLC definition includes a one-to-one ratio with a processor type.
4. The system of claim 1, further comprising a data store that stores at least one of the intermediate language, the portion of data, the instruction list object code, the instruction list binary file, the TEC program, or the PLC definition.
5. The system of claim 1, further comprising a library that includes two or more portions of instruction list object code leveraged by the linker to create the instruction list binary file.
6. A method to generate control system executable code, comprising: receiving (702) portions of compiled data in a target-independent intermediate language, wherein the intermediate language is instruction list, IL; assembling (704) the portions of compiled data into an instruction list object code; creating (706) an instruction list binary file including at least one link from the instruction list object code; wherein the portions of compiled data are received from language-specific compilers, the instruction list object code is target independent, the instruction list binary file is target independent, and the method further comprises:
creating (708) a target executable code, TEC, program, by utilizing the instruction list binary file and at least one PLC definition which describes a PLC hardware constraint and which includes an instruction list transformation code, wherein the TEC program is target dependent and directly executable by a target processor.
7. The method of claim 6, further comprising: leveraging a library, the library includes at least two or more portions of instruction list object code; and linking at least one instruction list object code from the library to create the instruction list binary file.
8. The method of claim 6, further comprising: storing the instruction list object code into a data store; storing the instruction list binary file into a data store; storing the PLC definition into a data store; and storing the TEC program into a data store; and further comprising: accessing the instruction list object code from the data store to create the instruction list binary file; accessing the instruction list binary file from the data store to create the TEC program; and accessing the PLC definition from the data store to create the TEC program.
</claims>
</document>
