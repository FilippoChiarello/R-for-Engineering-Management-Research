<document>

<filing_date>
2020-06-10
</filing_date>

<publication_date>
2020-12-17
</publication_date>

<priority_date>
2019-06-10
</priority_date>

<ipc_classes>
G06F11/36,G06F8/71,G06F9/445,G06F9/455,G06Q10/10
</ipc_classes>

<assignee>
ARGOS LABS INC.
</assignee>

<inventors>
CHAE, Moon Chang
</inventors>

<docdb_family_id>
73651090
</docdb_family_id>

<title>
SYSTEMS AND METHODS FOR ROBOTIC PROCESS AUTOMATION
</title>

<abstract>
Example robotic process automation systems and methods are described. In one implementation, a processing system receives one or more configuration options for a Bot, where the configuration options are associated with a design specification for the Bot. The processing system generates the Bot using the configuration options and instantiates the Bot on the processing system. A workflow associated with the design specification is executed by the Bot.
</abstract>

<claims>
1. A method comprising:
receiving, by a processing system, one or more configuration options for a Bot, wherein the configuration options are associated with a design specification for the Bot;
generating, by the processing system, the Bot using the configuration options;
instantiating, by the processing system, the Bot on the processing system; and executing, by the Bot, a workflow associated with the design specification.
2. The method of claim 1, wherein the configuration options include a plugin, wherein the plugin is associated with the design specification.
3. The method of claim 2, wherein the plugin is generated using a Python programming language.
4. The method of claim 2, wherein the plugin is selected from a plurality of plugins, and wherein the plugins are stored in a repository.
5. The method of claim 4, wherein the repository is one of a public repository or a private repository.
6. The method of claim 2, further comprising verifying, by an authentication service, a validity of the plugin.
7. The method of claim 2, wherein the plugin is selected from a plurality of plugins, and wherein the plugins are stored in a plugin marketplace.
8. The method of claim 1, wherein the processing system is configured to run an operating system that can be any one of Windows, Linus macOS, Android, and iOS.
9. A method comprising:
receiving, by a robotic process automation system, a plugin source file created by converting a Python program into the plugin source file using a Python-to-operation tool and a software development kit;
testing, by the robotic process automation system, the plugin source file using a testing utility;
identifying, by the robotic process automation system, an icon associated with the plugin source file;
packaging, by the robotic process automation system, the source file and the icon into a plugin package; and
storing the plugin package in a private plugin repository as a new plugin.
10. The method of claim 9, wherein testing the plugin source file includes checking the plugin source file for compliance with plugin specifications.
11. The method of claim 9, wherein testing the plugin source file includes checking the plugin source file for compliance with plugin specifications defined by a scenario studio responsible for managing a plurality of automation scenarios.
12. The method of claim 9, wherein the plugin source file is created by a plugin builder.
13. The method of claim 9, further comprising testing the new plugin in a scenario studio.
14. The method of claim 9, further comprising publishing the new plugin in a public plugin repository.
15. The method of claim 9, further comprising publishing the new plugin in a plugin marketplace.
16. An apparatus comprising:
a Python-to-operation tool configured to generate a design specification for a Bot;
a communication module configured to receive one or more configuration options for the Bot, wherein the configuration options are associated with the design specification for the Bot; and
a processor configured to:
instantiate the Bot on a computing system; and
execute, by the Bot, a workflow associated with the design specification.
17. The apparatus of claim 16, wherein the configuration options include a plugin, wherein the plugin is associated with the design specification.
18. The apparatus of claim 17, wherein the plugin is generated using a Python programming language.
19. The apparatus of claim 17, further comprising verifying, by the processor, a validity of the plugin.
20. The apparatus of claim 17, wherein the plugin is selected from a plurality of plugins, and wherein the plugins are stored in a repository.
21. A method compri sing :
receiving, by a processing system, a first automation scenario, wherein the first automation scenario is for execution by the processing system;
identifying, by the processing system, a list of plugins in the first automation scenario; identifying, by the processing system, a version number associated with each of the plugins in the first automation scenario;
verifying, by the processing system, the list of plugins and their associated version numbers; and
responsive to verifying the list of plugins and their associated version numbers, building, by the processing system, a first virtual environment for the plugins in the first automation scenario.
22. The method of claim 21, further comprising:
downloading the plugins in the list of plugins from a plugin repository; and
adding the downloaded plugins to the first virtual environment.
23. The method of claim 21, further comprising saving the first virtual environment locally on the processing system.
24. The method of claim 21, further comprising executing the first automation scenario in the first virtual environment.
25. The method of claim 21, further comprising receiving, by the processing system, a second automation scenario.
26. The method of claim 25, further comprising:
identifying, by the processing system, a list of plugins in the second automation scenario; and
identifying, by the processing system, a version number associated with each of the plugins in the second automation scenario.
27. The method of claim 26, further comprising comparing, by the processing system, the list of plugins in the second automation scenario with the plugins in the first virtual environment.
28. The method of claim 27, further comprising determining, by the processing system, whether any plugins in second automation scenario have different version numbers than the corresponding plugin in the first virtual environment.
29. The method of claim 28, further comprising adding the second automation scenario to the first virtual environment responsive to determining that no plugins in the second automation scenario have different version numbers than the corresponding plugin in the first virtual environment.
30. The method of claim 28, further comprising creating a second virtual environment responsive to determining that at least one plugin in the second automation scenario has a different version number than the corresponding plugin in the first virtual environment.
31. The method of claim 21, wherein at least one of the plugins in the list of plugins is generated by converting a Python program into the plugin using a Python-to-operation tool.
32. An apparatus comprising:
a communication module configured to receive a first automation scenario, wherein the first automation scenario is for execution by the apparatus;
a processor configured to:
identify a list of plugins in the first automation scenario;
identify a version number associated with each of the plugins in the first automation scenario; verify the list of plugins and their associated version numbers; and
responsive to verifying the list of plugins and their associated version numbers, build a first virtual environment for the plugins in the first automation scenario.
33. The apparatus of claim 32, wherein the processor is further configured to:
download the plugins in the list of plugins from a plugin repository; and
add the downloaded plugins to the first virtual environment.
34. The apparatus of claim 32, wherein the processor is further configured to execute the first automation scenario in the first virtual environment.
35. The apparatus of claim 32, wherein the processor is further configured to receive a second automation scenario.
36. The apparatus of claim 35, wherein the processor is further configured to:
identify a list of plugins in the second automation scenario; and
identify a version number associated with each of the plugins in the second automation scenario.
37. The apparatus of claim 36, wherein the processor is further configured to compare the list of plugins in the second automation scenario with the plugins in the first virtual environment.
38. The apparatus of claim 37, wherein the processor is further configured to determine whether any plugins in second automation scenario have different version numbers than the corresponding plugin in the first virtual environment.
39. The apparatus of claim 38, wherein the processor is further configured to add the second automation scenario to the first virtual environment responsive to determining that no plugins in the second automation scenario have different version numbers than the corresponding plugin in the first virtual environment.
40. The apparatus of claim 38, wherein the processor is further configured to create a second virtual environment responsive to determining that at least one plugin in the second automation scenario has a different version number than the corresponding plugin in the first virtual environment.
</claims>
</document>
