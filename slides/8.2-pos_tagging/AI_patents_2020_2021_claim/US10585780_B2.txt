<document>

<filing_date>
2017-03-24
</filing_date>

<publication_date>
2020-03-10
</publication_date>

<priority_date>
2017-03-24
</priority_date>

<ipc_classes>
G06F11/36,G06F8/33,G06F8/71,G06F8/75,G06F9/44
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
DONG, YUANYUAN
MUTHUKUMAR, POORNIMA
WOULFE, MUIRIS
</inventors>

<docdb_family_id>
63582624
</docdb_family_id>

<title>
Enhancing software development using bug data
</title>

<abstract>
For each detected bug, historical code with similar characteristics and bug corrections from a historical bug dataset can be displayed in a source code editor. Relevant training and/or testing data can be found by comparing an internal representation of the code under development with an internal representation of the original buggy code in the historical bug dataset. Training and/or testing data that is relevant to the current code can be distinguished from irrelevant training and/or testing data by determining that the code syntax tokens from the current and historical data overlap to at least a specified percentage. Code can be devolved into a set of metrics. The degree of overlap between the metric sets can be determined. If a computed risk factor for the bug correction meets or exceeds a specified threshold, the bug correction can be automatically applied. Additional testing can be automatically performed on and/or added to the corrected code.
</abstract>

<claims>
1. A system, comprising: a memory; a processor connected to the memory, the processor configured to: receive current code, the current code comprising buggy code; find historical code comprising correct code relevant to the current code in a historical bug dataset comprising original buggy code and corresponding correct code, the historical code created by retaining training and testing datasets created for a machine learning system trained to distinguish between buggy and bug-free source code by learning the characteristics of buggy code; display pairs of original buggy code and corresponding correct code and a degree of risk value of replacing the original buggy code with the corresponding correct code for each pair in a software development environment; and when the risk value is less than a threshold amount, automatically correct the buggy code by replacing the buggy code with the corresponding correct code.
2. The system of claim 1, wherein the historical bug dataset comprises: an internal representation of the original buggy code.
3. The system of claim 1, the processor further configured to: calculate a degree of similarity between an internal representation of the relevant historical code and an internal representation of the current code by counting the number of overlapping tokens in the internal representation of the relevant historical code and the internal representation of the current code.
4. The system of claim 1, the processor further configured to: detect similarities between an internal representation of the relevant historical code and an internal representation of the current code by comparing metrics of the buggy code and the current code to determine overlap.
5. A method comprising: receiving by a processor: current code comprising buggy code; finding historical bug data comprising correct code relevant to the buggy code in a historical bug dataset comprising original buggy code and corresponding correct code, the historical code created by retaining training and testing datasets created for a machine learning system trained to distinguish between buggy and bug-free source code by learning the characteristics of buggy code; displaying pairs of original buggy code and corresponding correct code and a degree of risk value of replacing the original buggy code with the corresponding correct code for each pair in a software development environment; and when the risk value is less than a threshold amount, automatically correcting the buggy code by replacing the buggy code with the corresponding correct code.
6. The method of claim 5, further comprising: determining that code is buggy using a machine learning system.
7. The method of claim 5, wherein existing buggy code in a historical bug dataset is analyzed to detect similarities to the current code using an internal representation of the historical bug data relevant to the buggy code in the historical bug dataset and an internal representation of the current code.
8. The method of claim 5, wherein similarity is measured by counting overlapping elements between the current code and the buggy code in the historical bug dataset.
9. The method of claim 5, wherein similarity is measured by counting elements that are in the same position in the current code and the original buggy code.
10. The method of claim 5, wherein similarity is measured by comparing tokens.
11. The method of claim 5, wherein similarity is measured by comparing metrics.
12. The method of claim 5, wherein similarity is measured by comparing chunks of code.
13. The device of claim 12, wherein the processor is further configured to: automatically add additional testing in the editor.
14. The device of claim 12, wherein the processor is further configured to: automatically add additional unit testing in the editor.
15. The device of claim 14, wherein the processor is further configured to: automatically compile the corrected code in the editor.
16. A device comprising: a memory; a processor, the processor configured to: receive buggy code; find historical code comprising correct code relevant to the buggy code in a historical bug dataset comprising original buggy code and corresponding correct code, the historical code created by retaining training and testing datasets created for a machine learning system trained to distinguish between buggy and bug-free source code by learning the characteristics of buggy code; display pairs of original buggy code and corresponding correct code and a degree of risk value of replacing the original buggy code with the corresponding correct code for each pair in a software development environment; and when the risk value is less than a threshold amount, automatically correct the buggy code by replacing the buggy code with the corresponding correct code.
17. The device of claim 16, wherein the processor is further configured to: automatically correct code bugs based on finding historical bug information similar to buggy code.
</claims>
</document>
