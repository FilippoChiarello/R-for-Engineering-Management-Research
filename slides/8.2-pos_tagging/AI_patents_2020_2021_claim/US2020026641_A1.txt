<document>

<filing_date>
2019-09-30
</filing_date>

<publication_date>
2020-01-23
</publication_date>

<priority_date>
2016-08-05
</priority_date>

<ipc_classes>
G06F11/36,G06F16/901,G06F3/0482,G06F9/451
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
RAJAGOPALAN, SHRIRAM
SINHA, SAURABH
</inventors>

<docdb_family_id>
61070134
</docdb_family_id>

<title>
AUTOMATED TEST INPUT GENERATION FOR INTEGRATION TESTING OF MICROSERVICE-BASED WEB APPLICATIONS
</title>

<abstract>
Techniques for automated generation of inputs for testing microservice-based applications are provided. In one example, a computer-implemented method comprises: traversing, by a system operatively coupled to a processor, a user interface of a microservices-based application by performing actions on user interface elements of the user interface; and generating, by the system, an aggregated log of user interface event sequences and application program interface call sets based on the traversing. The computer-implemented method also comprises: determining, by the system, respective user interface event sequences that invoke application program interface call sets; and generating, by the system, respective test inputs based on the user interface event sequences that invoke the application program interface call sets.
</abstract>

<claims>
1. A system, comprising: a memory that stores computer executable components; and a processor that executes the computer executable components stored in the memory, wherein the computer executable components comprise: an event sequence component that determines respective user interface event sequences that invoke application program interface call sets of an application program interface call graph associated with a microservices-based application; a coverage component that: determines a coverage metric that indicates a coverage of the application program interface call graph by the user interface event sequences, and in response to a determination that the coverage metric indicates that a threshold amount of the application program interface call graph is not covered by the user interface event sequences, initiates a traversal of a user interface of the microservices-based application with one or more mutated user interface event sequences based on one or more mutations of the user interface event sequences.
2. The system of claim 1, wherein the coverage component further determines an event sequence for mutation, where the event sequence is determined by the coverage component to invoke an externally visible application program interface that is at least one of directly or indirectly connected with an uncovered edge of the annotated application program interface call graph.
3. The system of claim 2, wherein the user interface crawling component mutates the event sequence to invoke the externally visible application program interface with at least one of a different parameter.
4. The system of claim 2, wherein the user interface crawling component mutates the event sequence to invoke the externally visible application program interface with at least one a different parameter value.
5. The system of claim 2, wherein the user interface crawling component mutates the event sequence by deletion of an event of the event sequence that contributes at least one parameter to invocation of the externally visible application program interface.
6. The system of claim 2, wherein the user interface crawling component mutates the event sequence by addition of an additional event to the event sequence that contributes at least one additional parameter to invocation of the externally visible application program interface.
7. The system of claim 2, wherein the user interface crawling component mutates the event sequence by modification of at least one data value of at least one event of the event sequence.
8. A computer-implemented method, comprising: determining, by a system operatively coupled to a processor, respective user interface event sequences that invoke application program interface call sets of an application program interface call graph associated with a microservices-based application; determining, by the system, a coverage metric that indicates a coverage of the application program interface call graph by the user interface event sequences, and in response to a determination that the coverage metric indicates that a threshold amount of the application program interface call graph is not covered by the user interface event sequences, initiating, by the system, a traversal of a user interface of the microservices-based application with one or more mutated user interface event sequences based on one or more mutations of the user interface event sequences.
9. The computer-implemented method of claim 8, further comprising determining, by the system, an event sequence for mutation, where the event sequence is determined by the coverage component to invoke an externally visible application program interface that is at least one of directly or indirectly connected with an uncovered edge of the annotated application program interface call graph.
10. The computer-implemented method of claim 9, further comprising mutating, by the system, the event sequence to invoke the externally visible application program interface with at least one of a different parameter.
11. The computer-implemented method of claim 9, mutating, by the system, the event sequence to invoke the externally visible application program interface with at least one a different parameter value.
12. The computer-implemented method of claim 9, mutating, by the system, the event sequence by deletion of an event of the event sequence that contributes at least one parameter to invocation of the externally visible application program interface.
13. The computer-implemented method of claim 9, mutating, by the system, the event sequence by addition of an additional event to the event sequence that contributes at least one additional parameter to invocation of the externally visible application program interface.
14. The computer-implemented method of claim 9, mutating, by the system, the event sequence by modification of at least one data value of at least one event of the event sequence.
15. A computer program product for automatically generating test inputs for testing of a microservices-based application, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processing component to cause the processing component to: determine respective user interface event sequences that invoke application program interface call sets of an application program interface call graph associated with a microservices-based application; determine a coverage metric that indicates a coverage of the application program interface call graph by the user interface event sequences, and in response to a determination that the coverage metric indicates that a threshold amount of the application program interface call graph is not covered by the user interface event sequences, initiate a traversal of a user interface of the microservices-based application with one or more mutated user interface event sequences based on one or more mutations of the user interface event sequences.
16. The computer program product of claim 15, wherein the program instructions are further executable by the processing component to cause the processing component to: determine an event sequence for mutation, where the event sequence is determined by the coverage component to invoke an externally visible application program interface that is at least one of directly or indirectly connected with an uncovered edge of the annotated application program interface call graph.
17. The computer program product of claim 16, wherein the program instructions are further executable by the processing component to cause the processing component to: mutate the event sequence to invoke the externally visible application program interface with at least one of a different parameter.
18. The computer program product of claim 16, wherein the program instructions are further executable by the processing component to cause the processing component to: mutate the event sequence to invoke the externally visible application program interface with at least one a different parameter value.
19. The computer program product of claim 16, wherein the program instructions are further executable by the processing component to cause the processing component to: mutate the event sequence by deletion of an event of the event sequence that contributes at least one parameter to invocation of the externally visible application program interface
20. The computer program product of claim 16, mutate the event sequence by at least one of addition of an additional event to the event sequence that contributes at least one additional parameter to invocation of the externally visible application program interface, or modification of at least one data value of at least one event of the event sequence.
</claims>
</document>
