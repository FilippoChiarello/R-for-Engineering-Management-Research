<document>

<filing_date>
2020-04-02
</filing_date>

<publication_date>
2020-10-08
</publication_date>

<priority_date>
2019-04-02
</priority_date>

<ipc_classes>
G06F16/901,G06F17/15,G06F17/16,G06F9/54,G06N20/00,G06N3/04
</ipc_classes>

<assignee>
GRAPHCORE
</assignee>

<inventors>
Norman, David
</inventors>

<docdb_family_id>
66442831
</docdb_family_id>

<title>
Graph Conversion Method
</title>

<abstract>
A method for generating an executable program to run on a system of one or more processor chips each comprising a plurality of tiles. The method comprises: receiving a graph comprising a plurality of data nodes, compute vertices and directional edges, wherein the graph is received in a first graph format that does not specify which data nodes and vertices are allocated to which of the tiles; and generating an application programming interface, API, for converting the graph, to determine a tile-mapping allocating the data nodes and vertices amongst the tiles. The generating of the API comprises searching the graph to identify compute vertices which match any of a predetermined set of one or more compute vertex types. The API is then called to convert the graph to a second graph format that includes the tile-mapping, including the allocation by the assigned memory allocation functions.
</abstract>

<claims>
1. A computer-implemented method for generating an executable program to run on a system of one or more processor chips each comprising a plurality of tiles, each tile comprising its own processing unit and memory, the method comprising: receiving a graph comprising a plurality of data nodes, a plurality of compute vertices and a plurality of directional edges, each data node representing input data, each edge representing an input to a compute vertex from a data node or an output from a compute vertex input to another compute vertex, and each compute vertex representing one or more computations to perform on the input to the compute vertex in order to produce the output from that compute vertex, wherein the graph is received in a first graph format that does not specify which data nodes and vertices are allocated to which of the tiles; generating an application programming interface, API, for converting the graph from the first format including to determine a tile-mapping allocating the data nodes and vertices amongst the tiles; calling the API to convert the graph to a second graph format that includes the tile-mapping; and compiling the graph from the second format to generate said executable program, with the vertices and data nodes implemented on the tiles specified by the tile-mapping.
2. The method of claim 1, wherein a first one of the data nodes represents input data comprising a tensor having two dimensions.
3. The method of claim 2, wherein the tensor has at least three dimensions.
4. The method of claim 2, wherein the tensor has more than three dimensions.
5. The method of claim 1, wherein: the computation represented by a first one of the compute vertices comprises a convolution configured to convolve a kernel of weights with a multidimensional portion of target data, the weights and target data each being comprised by the input data of a first one of the data nodes, or derived from the first one the data nodes via an intermediate compute vertex between the input data and the compute vertex.
6. The method of claim 5, wherein the compute vertex type has another corresponding type of memory allocation to add the weights.
7. The method of claim 1, wherein: a first one of the compute vertices represents a computation comprising a matrix multiplication which multiplies a left-hand side with a right-hand side, each being a tensor and at least one of which is a matrix, the matrix multiplication left-hand side and right-hand side each being comprised by the input data of a first one of the data nodes, or derived therefrom via one or more intermediate compute vertices between the input data and the compute vertex.
8. The method of claim 1, wherein the plurality of compute vertices includes at least three different kinds of convolution: forward pass, backward pass, and weight update pass.
9. The method of claim 1, wherein said graph comprises a neural network, and the program comprises an algorithm configured to perform machine learning using the neural network.
10. A software tool comprising software embodied on computer-readable storage and configured so as when run on a computer to perform a method comprising: compiling a graph into an executable program having machine code instructions, wherein the graph has a plurality of data nodes, a plurality of compute vertices and a plurality of directional edges, and wherein the graph is compiled for a system having a processor chip with a plurality of tiles each having a processing unit and a memory, and wherein the graph is in a first graph format that does not allocate the data nodes and the vertices to the tiles; wherein the machine executable code for compiling the graph causes the computer to: generating an application programming interface (API) determining a tile-mapping that allocates the data nodes and vertices to the tiles; and calling the API to convert the graph to a second graph format that includes the tile-mapping.
11. A computer storing a software tool, the software tool comprising software configured so as when run on said computer to perform a method comprising: compiling a graph into an executable program having machine code instructions, wherein the graph has a plurality of data nodes, a plurality of compute vertices and a plurality of directional edges, and wherein the graph is compiled for a system having a processor chip with a plurality of tiles each having a processing unit and a memory, and wherein the graph is in a first graph format that does not allocate the data nodes and the vertices to the tiles; wherein the machine executable code for compiling the graph causes the computer to: generating an application programming interface (API) determining a tile-mapping that allocates the data nodes and vertices to the tiles; and calling the API to convert the graph to a second graph format that includes the tile-mapping.
</claims>
</document>
