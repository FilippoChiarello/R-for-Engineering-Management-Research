<document>

<filing_date>
2018-01-26
</filing_date>

<publication_date>
2020-06-09
</publication_date>

<priority_date>
2017-01-26
</priority_date>

<ipc_classes>
G06F21/31,G06F21/52,G06F21/55,G06F21/57
</ipc_classes>

<assignee>
ADITHAM, SANTOSH K.
RANGANATHAN, NAGARAJAN
UNIVERSITY OF SOUTH FLORIDA
</assignee>

<inventors>
ADITHAM, SANTOSH K.
RANGANATHAN, NAGARAJAN
</inventors>

<docdb_family_id>
62906990
</docdb_family_id>

<title>
Detecting threats in big data platforms based on call trace and memory access patterns
</title>

<abstract>
A runtime attack can be detected on a big data system while processes are executed on various computing devices. A behavior profile can be maintained for tasks or processes running on different computing devices. The existence of a call variance in one of the traces for one of the behavior profiles can be determined. A memory variance can also be detected in one of the behavior profiles. A runtime attack has occurred when both the memory variance and the call variance are determined to exist.
</abstract>

<claims>
Therefore, at least the following is claimed:
1. A method comprising: maintaining a plurality of behavior profiles individually corresponding to a respective one of a plurality of tasks, the plurality of tasks individually executed on a respective one of a plurality of computing devices, wherein the behavior profiles comprise a plurality of sequences representing a plurality of sizes of private and shared memory accesses during an execution of the respective one of the plurality of tasks; determining that a call variance exists in a trace of one of the plurality of behavior profiles; determining that a memory variance exists in a sequence of the plurality of sequences of the one of the plurality of behavior profiles; and in response to determining that the call variance and the memory variance exist, detecting a runtime attack.
2. The method of claim 1, wherein determining that the call variance exists comprises: determining a respective call frequency for each of a plurality of system calls from each of the plurality of tasks; and comparing the respective call frequency for each of the plurality of system calls to each other.
3. The method of claim 1, wherein determining that the memory variance exists comprises: normalizing the plurality of sizes of private and shared memory accesses from each of the plurality of tasks; and performing statistical analysis on the normalized memory data.
4. The method of claim 1, further comprising: obtaining a memory footprint of a process corresponding to one of the plurality of tasks by observing a number of pages referenced by the process; and determining a memory consumption of the memory footprint of the process.
5. The method of claim 1, further comprising determining a memory access pattern, the memory access pattern comprising information about a plurality of features of a memory access of a process including a size of resident pages in a mapping, a size of shared pages in the mapping, and a size of private pages in the mapping.
6. The method of claim 1, wherein the plurality of tasks correspond to a respective process executing a single software application and the plurality of tasks differ from one another by which respective computing device of the plurality of computing devices each respective process is being executed on.
7. The method of claim 1, wherein the runtime attack is based at least in part on an improper use of a system.
8. The method of claim 1, wherein a respective architecture, a respective operating system, and a respective page size for each of the plurality of computing devices are the same.
9. The method of claim 1, wherein a path to an installation of a framework is the same for each of the plurality of computing devices.
10. The method of claim 1, wherein the plurality of computing devices comprises a plurality of datanodes and a namenode.
11. The method of claim 10, wherein a communication cost between each of the plurality of datanodes is less than or equal to a communication cost between the namenode and the plurality of datanodes.
12. A system comprising: a data store; and a plurality of computing devices executing a plurality of processes, wherein at least one of the plurality of computing devices is configured to at least: maintain a plurality of behavior profiles individually corresponding to a respective one of the plurality of processes, wherein the behavior profiles comprise a plurality of sequences representing a plurality of sizes of private and shared memory accesses during an execution of the respective one of the plurality of processes; determine that a call variance exists in a trace of one of the plurality of behavior profiles; determine that a memory variance exists in a sequence of the plurality of sequences of the one of the plurality of behavior profiles; and in response to determining that the call variance and the memory variance exist, detect a runtime attack.
13. The system of claim 12, wherein the at least one of the plurality of computing devices is further configured to at least: determining a respective call frequency for each of a plurality of system calls from each of the plurality of processes; and comparing the respective call frequency for each of the plurality of system calls to each other.
14. The system of claim 12, wherein the at least one of the plurality of computing devices is further configured to at least: normalize the plurality of sizes of private and shared memory accesses from each of the plurality of processes; and perform statistical analysis on the normalized memory data.
15. The system of claim 12, wherein the at least one of the plurality of computing devices is further configured to at least: obtain a memory footprint of a one of the plurality of processes by observing a number of pages referenced by the one of the plurality of processes; and determine a memory consumption of the memory footprint of the one of the plurality of processes.
16. The system of claim 12, wherein the at least one of the plurality of computing devices is further configured to at least determine a memory access pattern, the memory access pattern comprising information about a plurality of features of a process memory access including a size of resident pages in a mapping, a size of shared pages in the mapping, and a size of private pages in the mapping.
17. The system of claim 12, wherein each of the plurality of processes correspond to a single software application and the plurality of processes differ from one another by which respective computing device of the plurality of computing devices each of the plurality of processes is being executed on.
18. The system of claim 12, wherein the plurality of computing devices comprise a plurality of datanodes and a namenode.
19. The system of claim 18, wherein a communication cost between each of the plurality of datanodes is less than or equal to a communication cost between the namenode and the plurality of datanodes.
20. The system of claim 18, wherein the plurality of computing devices comprises a plurality of datanodes and a namenode, the plurality of datanodes comprising a primary datanode and the at least one of the plurality of computing devices is further configured to at least send an attack notification from the primary datanode to the namenode in response to detecting the runtime attack.
</claims>
</document>
