<document>

<filing_date>
2020-08-24
</filing_date>

<publication_date>
2021-01-07
</publication_date>

<priority_date>
2015-04-23
</priority_date>

<ipc_classes>
G06F15/80,G06F9/30,G06F9/38,G06T1/20,H04N3/14
</ipc_classes>

<assignee>
GOOGLE
</assignee>

<inventors>
FINCHELSTEIN, DANIEL FREDERIC
MEIXNER, ALBERT
REDGRAVE, JASON, RUPERT
SHACHAM, OFER
ZHU, QIULING
</inventors>

<docdb_family_id>
55963456
</docdb_family_id>

<title>
Energy Efficient Processor Core Architecture for Image Processor
</title>

<abstract>
An apparatus that includes a program controller to fetch and issue instructions is described. The apparatus includes an execution lane having at least one execution unit to execute the instructions. The execution lane is part of an execution lane array that is coupled to a two dimensional shift register array structure, wherein, execution lane s of the execution lane array are located at respective array locations and are coupled to dedicated registers at same respective array locations in the two-dimensional shift register array.
</abstract>

<claims>
1. (canceled)
2. A system comprising: one or more computers and one or more storage devices storing instructions that are operable, when executed by the one or more computers, to cause the one or more computers to perform operations comprising: receiving an input program to be executed on a device comprising: a plurality of random access memories, and a plurality of execution lanes, wherein different groups of the execution lanes are assigned to use a different respective random access memory of the plurality of random access memories; determining that the input program specifies two or more execution lanes in a same group of the plurality of execution lanes to compete for different memory locations in a same random access memory of the plurality of random access memories; and in response, modifying the input program to generate multiple instructions that cause execution lanes within each group to access a respective random access memory sequentially.
3. The system of claim 2, wherein the plurality of execution lanes includes a plurality of rows of execution lanes, wherein the different groups of the execution lanes comprise different rows of the execution lanes.
4. The system of claim 2, wherein the plurality of execution lanes includes a plurality of columns of execution lanes, wherein the different groups of the execution lanes comprise different columns of the execution lanes.
5. The system of claim 2, wherein the plurality of execution lanes are arranged in an array of execution lanes.
6. The system of claim 5, wherein the plurality of execution lanes are coupled to a two dimensional shift register array structure, wherein the execution lanes are located at respective array locations and are coupled to dedicated registers at same respective array locations in the two-dimensional shift register array structure.
7. The system of claim 6, wherein the plurality of random access memories are to store register values that spill out of the two dimensional shift register array structure.
8. The system of claim 2, wherein the plurality of random access memories are to store look-up table information.
9. The system of claim 2, wherein each of the multiple instructions cause the execution lanes to read data from the respective random access memory or to write data to the respective random access memory.
10. The system of claim 2, wherein each execution lane of the plurality of execution lanes comprises a memory unit configured to write data from local register space into random access memory and to write data from random access memory into local register space.
11. The system of claim 2, wherein the plurality of execution lanes is coupled to a scalar processor to receive and execute the input program in SIMD fashion.
12. The system of claim 2, wherein the input program is contained in a larger data structure having a VLIW format.
13. A method comprising: receiving an input program to be executed on a device comprising: a plurality of random access memories, and a plurality of execution lanes, wherein different groups of the execution lanes are assigned to use a different respective random access memory of the plurality of random access memories; determining that the input program specifies two or more execution lanes in a same group of the plurality of execution lanes to compete for different memory locations in a same random access memory of the plurality of random access memories; and in response, modifying the input program to generate multiple instructions that cause execution lanes within each group to access a respective random access memory sequentially.
14. The method of claim 13, wherein the plurality of execution lanes includes a plurality of rows of execution lanes, wherein the different groups of the execution lanes comprise different rows of the execution lanes.
15. The method of claim 13, wherein the plurality of execution lanes includes a plurality of columns of execution lanes, wherein the different groups of the execution lanes comprise different columns of the execution lanes.
16. The method of claim 13, wherein the plurality of execution lanes are arranged in an array of execution lanes.
17. The method of claim 16, wherein the plurality of execution lanes are coupled to a two dimensional shift register array structure, wherein the execution lanes are located at respective array locations and are coupled to dedicated registers at same respective array locations in the two-dimensional shift register array structure.
18. The method of claim 17, wherein the plurality of random access memories are to store register values that spill out of the two dimensional shift register array structure.
19. The method of claim 13, wherein the plurality of random access memories are to store look-up table information.
20. The method of claim 13, wherein each of the multiple instructions cause the execution lanes to read data from the respective random access memory or to write data to the respective random access memory.
21. The method of claim 13, wherein each execution lane of the plurality of execution lanes comprises a memory unit configured to write data from local register space into random access memory and to write data from random access memory into local register space.
</claims>
</document>
