<document>

<filing_date>
2018-11-13
</filing_date>

<publication_date>
2020-05-07
</publication_date>

<priority_date>
2018-11-02
</priority_date>

<ipc_classes>
G06N20/00,G06N5/04,H04N21/2183,H04N21/25,H04N21/258
</ipc_classes>

<assignee>
KYUNG HEE UNIVERSITY
</assignee>

<inventors>
HONG, CHOONG SEON
NDIKUMANA, ANSELME
</inventors>

<docdb_family_id>
64331679
</docdb_family_id>

<title>
DEEP LEARNING BASED CACHING SYSTEM AND METHOD FOR SELF-DRIVING CAR IN MULTI-ACCESS EDGE COMPUTING
</title>

<abstract>
A caching system based on the invention can include an object requiring a content and an MEC server configured to determine caching contents based on a first prediction value, which may include the probability of the content being requested by the object within an allotted area and a prediction rating of the content, and download and cache the determined caching contents from a content provider. The object can include a recommendation module configured to recommend a content from among the caching contents by applying a k-means algorithm and binary classification to the first prediction value and a second prediction value, which may include a prediction value associated with a characteristic of a user, and a deep learning based caching module configured to search available MEC servers on a movement path of the object, select an optimal MEC server, and download and cache the recommended content from the optimal MEC server.
</abstract>

<claims>
1. A caching system comprising: an object requiring a provision of a content; and an MEC (multi-access edge computing) server configured to determine caching contents based on a first prediction value and configured to download and cache the determined caching contents from a content provider, the first prediction value comprising a probability of the content being requested by the object within an allotted area and a prediction rating of the content, wherein the object comprises: a recommendation module configured to identify and recommend a recommended content from among the caching contents by applying a k-means algorithm and binary classification to the first prediction value and a second prediction value, the second prediction value comprising a prediction value associated with a characteristic of a user of the object; and a deep learning based caching module configured to search available MEC servers on a movement path of the object, select an optimal MEC server for downloading the recommenced content from among the available MEC servers, and download and cache the recommended content from the optimal MEC server.
2. The caching system of claim 1, further comprising a data center configured to collect a dataset regarding content viewers, generate the first prediction value by using an MLP (multilayer perceptron) using the dataset as input, and transmit the generated first prediction value to the MEC server.
3. The caching system of claim 2, wherein the MEC server comprises: a prediction collection module configured to download the first prediction value from the data center; a location-based caching module configured to determine a content of which the first prediction value is greater than or equal to a preset threshold value from among the contents as a caching content and configured to download and cache the determined caching contents from a content provider; and an MEC caching storage module configured to store the caching contents.
4. The caching system of claim 3, wherein, if a storage space of the MEC caching storage module is full, the location-based caching module compares a first prediction value of a content already stored in the MEC caching storage module with a first prediction value of the caching content, and if the first prediction value of the caching content is greater than or equal to the first prediction value of the content already stored in the MEC caching storage module, the location-based caching module replaces the already stored content with the caching content.
5. The caching system of claim 1, wherein the object further comprises: an object prediction collection module configured to download the first prediction value from an MEC server located at a nearest distance from the object based on a location of the object; a profiling module configured to generate the second prediction value by using a CNN (convolutional neural network); and an object caching storage module configured to store the recommended content.
6. The caching system of claim 5, wherein the recommendation module generates first viewer groups by applying a k-means algorithm to the first prediction value to group content viewers according to age, generate second viewer groups by applying binary classification to the first prediction value to group content viewers belonging to the first viewer groups according to gender, and generating content type groups by applying a k-means algorithm to the first prediction value to group contents used by content viewers belong to the second viewer groups according to content type.
7. The caching system of claim 6, wherein the recommendation module generates first user groups by applying a k-means algorithm to the second prediction value to group the users according to age, generates second user groups by applying binary classification to the second prediction value to group users belonging to the first user groups according to gender, generate third user groups by applying a k-means algorithm to the second prediction value to group users belonging to the second user groups according to emotion, matches the first content viewer groups and the second content viewer groups with the first user groups and the second user groups, and identifies and recommends the recommended content based on age, gender, and emotion.
8. The caching system of claim 5, wherein the deep learning based caching module calculates a time required by the object for arriving at an area of the MEC server, a time required for leaving an area of the MEC server, and a time needed for downloading the recommended content, and selects the optimal MEC server by using the time required by the object for arriving at an area of the MEC server, the time required for leaving an area of the MEC server, and the time needed for downloading the recommended content.
9. The caching system of claim 8, wherein, if the object caching storage module is full, the deep learning based caching module compares a first prediction value of a content already stored in the object caching storage module with a first prediction value of the recommended content, and if the first prediction value of the recommended content is greater than or equal to the first prediction value of the content already stored in the object caching storage module, the deep learning based caching module replaces the already stored content with the recommended content.
10. A caching method performed by a caching system, the caching method comprising: determining caching contents based on a first prediction value, the first prediction value comprising a probability of the content being requested by an object within an allotted area and a prediction rating of the content; downloading and caching the determined caching contents from a content provider; identifying and recommending a recommended content from among the caching contents by applying a k-means algorithm and binary classification to the first prediction value and a second prediction value, the second prediction value comprising a prediction value associated with a characteristic of a user of the object; searching available MEC servers on a movement path of the object and selecting an optimal MEC server for downloading the recommenced content from among the available MEC servers; and downloading and caching the recommended content from the optimal MEC server.
11. The caching method of claim 10, further comprising, before the determining of the caching contents: collecting a dataset regarding a content viewer; generating the first prediction value by using an MLP (multilayer perceptron) using the dataset as input; and transmitting the generated first prediction value to the MEC server.
</claims>
</document>
