<document>

<filing_date>
2016-06-01
</filing_date>

<publication_date>
2020-11-11
</publication_date>

<priority_date>
2015-06-09
</priority_date>

<ipc_classes>
G06F12/109,G06F13/00,G06F16/22,G06F17/30
</ipc_classes>

<assignee>
ULTRATA
</assignee>

<inventors>
REBACK, LARRY
FRANK, STEVEN
</inventors>

<docdb_family_id>
57504324
</docdb_family_id>

<title>
INFINITE MEMORY FABRIC HARDWARE IMPLEMENTATION WITH ROUTER
</title>

<abstract>
Embodiments of the invention provide systems and methods for managing processing, memory, storage, network, and cloud computing to significantly improve the efficiency and performance of processing nodes. More specifically, embodiments of the present invention are directed to a hardware-based processing node of an object memory fabric. The processing node may include a memory module storing and managing one or more memory objects, the one or more memory objects each include at least a first memory and a second memory, wherein: each memory object is created natively within the memory module, and each memory object is accessed using a single memory reference instruction without Input/Output (I/O) instructions; and a router configured to interface between a processor on the memory module and the one or more memory objects.
</abstract>

<claims>
1. A hardware-based processing node (605, 610, 705, 710, 820, 825, 1005, 1010, 2200) suitable for being part of an object memory fabric (405, 600, 700), the processing node comprising: a memory module (625, 630) for storing and managing one or more memory objects (1705, 2005), the one or more memory objects each including at least a first memory and a second memory, wherein: each memory object is arranged to be created natively within the memory module, and each memory object is arranged to be accessed using a single memory reference instruction without Input/Output, I/O, instructions; and a router (615, 620, 715, 1220, 2205) configured to interface between a processor (304) on the memory module and the one or more memory objects; wherein a set of data is arranged to be stored within the first memory of the memory module; wherein the router includes a memory module object directory that is arranged to index all memory objects or portions of memory objects within the memory module; wherein the memory module object directory includes one object index tree, OIT, for each memory object having at least one block stored in either the first memory or second memory of the memory module and a per object index tree, POIT, wherein each memory object represented in the OIT has a corresponding POIT and wherein each leaf (1235) of the POIT comprises a pointer to metadata and blocks of the memory object stored in the first memory or second memory of the memory module; wherein the memory module is arranged to determine dynamically, based on the OIT and POIT, that at least a portion of the set of data will be transferred from the first memory to the second memory; and wherein, in response to the determination that at least a portion of the set of data will be transferred from the first memory to the second memory, the router is configured to identify, based on the OIT and POIT, the portion to be transferred and to facilitate execution of the transfer.
2. The hardware-based processing node of claim 1, wherein the one or more memory objects each include at least two DIMMs, and wherein the router is arranged to manage distribution of data of the set of data between the at least two DIMMs.
3. The hardware-based processing node of claim 2, wherein the first memory is a flash memory (1320).
4. The hardware-based processing node of claim 3, wherein the memory module object directory includes location information associated with the flash memory and the DIMMs to determine a location of a data within the memory objects in response to a request for the location of the data.
5. The hardware-based processing node of claim 4, wherein the memory module object directory includes at least one pointer (910) associated with each memory object, and wherein determining the location of the data includes determining a pointer of the memory object associated with the data.
6. The hardware-based processing node of claim 1, wherein the memory module is arranged to map an object of the one or more memory objects from the object memory fabric into a virtual address space, and wherein the processor is arranged to map the object from the virtual address space into physical memory of the processor.
7. The hardware-based processing node of claim 1, wherein the first memory is a flash memory and the second memory is a dynamic random-access memory (DRAM).
8. An object memory fabric comprising:
a plurality of hardware-based processing nodes according to any one of the preceding claims.
</claims>
</document>
