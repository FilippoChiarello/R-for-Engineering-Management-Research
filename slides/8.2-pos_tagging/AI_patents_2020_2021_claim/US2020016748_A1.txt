<document>

<filing_date>
2018-07-16
</filing_date>

<publication_date>
2020-01-16
</publication_date>

<priority_date>
2018-07-16
</priority_date>

<ipc_classes>
B25J9/00,B25J9/16
</ipc_classes>

<assignee>
KINDRED SYSTEMS
</assignee>

<inventors>
MARTIN, ADRIAN
</inventors>

<docdb_family_id>
69139981
</docdb_family_id>

<title>
SYSTEMS, DEVICES, AND METHODS FOR DISTRIBUTED GRAPHICAL MODELS IN ROBOTICS
</title>

<abstract>
A distribution system (e.g., distributed robotic system) and method, may employ a plurality of agents, each agent associated with a respective set of processor-executable instructions, and a specification that defines routes amongst the agents. A first agent (e.g., a host agent) may be instantiated, associated with a first processor-based device in the distributed system. An attempt is made to locate an instance of a second agent. In response to locating the instance of the second agent, the instance of the second agent is registered with the instance of the first agent. A third agent may be instantiated, and the instance of the third agent registered with the instance of the first agent. A first route between the instance of the second agent and the instance of the third agent may be created, and a message sent between the instances of the second and the third agents.
</abstract>

<claims>
1. A method of operation of a distributed system, including at least one processor, and a first processor-based device in communication with the at least one processor, the method comprising: receiving, by the at least one processor, processor-readable information which includes: a specification for a plurality of agents, wherein the plurality of agents comprises a first agent, a second agent, and at least a third agent, a plurality of sets of processor-executable instructions wherein a respective agent in the plurality of agents is associated with a respective set of processor-executable instructions in the plurality of sets of processor-executable instructions, and a specification for a plurality of routes amongst the plurality of agents, wherein the plurality of routes comprises a first route; causing, by the at least one processor, creation of an instance of the first agent wherein the first agent is a host agent, and the instance of the first agent is associated with first processor-based device in the distributed system; attempting to locate, by the at least one processor, an instance of the second agent; in response to the instance of the second agent being located, registering, by the at least one processor, the instance of the second agent with the instance of the first agent; causing, by the at least one processor, creation of an instance of the third agent; registering, by the at least one processor, the instance of the third agent with the instance of the first agent; causing, by the at least one processor, creation of an instance of the first route between the instance of the second agent and the instance of the third agent; and generating, by the at least one processor, a signal that includes information which specifies a message between the instance of the second agent and the instance of the third agent.
2. The method of claim 1, further comprising: In response to the instance of the second agent not being located, causing, by the at least one processor, creation of the instance of the second agent; and registering, by the at least one processor, the instance of the second agent with the instance of the first agent.
3. The method of claim 1 wherein the distributed system further includes a second processor-based device in communication with the at least one processor, and the plurality of agents further includes a fourth agent and a fifth agent, the method further comprises: causing, by the at least one processor, creation of an instance of the fourth agent, wherein the fourth agent is a host agent associated with the second processor-based device; causing, by the at least one processor, creation of an instance of the fifth agent; and registering, by the at least one processor, the instance of the fifth agent with the instance of the fourth agent.
4. The method of claim 1, further comprising: receiving, by the at least one processor, a request to cause the creation of the instance of the second agent prior to a request to cause the creation of the instance of the first agent; causing, by the at least one processor, creation of an instance of the second agent; attempting to locate, by the at least one processor, the instance of the first agent; and if the instance of the second agent is not located, causing, by the at least one processor, creation of an instance of the first agent.
5. The method of claim 1 wherein at least one of the instance of the first agent, the instance of the second agent, or the instance of the third agent is a worker agent.
6. The method of claim 1 wherein the instance of the second agent is a hardware agent and the instance of the third agent is a software agent.
7. The method of claim 1, further comprising: detecting, by the at least one processor, the instance of the second agent, or the instance of the third agent, has malfunctioned; and generating, by the at least one processor, a signal that includes information that specifies that the instance of the second agent, or the instance of the second agent, has crashed.
8. The method of claim 1, further comprising: generating, by the at least one processor, a signal that includes information that represents existence of the instance of the second agent, and existence of the instance of the third agent.
9. The method of claim 1 wherein the second agent includes a label that comprises a label value, and the third agent includes the label that comprises the label value, the method further comprising: performing, by the at least one processor, an action on the instance of the second agent and an action the instance of the third agent, wherein the action is selected from the group consisting of: starting, by the at least one processor, a plurality of instances of agents, each instance of agent in the plurality of instances of agents includes the label which comprises the label value; stopping, by the at least one processor, a plurality of instances of agents, each instance of agent in the plurality of instances of agents includes the label which comprises the label value; coordinating, by the at least one processor, communication amongst a plurality of instances of agents, each instance of agent in the plurality of instances of agents includes the label which comprises the label value; coordinating, by the at least one processor, a plurality of instances of agents, each instance of agent in the plurality of instances of agents includes the label which comprises the label value; and updating, by the at least one processor, a plurality of instances of agents, each instance of agent in the plurality of instances of agents includes the label which comprises the label value.
10. The method of claim 1, further comprising: receiving, by at least one processor, event information that represents an event; receiving, by at least one processor, the event information by the instance of the second agent; sending, by at least one processor, the event information to the instance of the third agent; and processing, by at least one processor, the event information.
11. The method of claim 10, wherein processing the event information includes at least one action selected from the group of actions consisting of: in response to execution by the at least one processor of a first set of processor-executable instructions included in the plurality of sets of processor-executable instructions and associated with the instance of the second agent, processing the event information; and in response to execution by the at least one processor of a second set of processor-executable instructions included in the plurality of sets of processor-executable instructions and associated with the instance of the third agent, processing the event information.
12. The method of claim 1 wherein the instance of the second agent includes a variable, and attempting to locate the instance of the host agent, further comprises: attempting to locate, by the at least one processor, the instance of the host agent that includes the variable set to a first value.
13. The method of claim 1 wherein the second agent or the third agent includes another plurality of agents and at least one route amongst the other plurality of agents.
14. The method of claim 1 wherein a respective agent in the plurality of agents includes an input terminal and an output terminal.
15. A system, comprising: at least one processor; at least one non-transitory computer-readable storage media in communication with the at last one processor, and which stores at least one of processor-executable instructions or data thereon which when executed causes the at least one processor to: define a first plurality of agents, wherein a respective agent in the first plurality of agents can be in an active state or an inactive state, define a second plurality of agents, wherein a respective agent in the second plurality of agents can be in an active state or an inactive state, define a third plurality of agents, wherein a respective agent in the third plurality of agents can be in an active state or an inactive state, define a first plurality of routes disposed between, providing communication between, the first plurality of agents and the second plurality of agents, wherein a respective agent in the first plurality of routes can be in an active state or an inactive state, define a second plurality of routes disposed between, providing communication between, the third plurality of agents and the second plurality of agents, wherein a respective agent in the second plurality of routes can be in an active state or an inactive state, receive information that specifies a requested plurality of agents to change to a requested state wherein: the requested state is an active state or an inactive state, and the first plurality of agents includes the requested plurality of agents or the third plurality of agents includes the requested plurality of agents, change the requested plurality of agents to the requested state, dynamically change the state of the first plurality of routes, the second plurality of routes, or the first plurality of routes and the second plurality of routes, and send event information through the first plurality of routes, or the a second plurality of routes.
16. The system of claim 15, further comprising: a first processor-based device including a first processor; a second processor-based device including a second processor; and wherein the at least one processor includes the first processor, and the second processor.
17. The system of claim 16 wherein: the first processor-based device is a robot; and the second processor-based device is an operator interface.
18. The system of claim 16 wherein, when executed, the processor-executable instructions further cause the at least one processor to: define a first host agent for the first processor-based device; and define a second host agent for the second processor-based device.
19. The system of claim 15 wherein, when executed, the processor-executable instructions further cause the at least one processor to: attempt to locate the first plurality of agents.
20. The system of claim 19 wherein, when executed, the processor-executable instructions further cause the at least one processor to: if the at least one processor does not locate the first plurality of agents, start the first plurality of agents.
21. The system of claim 15 wherein, when executed, the processor-executable instructions further cause the at least one processor to: have the first plurality of agents to fill a first at least one role; have the second plurality of agents to fill a second at least one role; and have the third plurality of agents to fill a third at least one role.
22. The system of claim 15 wherein, when executed, the processor-executable instructions further cause the at least one processor to: define a blueprint including information that specifies: the first at least one role, the second at least one role, and the third at least one role.
23. The system of claim 15 wherein, when executed, the processor-executable instructions further cause the at least one processor to: define a supervisor agent for the first plurality of agents, the second plurality of agents, or the third plurality of agents.
24. The system of claim 15 wherein, when executed, the processor-executable instructions further cause the at least one processor to: receive event information that represents an event; send the event information to at least one of the first plurality of agents, the second plurality of agents, or the third plurality of agents; and process the event information.
25. A system, comprising: a plurality of hardware processors that includes a first hardware processor, and a second hardware processor; at least one non-transitory computer-readable storage media in communication with the at last one processor, and which stores processor-executable instructions which when executed causes the plurality of hardware processors to: define a blueprint that includes a plurality of roles and a plurality of routes, start a blueprint supervisor agent for the blueprint; have a plurality of agents fill the plurality of roles, wherein a respective agent in the plurality of agents fill at least a respective role in the plurality of roles, wherein plurality of agents includes: a first at least one agent, and a second at least one agent, cause the plurality of agents to be brought into communication with the blueprint supervisor agent; cause a plurality of host agents to start, wherein plurality of host agents includes: a first host agent, wherein the first host agent runs on the first hardware processor and is in communication with the at least one agent, and a second host agent, wherein the first host agent runs on the second hardware processor and is in communication with the second at least one agent; and receive, at the first host agent, at least one registration request from the first at least one agent; receive, at the second host agent, at least one registration request from the second at least one agent.
26. The system of claim 25, wherein the plurality of roles includes: a first element for a first role, the first element including a first output terminal; a second element for a second role, the second element including a first input terminal and a second output terminal; and a third element for a third role, the third element including a second input terminal.
27. The system of claim 26, wherein the first element, the second element, or the third element is selected from the group consisting of a role, and an assembly.
28. The system of claim 26, wherein the plurality of routes includes: a first route that brings the first output terminal into communication with the first input terminal; and a second route that brings the second output terminal into communication with the second input terminal.
29. The system of claim 25, wherein the plurality of agents includes: a first agent, to perform at least the first role; a second agent, to perform at least the second role; and a third agent, to perform at least the third role.
30. The system of claim 25 wherein, when executed, the processor-executable instructions further cause the plurality of processors to: attempt to locate the first at least one agent.
31. The system of claim 30 wherein, when executed, the processor-executable instructions further cause the plurality of processors to: if the plurality of processors does not locate the first at least one agent, start the first at least one agent.
32. The system of claim 25 wherein the plurality of roles and the plurality of routes included in the blueprint are arranged as a graph.
33. The system of claim 25, further comprising a robot, wherein the first hardware processor is included in the robot.
34. The system of claim 25, further comprising an operator interface, wherein the second hardware processor is included in the operator interface.
35. The system of claim 25 wherein, when executed, the processor-executable instructions further cause the plurality of processors to: dynamically update a first at least one route the plurality of routes to an inactive state; and dynamically update a second at least one route the plurality of routes to an active state.
36. The system of claim 25 wherein, when executed, the processor-executable instructions further cause the plurality of processors to: define a registry of agents including processor-readable information that represents the status of at least one agent; and update the registry of agents.
</claims>
</document>
