<document>

<filing_date>
2019-03-12
</filing_date>

<publication_date>
2020-09-23
</publication_date>

<priority_date>
2018-05-29
</priority_date>

<ipc_classes>
G06F9/445
</ipc_classes>

<assignee>
GUANGDONG OPPO MOBILE TELECOMMUNICATIONS CORPORATION
</assignee>

<inventors>
LIU, YAOYONG
CHEN, YAN
</inventors>

<docdb_family_id>
64146573
</docdb_family_id>

<title>
METHOD AND APPARATUS FOR UPDATING APPLICATION PREDICTION MODEL, STORAGE MEDIUM, AND TERMINAL
</title>

<abstract>
The present disclosure provides a method and an apparatus for updating an application prediction model, a storage medium, and a terminal. The method includes: detecting that an application uninstallation event is triggered; determining a first application which is uninstalled; deleting a data log of the first application from training sample data when training sample data of an application prediction model includes the data log of the first application, and generating target training sample data; and updating the application prediction model based on the target training sample data. The present disclosure can solve the problem of inconsistency between the actually installed application and the application-related data log included in the training sample data of the application prediction model when an application is uninstalled, and effectively improve the accuracy for predicting an application to be launched using the application prediction model.
</abstract>

<claims>
1. A method for updating an application prediction model, which can optimize the preloading scheme of applications in a terminal, characterized by comprising: detecting (101, 501, 601) that an application uninstallation event is triggered; determining a first application which is uninstalled; deleting (102) a data log of the first application from training sample data when training sample data of an application prediction model comprises the data log of the first application, and generating target training sample data, wherein the application prediction model is a pre-trained learning model capable of predicting an application to be preloaded, the pre-trained learning model being trained by using the sample training data, said sample training data being collected during the user using the terminal; and updating (103, 503, 604) the application prediction model based on the target training sample data.
2. The method according to claim 1, wherein deleting (102) the data log of the first application from the training sample data when the training sample data of the application prediction model comprises the data log of the first application, and generating target training sample data comprises:
deleting (502) a data log of a preset application use sequence from the training sample data when the training sample data of the application prediction model comprises the data log of the first application, and generating the target training sample data; wherein the preset application use sequence comprises an application sequence corresponding to the first application and a second application adjacent to the first application.
3. The method according to claim 1, wherein the training sample data comprises sample data formed by state feature information of a sample collection moment and a sample tag of the state feature information; wherein the sample tag involves an application which is launched within a preset time period after the sample collection moment; and
wherein deleting (102) the data log of the first application from the training sample data when the training sample data of the application prediction model comprises the data log of the first application, and generating target training sample data comprises:
deleting sample data that takes the first application as the sample tag from the training sample data when the training sample data of the application prediction model comprises the data log of the first application, and generating the target training sample data.
4. The method according to claim 1, wherein deleting (102) the data log of the first application from the training sample data when the training sample data of the application prediction model comprises the data log of the first application, and generating target training sample data comprises: determining (602) a third application of a same application type as the first application when the training sample data of the application prediction model comprises the data log of the first application; and replacing (603) the data log of the first application in the training sample data with a data log of the third application to generate the target training sample data.
5. The method according to claim 1, wherein updating (103, 503, 604) the application prediction model based on the target training sample data further comprises:
predicting a first to-be-preloaded application based on the application prediction model when an application preloading event is triggered; and preloading the first to-be-preloaded application.
6. The method according to claim 1, wherein after updating (103, 503, 604) the application prediction model based on the target training sample data, the method further comprises:
predicting (504, 605) a second to-be-preloaded application based on the updated application prediction model when an application preloading event is triggered; and preloading (505) the second to-be-preloaded application.
7. The method according to claim 5, wherein before preloading the first to-be-preloaded application, the method further comprises: determining whether the first to-be-preloaded application comprises the first application; and deleting the first application from the first to-be-preloaded application when the first to-be-preloaded application comprises the first application.
8. The method according to claim 7, wherein preloading the first to-be-preloaded application comprises:
preloading the first to-be-preloaded application from which the first application has been deleted.
9. The method according to claim 5, wherein preloading the first to-be-preloaded application comprises:
preloading an application interface of the first to-be-preloaded application based on a pre-created preloaded active window stack, wherein boundary coordinates of the preloaded active window stack are located outside a coordinate range of a display screen.
10. The method according to claim 6, wherein preloading (505) the second to-be-preloaded application comprises:
preloading (606) an application interface of the second to-be-preloaded application based on a pre-created preloaded active window stack, wherein boundary coordinates of the preloaded active window stack are located outside a coordinate range of a display screen.
11. The method according to claim 10, wherein preloading (606) the application interface of the second to-be-preloaded application based on the pre-created preloaded active window stack comprises: creating a target process of the second to-be-preloaded application; creating a task stack of the second to-be-preloaded application in the pre-created preloaded active window stack; launching an active window of the second to-be-preloaded application in the task stack based on the target process; and drawing and displaying the application interface of the second to-be-preloaded application based on the launched activity window.
12. The method according to claim 10, wherein after preloading (606) the application interface of the second to-be-preloaded application based on the pre-created preloaded active window stack, the method further comprises:
moving (607) an application interface of a target application comprised in the preloaded active window stack to the display screen for display when a launching instruction of the target application comprised in the second to-be-preloaded application is received.
13. The method according to claim 6, further comprising: sending a forged focus notification to the second to-be-preloaded application, and keeping drawing the application interface of the second to-be-preloaded application and displaying an update within a preset time period based on the forged focus notification.
14. A computer readable storage medium, characterized by having a computer program stored thereon, for implementing the method for updating the application prediction model according to any one of claims 1-13 when executed by a processor.
15. A terminal (800), comprising: a memory (801), a processor (802), and a computer program stored on the memory (801) and operable on the processor (802), characterized in that the processor (802) implements the method for updating the application prediction model according to any one of claims 1-13 when running the computer program.
</claims>
</document>
