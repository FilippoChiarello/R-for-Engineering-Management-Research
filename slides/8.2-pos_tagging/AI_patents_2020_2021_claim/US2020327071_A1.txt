<document>

<filing_date>
2019-04-09
</filing_date>

<publication_date>
2020-10-15
</publication_date>

<priority_date>
2019-04-09
</priority_date>

<ipc_classes>
G06F11/07,G06F12/14,G06F21/60
</ipc_classes>

<assignee>
RED HAT
</assignee>

<inventors>
TSIRKIN, MICHAEL
ARCANGELI, ANDREA
</inventors>

<docdb_family_id>
72747991
</docdb_family_id>

<title>
PREFETCH SUPPORT WITH ADDRESS SPACE RANDOMIZATION
</title>

<abstract>
A system includes a memory, a processor in communication with the memory, an application, and a supervisor. The supervisor is configured to allocate an identifier corresponding to a virtual memory area and expose a data structure that is readable by the application. Responsive to a fault trigger associated with an address, the supervisor is configured to record fault information in the data structure. The application is configured to predict at least a portion of subsequent fault information based on fault information recorded in the data structure.
</abstract>

<claims>
The invention is claimed as follows:
1. A system comprising: a memory; a processor in communication with the memory; an application; and a supervisor, wherein the supervisor is configured to: allocate an identifier corresponding to a virtual memory area ("VMA"), expose a data structure that is readable by the application, responsive to a fault trigger associated with an address, record fault information in the data structure, and wherein the application is configured to: predict at least a portion of subsequent fault information based on fault information recorded in the data structure.
2. The system of claim 1, wherein the data structure is one of a training file, a log, and a supervisor prediction model.
3. The system of claim 1, wherein the application is a userspace application.
4. The system of claim 1, wherein the fault information includes the identifier corresponding to the VMA, an offset, and an access type.
5. The system of claim 4, wherein the access type is at least one of read, write, and execute.
6. The system of claim 4, wherein the offset is calculated as the address minus a start address of the VMA.
7. The system of claim 1, wherein the supervisor is configured to prefetch fault data based on the prediction.
8. The system of claim 1, wherein the supervisor is further configured to record additional fault information in the data structure responsive to an additional fault trigger associated with an additional address.
9. The system of claim 8, wherein at least one of the application and the supervisor is configured to predict a pattern of subsequent fault information based at least partially on the fault information and the additional fault information recorded in the data structure.
10. The system of claim 9, wherein the supervisor is configured to prefetch a plurality of data associated with each predicted address in the pattern of subsequent fault information.
11. The system of claim 1, wherein the supervisor is further configured to: expose an interface to receive new fault information from the application, wherein the fault information is recorded in the data structure, receive the new fault information, look up the VMA defined in the data structure based on the identifier, calculate a fault offset from the VMA start address and the fault address identified in the fault information, and prefetch fault data into the memory based on the fault address.
12. A method comprising: allocating an identifier corresponding to a virtual memory area ("VMA"); exposing, by a supervisor, a data structure that is readable by an application; responsive to a fault trigger associated with an address, recording, by the supervisor, fault information in the data structure; and predicting, by the application, at least a portion of subsequent fault information based on the fault information recorded in the data structure.
13. The method of claim 12, wherein the fault information includes the identifier corresponding to the VMA, an offset, and an access type.
14. The method of claim 12, wherein the fault information further comprises the VMA size.
15. The method of claim 12, wherein a user application allocates the identifier.
16. The method of claim 12, further comprising prefetching, by the supervisor, data based on the prediction.
17. The method of claim 12, further comprising: responsive to an additional fault trigger, recording, by the supervisor, additional fault information in the data structure; predicting, by the application, a pattern of subsequent fault information based at least partially on the fault information and the additional fault information recorded in the data structure; and prefetching, by the supervisor, a plurality of fault data associated with each predicted address in the pattern of subsequent fault information.
18. A non-transitory machine readable medium storing code, which when executed by a processor, causes a supervisor to: allocate an identifier corresponding to a virtual memory area ("VMA"); expose a data structure that is readable by an application; responsive to a fault trigger associated with an address, record fault information in the data structure; and predict at least a portion of subsequent fault information based on the fault information recorded in the data structure.
19. The non-transitory machine readable medium of claim 18, which further causes the supervisor to prefetch fault data based on the prediction.
20. The non-transitory machine readable medium of claim 18, which further causes the supervisor to: responsive to an additional fault trigger, record additional fault information in the data structure; predict a pattern of subsequent fault information based at least partially on the fault information and the additional fault information recorded in the data structure; and prefetch a plurality of data associated with each predicted address in the pattern of subsequent fault information.
</claims>
</document>
