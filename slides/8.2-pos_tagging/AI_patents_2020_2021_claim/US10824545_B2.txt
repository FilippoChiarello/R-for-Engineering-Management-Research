<document>

<filing_date>
2020-05-28
</filing_date>

<publication_date>
2020-11-03
</publication_date>

<priority_date>
2019-01-09
</priority_date>

<ipc_classes>
G06F11/36,G06F3/0484,G06N20/00
</ipc_classes>

<assignee>
BANK OF AMERICA CORPORATION
</assignee>

<inventors>
ANTOINE, VINODH SAGAYARAJ
MANI, GURU
PRAGATHEESWARAN, SHANKARGANESH
</inventors>

<docdb_family_id>
71125162
</docdb_family_id>

<title>
Computer code test script generating tool using visual inputs
</title>

<abstract>
A tool includes an interface, a memory, a conversion engine, an identifier tool, and a script engine. The interface communicatively couples the tool to a server. The tool obtains a plurality of visual inputs from a computer program specification document. The memory stores the plurality of visual inputs and a set of known computer code elements. Each respective element of the set of known computer code elements includes predetermined testing criteria for testing computer code that includes the respective element. The conversion engine generates a plurality of textual objects from the plurality of visual inputs. The identifier determines whether each respective textual object matches a respective element of the set of known computer code elements. If a match is found, the identifier tool associates the predetermined testing criteria of the respective element to the respective textual object. The script engine generates a test script using the predetermined testing criteria.
</abstract>

<claims>
1. A test script generating tool for generating a test script for use in an automation framework, comprising: an interface communicatively coupling the test script generating tool to a server, wherein the test script generating tool accesses the server via the interface to obtain a plurality of visual inputs from a computer program specification document, wherein each visual input represents one or more functional requirements of the computer program specification document; a memory that stores the plurality of visual inputs and a set of known computer code elements, wherein each respective element of the set of known computer code elements comprises predetermined testing criteria for testing computer code that includes the respective element; and one or more processors configured to: access the plurality of visual inputs from the memory; and generate a plurality of textual objects from the plurality of visual inputs, wherein the plurality of textual objects is associated with the one or more functional requirements of the computer program specification document; access the set of known computer code elements from the memory; compare the plurality of textual objects to the set of known computer code elements to determine, for each respective textual object of the plurality of textual objects, whether the respective textual object matches a respective element of the set of known computer code elements; if the respective textual object matches a respective element of the set of known computer code elements, associate the predetermined testing criteria of the respective element to the respective textual object; generate a test script using the predetermined testing criteria associated with the plurality of the textual objects; and transmit the test script to a test script repository server, wherein the automation framework may access the test script from the test script repository server.
2. The test script generating tool of claim 1, wherein the test script is generated and transmitted to the test script repository server prior to a compilation of a computer program written based on the computer program specification document.
3. The test script generating tool of claim 1, wherein: the predetermined testing criteria indicates to apply a style template; associating the predetermined testing criteria of the respective element to the respective textual object comprises: determining one or more user experience design requirements associated with the style template; and associating one or more style testing criteria to the textual object, wherein the one or more style testing criteria correspond to the one or more user experience design requirements associated with the style template; and the one or more processors generates the test script using at least the one or more style testing criteria associated with the respective textual object.
4. The test script generating tool of claim 1, wherein comparing the plurality of textual objects to the set of known computer code elements comprises applying a machine learning trained Bayesian comparison to the respective textual object against the set of known computer code elements to determine whether the respective textual object matches a respective element of the set of known computer code elements.
5. The test script generating tool of claim 1, wherein comparing the plurality of textual objects to the set of known computer code elements comprises applying a machine learning trained keyword-based classification to the respective textual object against the set of known computer code elements to determine whether the respective textual object matches a respective element of the set of known computer code elements.
6. The test script generating tool of claim 1, wherein comparing the plurality of textual objects to the set of known computer code elements comprises: determining that the respective textual object does not match any element in the set of known computer code elements; prompting a user via the user interface for an identification of the textual object; and based on the identification, associating testing criteria to the respective textual object.
7. The test script generating tool of claim 1, wherein: the one or more processors is coupled to a user interface enabling a user to provide one or more instructions; and generating the test script comprises determining a subset of the predetermined testing criteria for use in generating the test script based on the one or more instructions.
8. A method for generating a test script for use in an automation framework, comprising: obtaining a plurality of visual inputs from a computer program specification document, wherein each visual input represents one or more functional requirements of the computer program specification document; generating a plurality of textual objects from the plurality of visual inputs, wherein the plurality of textual objects is associated with the one or more functional requirements of the computer program specification document; generating a test script using the predetermined testing criteria associated with the plurality of the textual objects; and transmitting the test script to a test script repository server, wherein the automation framework may access the test script from the test script repository server.
9. The method of claim 8, wherein generating the test script and transmitting the test script occurs prior to a compilation of a computer program written based on the computer program specification document.
10. The method of claim 8, further comprising receiving one or more instructions from a user, wherein generating the test script comprises determining, based on the one or more instructions, a subset of the predetermined testing criteria for use in generating the test script.
11. A system for testing computer code, comprising: an automation framework configured to run test scripts to test computer code programs; a test script generating tool for generating a test script for use in the automation framework; a test script repository server communicatively coupled to the test script generating tool, wherein the test script repository comprises a memory for storing the test script generated by the test script generating tool; and a computer code repository server communicatively coupled to the test automation framework, wherein the computer code repository comprises a memory for storing a compiled computer code; wherein the test script generating tool comprises: an interface communicatively coupling the test script generating tool to a server, wherein the test script generating tool accesses the server via the interface to obtain a plurality of visual inputs from a computer program specification document, wherein each visual input represents one or more functional requirements of the computer program specification document; a memory storing the plurality of visual inputs and a set of known computer code elements, wherein each respective element of the set of known computer code elements comprises predetermined testing criteria for testing computer code that includes the respective element; a conversion engine configured to: access the plurality of visual inputs from the memory; and generate a plurality of textual objects from the plurality of visual inputs using one or more processors, wherein the plurality of textual objects is associated with the one or more functional requirements of the computer program specification document; and a script engine configured to: generate a test script using the predetermined testing criteria associated with the plurality of the textual objects; and transmit the test script to the test script repository server, wherein the automation framework may access the test script from the test script repository server; and wherein the automation framework is configured to: access the test script from the test script repository server and access the compiled computer program from the computer code repository server; and run the test script on the compiled computer program.
12. The system for testing computer code of claim 11, wherein: the test script generating tool is communicatively coupled to a user interface enabling a user to provide one or more instructions to the test script generating tool; and the script engine generating the test script comprises determining a subset of the predetermined testing criteria for use in generating the test script based on the one or more instructions.
13. The system for testing computer code of claim 11, wherein the automation framework is configured to automatically access the compiled computer program from the computer code repository server in response to receiving a notification from the computer code repository server that the compiled computer program has been uploaded to the computer code repository server.
14. The system for testing computer code of claim 11, wherein the automation framework is configured to automatically access the test script from the test script repository server by sending an access request to the test script repository server, wherein the access request is used to identify the test script associated with the compiled computer program.
</claims>
</document>
