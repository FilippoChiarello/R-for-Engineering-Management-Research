<document>

<filing_date>
2019-05-01
</filing_date>

<publication_date>
2020-11-05
</publication_date>

<priority_date>
2019-05-01
</priority_date>

<ipc_classes>
G06F16/21,G06K9/00
</ipc_classes>

<assignee>
SAP
</assignee>

<inventors>
BANERJEE, DEBASHIS
Jinadatta, Shruthi
Dama, Madhava
KC, Shivaprasad
Agrahari, Saket
</inventors>

<docdb_family_id>
73017740
</docdb_family_id>

<title>
Graphical User Interface Providing Priority-Based Markup of Documents
</title>

<abstract>
A first version of a document is accessed so that a corresponding contract dictionary is generated with a plurality of string tokens. Subsequently, a visual distinction is assigned to the corresponding ranking priority of each of the plurality of string tokens. A second version of the document is accessed and changed string tokens are identified by comparing the second version with the first version of the document. A corresponding ranking priority is then retrieved for each of the changed string tokens in the contract dictionary so that each of the changed string tokens can be highlighted with the visual distinction corresponding to the ranking priority. Each of the highlighted changed string tokens can then be displayed with the visual distinction and the document on a graphical user interface.
</abstract>

<claims>
1. A method for implementation by one or more data processors forming part of at least one computing device, the method comprising: accessing a first version of a document; building a contract dictionary for the first version of the document with a plurality of string tokens contained in the first version of the document, wherein: in a first case that one of the plurality of string tokens contained in the first version of the document is a pre-determined string token, assigning a ranking priority associated with the pre-determined string token to the one of the plurality of string tokens; and in a second case that one of the plurality of string tokens contained in the first version of the document is not a pre-determined string token, providing an option to add the one of the plurality of string tokens to the contract dictionary via a graphical user interface, and assigning a corresponding ranking priority to the one of the plurality of string tokens based on user-generated input received via the graphical user interface; assigning a visual distinction to the corresponding ranking priority of each of the plurality of string tokens; accessing a second version of the document; identifying changed string tokens by comparing the second version with the first version of the document; retrieving a corresponding ranking priority for each of the changed string tokens in the contract dictionary; highlighting each of the changed string tokens with the visual distinction corresponding to the ranking priority in the graphical user interface; and displaying each of the highlighted changed string tokens with the visual distinction and the second version of the document in the graphical user interface.
2. The method of claim 1, further comprising: highlighting, in the graphical user interface, a subset of the changed string tokens with a visual distinction corresponding to a predetermined ranking priority; and displaying, in the graphical user interface, the highlighted subset of the changed string tokens with a visual distinction corresponding to a predetermined ranking priority and the document on the graphical user interface.
3. The method of claim 2, further comprising: accepting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
4. The method of claim 2, further comprising: rejecting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
5. The method of claim 1, further comprising: highlighting, in the graphical user interface, a subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
6. The method of claim 5, further comprising: accepting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
7. The method of claim 5, further comprising: rejecting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority
8. The method of claim 1, wherein accessing a first version of a document is by feeding a hard copy of the first version of the document to an Optical Character Recognition (OCR) unit.
9. The method of claim 1, wherein accessing a second version of the document is by feeding a hard copy of the second version of the document to an Optical Character Recognition (OCR) unit.
10. The method of claim 1, wherein accessing the first version of the document is by obtaining the first version of the document from a local storage or a network.
11. The method of claim 1, wherein accessing the second version of the document is by obtaining the second version of the document from a local storage or a network.
12. The method of claim 1, wherein, in the second case that one of the plurality of string tokens contained in the first version of the document is not a pre-determined string token, and in a third case that the one of the plurality of string tokens contained in the first version of the document is a linking or auxiliary verb, assigning a low ranking priority to the one of the plurality of string tokens.
13. The method of claim 2, further comprising: providing, in the graphical user interface, a first graphical user interface element to accept the highlighted subset of the changed string tokens and a second graphical user interface element to reject the highlighted subset of the changed string tokens.
14. A system comprising: at least one data processor; and memory storing instructions which, when executed by the at least one data processors, result in operations comprising: accessing a first version of a document; building a contract dictionary for the first version of the document with a plurality of string tokens contained in the first version of the document, wherein: in a first case that one of the plurality of string tokens contained in the first version of the document is a pre-determined string token, assigning a ranking priority associated with the pre-determined string token to the one of the plurality of string tokens; and in a second case that one of the plurality of string tokens contained in the first version of the document is not a pre-determined string token, providing an option to add the one of the plurality of string tokens to the contract dictionary via a graphical user interface, and assigning a corresponding ranking priority to the one of the plurality of string tokens based on user-generated input received via the graphical user interface; assigning a visual distinction to the corresponding ranking priority of each of the plurality of string tokens; accessing a second version of the document; identifying changed string tokens by comparing the second version with the first version of the document; retrieving a corresponding ranking priority for each of the changed string tokens in the contract dictionary; highlighting each of the changed string tokens with the visual distinction corresponding to the ranking priority in the graphical user interface; and displaying each of the highlighted changed string tokens with the visual distinction and the second version of the document in the graphical user interface.
15. The system of claim 14, further comprising: highlighting, in the graphical user interface, a subset of the changed string tokens with a visual distinction corresponding to a predetermined ranking priority; and displaying, in the graphical user interface, the highlighted subset of the changed string tokens with a visual distinction corresponding to a predetermined ranking priority and the document on the graphical user interface.
16. The system of claim 15, further comprising: accepting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
17. The system of claim 15, further comprising: rejecting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
18. The system of claim 14, further comprising: highlighting, in the graphical user interface, a subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority.
19. The system of claim 18, further comprising: accepting the highlighted subset of the changed string tokens with the visual distinction corresponding to the predetermined ranking priority; and rejecting the highlighted subset of the changed string tokens with the visual distinctions corresponding to the predetermined ranking priority.
20. A non-transitory computer program product storing instructions which, when executed by at least one data processor forming part of at least one computing device, result in operations comprising: accessing a first version of a document; building a contract dictionary for the first version of the document with a plurality of string tokens contained in the first version of the document, wherein: in a first case that one of the plurality of string tokens contained in the first version of the document is a pre-determined string token, assigning a ranking priority associated with the pre-determined string token to the one of the plurality of string tokens; and in a second case that one of the plurality of string tokens contained in the first version of the document is not a pre-determined string token, providing an option to add the one of the plurality of string tokens to the contract dictionary via a graphical user interface, and assigning a corresponding ranking priority to the one of the plurality of string tokens based on user-generated input received via the graphical user interface; assigning a visual distinction to the corresponding ranking priority of each of the plurality of string tokens; accessing a second version of the document; identifying changed string tokens by comparing the second version with the first version of the document; retrieving a corresponding ranking priority for each of the changed string tokens in the contract dictionary; highlighting each of the changed string tokens with the visual distinction corresponding to the ranking priority in the graphical user interface; and displaying each of the highlighted changed string tokens with the visual distinction and the second version of the document in the graphical user interface.
</claims>
</document>
