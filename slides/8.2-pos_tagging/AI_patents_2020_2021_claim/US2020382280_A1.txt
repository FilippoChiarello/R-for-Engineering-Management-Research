<document>

<filing_date>
2019-05-29
</filing_date>

<publication_date>
2020-12-03
</publication_date>

<priority_date>
2019-05-29
</priority_date>

<ipc_classes>
G06F16/18,G06F16/182,G06F16/22,G06Q20/38,H04L9/06
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
JAYACHANDRAN, PRAVEEN
</inventors>

<docdb_family_id>
73551480
</docdb_family_id>

<title>
COMMITTING DATA TO BLOCKCHAIN BASED ON APPROXIMATE HASH VERIFICATION
</title>

<abstract>
An example operation may include one or more of receiving a data block for storage on a blockchain from an orderer node, the data block comprising a full-step hash of a storage request and a reduced-step hash of the storage request, performing an approximate hash verification on the data block based on the reduced-step hash of the storage request included in the data block, and in response to a success of the approximate hash verification, committing the data block among a hash-linked chain of data blocks stored within a distributed ledger of a blockchain.
</abstract>

<claims>
1. A computing system comprising: a network interface configured to receive a data block for storage on a blockchain from an orderer node, where the data block comprises a full-step hash of a storage request and a reduced-step hash of the storage request; and a processor configured to perform an approximate hash verification on the data block based on the reduced-step hash of the storage request included in the data block, and in response to a success of the approximate hash verification, commit the data block to a hash-linked chain of data blocks stored within a distributed ledger of a blockchain.
2. The computing system of claim 1, wherein the full-step hash of the storage request is generated by application of a function a first predetermined number of times and the reduced-step hash of the storage request is generated by application of the function a second predetermined number of times that is less than the first predetermined number of times.
3. The computing system of claim 1, wherein the storage request is stored within a Merkle tree data structure of the data block.
4. The computing system of claim 1, wherein the processor is further configured to determine whether to perform a full-step hash verification or the approximate hash verification based on a random protocol.
5. The computing system of claim 1, wherein the approximate hash verification comprises generation of the reduced-step hash of the storage request for verification without generation of the full-step hash of the storage request.
6. The computing system of claim 1, wherein the processor is further configure to, in response to a failure of the approximate hash verification, commit the data block within the hash-linked chain of data blocks stored within a distributed ledger of a blockchain with an indicator that the storage request failed.
7. The computing system of claim 1, wherein the processor is configured to store the approximate hash verification in the data block of the hash-linked chain of blocks and store a file included in the storage proposal within an off-chain storage.
8. A method comprising: receiving a data block for storage on a blockchain from an orderer node, the data block comprising a full-step hash of a storage request and a reduced-step hash of the storage request; performing an approximate hash verification on the data block based on the reduced-step hash of the storage request included in the data block; and in response to a success of the approximate hash verification, committing the data block among a hash-linked chain of data blocks stored within a distributed ledger of a blockchain.
9. The method of claim 8, wherein the full-step hash of the storage request is generated by application of a function a first predetermined number of times and the reduced-step hash of the storage request is generated by application of the function a second predetermined number of times that is less than the first predetermined number of times.
10. The method of claim 8, wherein the storage request is stored within a Merkle tree data structure of the data block.
11. The method of claim 8, further comprising determining whether to perform a full-step hash verification or the approximate hash verification based on a random protocol.
12. The method of claim 8, wherein the approximate hash verification comprises generating the reduced-step hash of the storage request for verification without generating the full-step hash of the storage request.
13. The method of claim 8, further comprising in response to a failure of the approximate hash verification, committing the data block to the hash-linked chain of data blocks stored within a distributed ledger of a blockchain with an indicator that the storage request failed.
14. The method of claim 8, wherein the committing comprises storing the approximate hash verification in the data block of the hash-linked chain of blocks and storing a file included in the storage proposal within an off-chain storage.
15. A non-transitory computer readable medium comprising instructions, that when read by a processor, cause the processor to perform a method comprising: receiving a data block for storage on a blockchain from an orderer node, the data block comprising a full-step hash of a storage request and a reduced-step hash of the storage request; performing an approximate hash verification on the data block based on the reduced-step hash of the storage request included in the data block; and in response to a success of the approximate hash verification, committing the data block among a hash-linked chain of data blocks stored within a distributed ledger of a blockchain.
16. A computing system comprising: a processor configured to receive reduced-step hashes and full-step hashes of a plurality of storage requests from a plurality of client applications, respectively, and arrange the reduced-step hashes within a data block based on time information; and a network interface configured to transmit the data block with the ordered reduced-step hashes to a plurality of blockchain peer nodes for inclusion within a blockchain, wherein the full-step hash of a storage request is generated by application of a function a first predetermined number of times and a reduced-step hash of the storage request is generated by application of the function a second predetermined number of times that is less than the first predetermined number of times.
17. The computing system of claim 16, wherein the function comprises a non-linear function that is applied to content within the storage request.
18. The computing system of claim 16, wherein a length of a data value created by the full-step hash of the storage request is equal to a length of a data value created by the reduced-step hash of the storage request.
19. The computing system of claim 16, wherein the processor is configured to arrange the reduced-step hashes within the data block in a chronological order of in which they were received.
20. The computing system of claim 16, wherein the processor is further configured to store the full-step hashes with the reduced-step hashes in the data block.
21. A method comprising: receiving reduced-step hashes and full-step hashes of a plurality of storage requests from a plurality of client applications, respectively; arranging the reduced-step hashes within a data block based on timing information; and transmitting the data block with the ordered reduced-step hashes to a plurality of blockchain peer nodes for inclusion within a blockchain, wherein the full-step hash of a storage request is generated by application of a function a first predetermined number of times and a reduced-step hash of the storage request is generated by application of the function a second predetermined number of times that is less than the first predetermined number of times.
22. The method of claim 21, wherein the function comprises a non-linear function that is applied to content within the storage request.
23. The method of claim 21, wherein a length of a data value created by the full-step hash of the storage request is equal to a length of a data value created by the reduced-step hash of the storage request.
24. The method of claim 21, wherein the arranging comprises arranging the reduced-step hashes within the data block in a chronological order of in which they were received.
25. The method of claim 21, wherein the method further comprises storing the full-step hashes with the reduced-step hashes in the data block.
</claims>
</document>
