<document>

<filing_date>
2019-06-28
</filing_date>

<publication_date>
2020-12-31
</publication_date>

<priority_date>
2019-06-28
</priority_date>

<ipc_classes>
H04L12/58,H04L12/863
</ipc_classes>

<assignee>
ORACLE INTERNATIONAL CORPORATION
</assignee>

<inventors>
ZHU, MING
KALLANAGOUDAR, Mahesh
</inventors>

<docdb_family_id>
74044204
</docdb_family_id>

<title>
METHOD AND SYSTEM FOR TO IMPLEMENT MESSAGING FOR CLUSTER ELECTIONS
</title>

<abstract>
Described is a system, method, and computer program product for performing elections in a database cluster, where cluster topology representations are distributed across the cluster nodes using a prioritized messaging protocol. The cluster topology representations may be implemented as connectivity bit-vector that provide information that identifies which nodes in the cluster are able to communicatively connect with other nodes.
</abstract>

<claims>
1. A computer-implemented method, comprising: configuring a messaging infrastructure in a database cluster having a first messaging queue and a second messaging queue, wherein the first messaging queue has a higher messaging priority than the second message queue; sending connectivity information between nodes in a database cluster using the first messaging queue having the higher messaging priority than the second message queue; performing a master node election to elect a master node based at least upon the connectivity information that was sent using the first messaging queue having the higher messaging priority than the second message queue, wherein the master node is within a first sub-cluster; and performing a cluster reconfiguration that evicts one or more nodes from a second sub-cluster.
2. The method of claim 1, wherein the connectivity information comprises a bit vector comprising a bit that represents a connection between two nodes.
3. The method of claim 2, wherein the a bit vector comprises a columnar structure where a row corresponds to a given node, and the row corresponds to one or more columns that include a bit value that represents the connection between the given node and one or more other nodes.
4. The method of claim 1, wherein the messaging infrastructure in the database cluster comprises an application-level interprocess communications mechanism.
5. The method of claim 1, wherein the first messaging queue corresponds to lower transmission latency from communication channels as compared to the second message queue.
6. The method of claim 1, wherein the first sub-cluster is selected for having more member nodes as compared to the second sub-cluster.
7. The method of claim 1, wherein a tiebreaker is employed to break a tie between the first sub-cluster and the second sub-cluster.
8. A computer program product embodied on a computer readable medium, the computer readable medium having stored thereon a sequence of instructions which, when executed by a processor, executes: configuring a messaging infrastructure in a database cluster having a first messaging queue and a second messaging queue, wherein the first messaging queue has a higher messaging priority than the second message queue; sending connectivity information between nodes in a database cluster using the first messaging queue having the higher messaging priority than the second message queue; performing a master node election to elect a master node based at least upon the connectivity information that was sent using the first messaging queue having the higher messaging priority than the second message queue, wherein the master node is within a first sub-cluster; and performing a cluster reconfiguration that evicts one or more nodes from a second sub-cluster.
9. The computer program product of claim 8, wherein the connectivity information comprises a bit vector comprising a bit that represents a connection between two nodes.
10. The computer program product of claim 9, wherein the a bit vector comprises a columnar structure where a row corresponds to a given node, and the row corresponds to one or more columns that include a bit value that represents the connection between the given node and one or more other nodes.
11. The computer program product of claim 8, wherein the messaging infrastructure in the database cluster comprises an application-level interprocess communications mechanism.
12. The computer program product of claim 8, wherein the first messaging queue corresponds to lower transmission latency from communication channels as compared to the second message queue.
13. The computer program product of claim 8, wherein the first sub-cluster is selected for having more member nodes as compared to the second sub-cluster.
14. The computer program product of claim 8, wherein a tiebreaker is employed to break a tie between the first sub-cluster and the second sub-cluster.
15. A system, comprising: a processor; a memory for holding programmable code; and wherein the programmable code includes instructions for configuring a messaging infrastructure in a database cluster having a first messaging queue and a second messaging queue, wherein the first messaging queue has a higher messaging priority than the second message queue; sending connectivity information between nodes in a database cluster using the first messaging queue having the higher messaging priority than the second message queue; performing a master node election to elect a master node based at least upon the connectivity information that was sent using the first messaging queue having the higher messaging priority than the second message queue, wherein the master node is within a first sub-cluster; and performing a cluster reconfiguration that evicts one or more nodes from a second sub-cluster.
16. The system of claim 15, wherein the connectivity information comprises a bit vector comprising a bit that represents a connection between two nodes.
17. The system of claim 16, wherein the a bit vector comprises a columnar structure where a row corresponds to a given node, and the row corresponds to one or more columns that include a bit value that represents the connection between the given node and one or more other nodes.
18. The system of claim 15, wherein the messaging infrastructure in the database cluster comprises an application-level interprocess communications mechanism.
19. The system of claim 15, wherein the first messaging queue corresponds to lower transmission latency from communication channels as compared to the second message queue.
20. The system of claim 15, wherein the first sub-cluster is selected for having more member nodes as compared to the second sub-cluster.
21. The system of claim 15, wherein a tiebreaker is employed to break a tie between the first sub-cluster and the second sub-cluster.
</claims>
</document>
