<document>

<filing_date>
2017-06-30
</filing_date>

<publication_date>
2020-04-07
</publication_date>

<priority_date>
2017-06-30
</priority_date>

<ipc_classes>
G06F21/00,G06F21/55,G06F21/56,G06N20/20,G06N3/04,G06N3/08,G06N5/00,H04L29/06
</ipc_classes>

<assignee>
SPARKCOGNITION
</assignee>

<inventors>
MCLANE, LUCAS
CAPELLMAN, JARRED
</inventors>

<docdb_family_id>
64738473
</docdb_family_id>

<title>
Automated detection of malware using trained neural network-based file classifiers and machine learning
</title>

<abstract>
Automated malware detection for application file packages using machine learning (e.g., trained neural network-based classifiers) is described. A particular method includes generating, at a first device, a first feature vector based on occurrences of character n-grams corresponding to a first subset of files of multiple files of an application file package. The method includes generating, at the first device, a second feature vector based on occurrences of attributes in a second subset of files of the multiple files. The method includes sending the first feature vector and the second feature vector from the first device to a second device as inputs to a file classifier. The method includes receiving, at the first device from the second device, classification data associated with the application file package based on the first feature vector and the second feature vector. The classification data indicates whether the application file package includes malware.
</abstract>

<claims>
1. A computing device comprising: a memory configured to store instructions; and a processor configured to execute the instructions from the memory to perform operations comprising: generating zero-skip n-gram data for a first subset of files of multiple files included in an application file package, first zero-skip n-gram data of the zero-skip n-gram data indicating occurrences of adjacent characters in printable characters representing a first file of the first subset of files; generating skip n-gram data for the first subset of files, first skip n-gram data of the skip n-gram data indicating occurrences of non-adjacent characters in the printable characters representing the first file; generating n-gram data for the first subset of files, first n-gram data of the n-gram data indicating occurrences of groups of entropy indicators in a first set of entropy indicators derived from first file entropy data for the first file, each entropy indicator of the first set of entropy indicators having a value representing entropy of a corresponding chunk of the first file; generating a first feature vector based on the zero-skip n-gram data, the skip n-gram data, and the n-gram data; generating a second feature vector based on occurrences of attributes in a second subset of files of the multiple files; sending the first feature vector and the second feature vector to a second computing device as inputs to a file classifier; and receiving, from the second computing device, classification data associated with the application file package based on the first feature vector and the second feature vector, the classification data indicating whether the application file package includes malware.
2. The computing device of claim 1, wherein the multiple files include an executable file and at least one non-executable file.
3. The computing device of claim 2, wherein the first subset of files includes at least the executable file and the second subset of files includes at least the non-executable file.
4. The computing device of claim 1, wherein the operations further comprise initiating performance of one or more malware protection operations based on the classification data indicating that the application file package includes malware.
5. The computing device of claim 1, wherein the application file package corresponds to a mobile device application.
6. The computing device of claim 1, wherein generating the first feature vector comprises applying a hash function to the skip n-gram data to generate a reduced skip n-gram representation, and wherein the first feature vector includes a Boolean vector indicating occurrences of skip n-grams in the reduced skip n-gram representation.
7. The computing device of claim 1, wherein the attributes include requests for system permissions indicated by at least the second subset of files.
8. The computing device of claim 7, wherein the second feature vector includes a Boolean vector indicating whether each system permission of a particular group of system permissions is requested by at least the second subset of files.
9. The computing device of claim 1, wherein the attributes include references to application programming interface (API) classes associated with an operating system of executed by the processor, the references to the API classes indicated by at least the second subset of files.
10. The computing device of claim 1, wherein the file classifier corresponds to a feed-forward neural network.
11. The computing device of claim 10, wherein the feed-forward neural network comprises a deep neural network that includes at least one hidden layer.
12. The computing device of claim 1, further comprising: a transceiver coupled to the processor; and an antenna coupled to the transceiver, wherein the transceiver and the antenna are configured to receive the classification data from the second computing device.
13. A method comprising: generating, at a first device, zero-skip n-gram data for a first subset of files of multiple files included in an application file package, first zero-skip n-gram data of the zero-skip n-gram data indicating occurrences of adjacent characters in printable characters representing a first file of the first subset of files; generating, at the first device, skip n-gram data for the first subset of files, first skip n-gram data of the skip n-gram data indicating occurrences of non-adjacent characters in the printable characters representing the first file; generating, at the first device, n-gram data for the first subset of files, first n-gram data of the n-gram data indicating occurrences of groups of entropy indicators in a first set of entropy indicators derived from first file entropy data for the first file, each entropy indicator of the first set of entropy indicators having a value representing entropy of a corresponding chunk of the first file; generating, at the first device, a first feature vector based on the zero-skip n-gram data, the skip n-gram data, and the n-gram data; generating, at the first device, a second feature vector based on occurrences of attributes in a second subset of files of the multiple files; sending the first feature vector and the second feature vector from the first device to a second device as inputs to a file classifier; and receiving, at the first device from the second device, classification data associated with the application file package based on the first feature vector and the second feature vector, the classification data indicating whether the application file package includes malware.
14. The method of claim 13, further comprising: processing the first subset of files to generate printable characters representing the first subset of files; and processing the printable characters to generate the zero-skip n-gram data and the skip n-gram data.
15. The method of claim 13, further comprising applying a hash function to the zero-skip n-gram data to generate a reduced zero-skip n-gram representation, wherein the first feature vector includes a Boolean vector indicating occurrences of zero-skip n-grams in the reduced zero-skip n-gram representation.
16. The method of claim 13, wherein the zero-skip n-gram data corresponds to pairs of adjacent characters in printable characters representing the first subset of files.
17. The method of claim 13, wherein the skip n-gram data corresponds to groups of more than two printable characters representing the first subset of files.
18. The method of claim 13, further comprising processing the first subset of files to generate a sequence of entropy indicators, each entropy indicator of the sequence of entropy indicators corresponding to a chunk of the first subset of files.
19. The method of claim 18, further comprising: generating a third feature vector based on the sequence of entropy indicators; and sending the third feature vector from the first device to the second device, wherein the classification data is based further on the third feature vector.
20. The method of claim 13, further comprising analyzing the second subset of files to determine requests for system permissions associated with the first device, wherein the second feature vector includes a Boolean vector indicating whether each system permission of a group of system permissions is indicated by the second subset of files.
21. The method of claim 13, further comprising analyzing the second subset of files to determine references to application programming interface (API) classes in the second subset of files, wherein the second feature vector includes a Boolean vector indicating whether each API class of a group of API classes is referenced by the second subset of files.
22. A computer-readable storage device storing instructions that, when executed, cause a computer to perform operations comprising: generating zero-skip n-gram data for a first subset of files of multiple files included in an application file package, first zero-skip n-gram data of the zero-skip n-gram data indicating occurrences of adjacent characters in printable characters representing a first file of the first subset of files; generating skip n-gram data for the first subset of files, first skip n-gram data of the skip n-gram data indicating occurrences of non-adjacent characters in the printable characters representing the first file; generating n-gram data for the first subset of files, first n-gram data of the n-gram data indicating occurrences of groups of entropy indicators in a first set of entropy indicators derived from first file entropy data for the first file, each entropy indicator of the first set of entropy indicators having a value representing entropy of a corresponding chunk of the first file; generating a first feature vector based on the zero-skip n-gram data, the skip n-gram data, and the n-gram data; generating a second feature vector is based on occurrences of attributes in a second subset of files of the multiple files; sending the first feature vector and the second feature vector to a computing device as inputs to a file classifier; and receiving, from the computing device, classification data associated with the application file package based on the first feature vector and the second feature vector, the classification data indicating whether the application file package includes malware.
23. The computer-readable storage device of claim 22, wherein the first subset of files includes a binary file, and the operations further comprise: generating a plurality of printable characters representing the binary file; and generating the zero-skip n-gram data based on occurrences of pairs of characters in the printable characters and a hashing function.
24. The computer-readable storage device of claim 23, wherein generating the plurality of printable characters representing the binary file includes converting at least a portion of the binary file to American Standard Code for Information Interchange (ASCII) characters.
25. The computer-readable storage device of claim 22, wherein the attributes comprise requests for system permissions, wherein the second feature vector includes a Boolean vector indicating occurrences of requests for a particular group of system permissions, and wherein the operations further comprise: generating a third feature vector comprising a Boolean vector indicating whether each application programming interface (API) class of a group of API classes is referenced by the second subset of files; and concatenating the second feature vector and the third feature vector to the first feature vector prior to sending the first feature vector, the second feature vector, and the third feature vector to the computing device, wherein the classification data is based on the first feature vector, the second feature vector, and the third feature vector.
</claims>
</document>
