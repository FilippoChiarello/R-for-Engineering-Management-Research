<document>

<filing_date>
2018-11-14
</filing_date>

<publication_date>
2020-11-24
</publication_date>

<priority_date>
2016-10-31
</priority_date>

<ipc_classes>
G06F11/36
</ipc_classes>

<assignee>
CISCO TECHNOLOGY
</assignee>

<inventors>
KILMAN, ANTHONY
TERBUSH, RYAN NICHOLAS
LI, HAOJUN
</inventors>

<docdb_family_id>
62022370
</docdb_family_id>

<title>
Mid-method instrumentation
</title>

<abstract>
A system for preforming mid-method instrumentation includes a processor; a memory; and one or more modules stored in the memory and executable by a processor to perform operations including: obtain bytecode representation of an application; identify a method in the bytecode including a beginning and an end of the method; identify lines of bytecode between the beginning and the end of the identified method; identify one or more of the lines of bytecode between the beginning and the end of the method to instrument with one or more interceptors; during runtime of the application, instrument the identified one or more of the lines of bytecode between the beginning and the end of the identified method by apply the one or more interceptors; and during the runtime of the application, receive information associated with the instrumented one or more lines of bytecode between the beginning and the end of the method.
</abstract>

<claims>
1. A system for performing mid-method instrumentation to monitor information from middle of a method, the system including: a processor; a memory; and one or more modules stored in the memory and executable by the processor to perform operations including: obtain bytecode representation of an application; identify a method in the bytecode representation including a beginning and an end of the method; identify a middle of the identified method, the middle of the method including one or more lines of bytecode between the beginning and the end of the identified method excluding the beginning and the end of the identified method; identify a loop in the middle of the identified method where local variables or parameters are created or used, wherein the local variables and parameters are only retained during operation of the identified method; execute the application; and during runtime of the application, instrument, at instrumentation points based on a predetermined set of rules, the identified one or more lines of bytecode including the one or more lines of bytecode in the identified loop by applying one or more interceptors, and receive information associated with the instrumented one or more lines of bytecode in the middle of the identified method, wherein the received information includes a flow map for a business transaction.
2. The system of claim 1, wherein the one or more modules are executable to perform operations including: during the runtime of the application, detect an error or exception associated with the identified method in the application; and generate a report of the detected error or exception to include a stack trace associated with the detected error or exception and the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method.
3. The system of claim 2, wherein the one or more modules are executable to perform operations including: correlate the detected error or exception with the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method.
4. The system of claim 1, wherein the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method includes the local variables or parameters.
5. The system of claim 4, wherein the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method includes changes to the local variables or parameters.
6. The system of claim 4, wherein the one or more modules are executable to perform operations including: target an interceptor at a specific read or write of the local variables or parameters.
7. The system of claim 1, wherein the one or more modules are executable to perform operations including: target an interceptor at a specific invocation of the identified method.
8. The system of claim 1, wherein the one or more modules are executable to perform operations including: target an interceptor at a specific invocation of the identified loop in the identified method.
9. The system of claim 1, wherein the one or more modules are executable to perform operations including: target the interceptors to define a business transaction to begin or end at a location in the middle of the identified method.
10. The system of claim 1, wherein the one or more modules are executable to perform operations including: apply a mid-method identifier to instrument the one or more lines of bytecode in the middle of the identified method, wherein the mid-method identifier includes a class name, a method name, and a location in the middle of the identified method.
11. The system of claim 1, wherein the one or more modules are executable to perform operations including: provide a user interface that displays an interactive dashboard of the application; and display, through the user interface, a generated report.
12. A method for performing mid-method instrumentation to monitor information from middle of a method in an application, including: obtaining bytecode representation of an application; identifying a method in the bytecode representation including a beginning and an end of the method; identifying a middle of the identified method, the middle of the method including one or more lines of bytecode between the beginning and the end of the identified method excluding the beginning and the end of the identified method; identifying a loop in the middle of the identified method where local variables or parameters are created or used, wherein the local variables and parameters are only retained during operation of the identified method; executing the application; and during runtime of the application, instrumenting, at instrumentation points based on a predetermined set of rules, the identified one or more lines of bytecode including the one or more lines of bytecode in the identified loop by applying one or more interceptors, and receiving information associated with the instrumented one or more lines of bytecode in the middle of the identified method, wherein the received information includes a flow map for a business transaction.
13. The method of claim 12, including: during the runtime of the application, detecting an error or exception associated with the identified method in the application; and generating a report of the detected error or exception to include a stack trace associated with the detected error or exception and the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method.
14. The method of claim 13, including: correlating the detected error or exception with the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method.
15. The method of claim 12, wherein the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method includes the local variables or parameters.
16. The method of claim 15, wherein the received information associated with the instrumented one or more lines of bytecode in the middle of the identified method includes changes to the local variables or parameters.
17. The method of claim 16, including: targeting an interceptor at a specific read or write of the local variables or parameters.
18. The method of claim 12, including: targeting an interceptor at a specific invocation of the identified method.
19. The method of claim 12, including: applying a mid-method identifier to instrument the one or more lines of bytecode in the middle of the identified method to be instrumented, wherein the mid-method identifier includes a class name, a method name, and a location in the middle of the identified method.
20. A non-transitory computer readable medium embodying instructions when executed by a processor to cause operations to be performed for mid-method instrumenting to monitor information from middle of a method, the operations including: obtaining bytecode representation of an application; identifying a method in the bytecode representation including a beginning and an end of the method; identifying a middle of the identified method, the middle of the method including one or more lines of bytecode between the beginning and the end of the identified method excluding the beginning and the end of the identified method; identifying a loop in the middle of the identified method where local variables or parameters are created or used, wherein the local variables and parameters are only retained during operation of the identified method; executing the application; and during runtime of the application, instrumenting, at instrumentation points based on a predetermined set of rules, the identified one or more lines of bytecode including the one or more lines of bytecode in the identified loop by applying one or more interceptors, and receiving information associated with the instrumented one or more lines of bytecode in the middle of the identified method, wherein the received information includes a flow map for a business transaction.
</claims>
</document>
