<document>

<filing_date>
2019-08-14
</filing_date>

<publication_date>
2020-03-12
</publication_date>

<priority_date>
2014-09-30
</priority_date>

<ipc_classes>
G06F11/14,G06F16/174,G06F16/178,G06F16/18,G06F16/182,G06F16/23,G06F16/27,G06F21/55,G06F21/60,G06N20/00,H04L12/911,H04L29/08
</ipc_classes>

<assignee>
CODE 42 SOFTWARE
</assignee>

<inventors>
DORNQUAST, MATTHEW
ARMSTRONG, BRAD
BISPALA, BRIAN
ALLISON, DAMON
SCORCIO, MARSHALL
PARKER, CHRISTOPHER
LONERGAN, RORY
LINDQUIST, PETER JOHN
</inventors>

<docdb_family_id>
53267912
</docdb_family_id>

<title>
DEDUPLICATED DATA DISTRIBUTION TECHNIQUES
</title>

<abstract>
In connection with a data distribution architecture, client-side "deduplication" techniques may be utilized for data transfers occurring among various file system nodes. In some examples, these deduplication techniques involve fingerprinting file system elements that are being shared and transferred, and dividing each file into separate units referred to as "blocks" or "chunks." These separate units may be used for independently rebuilding a file from local and remote collections, storage locations, or sources. The deduplication techniques may be applied to data transfers to prevent unnecessary data transfers, and to reduce the amount of bandwidth, processing power, and memory used to synchronize and transfer data among the file system nodes. The described deduplication concepts may also be applied for purposes of efficient file replication, data transfers, and file system events occurring within and among networks and file system nodes.
</abstract>

<claims>
1. (canceled)
2. A method for constructing a target object to a computing node using a storage system that is configured to store partitions of the target object in one or more data components, the method comprising: retrieving identifiers of the one or more data components; identifying, based on the received identifiers, a first data component of the one or more data components that is stored locally on the computing node; transferring a subset of the one or more data components to the computing node, the subset of the one or more data components excluding the first data component; and causing the computing node to construct the target object using the stored first data component and the transferred subset of the one or more data components.
3. The method of claim 1, further comprising retrieving the identifiers in response to a request to: distribute the target object to the computing node; or restore the target object to the computing node.
4. The method of claim 2, wherein the target object comprises a collection of one or more file system elements.
5. The method of claim 2, wherein the received identifiers comprise hash values that are indicative of the data contents of the one or more data components.
6. The method of claim 5, further comprising determining that the subset of the one or more data components are not stored locally on the computing node by using the hash values to search an index of data components that are stored locally on the computing system.
7. The method of claim 6, wherein the index comprises a partial index of data components that are stored locally on the computing system and using the hash values to search the index comprises using a truncated version of the hash values to search the index.
8. The method of claim 2, further comprising determining that the subset of the one or more data components are not stored locally on the computing node by searching an index of data components that are stored locally on the computing system based on the received identifiers and a fingerprint of the data components.
9. The method of claim 2, wherein the storage system comprises a network-based storage system and transferring the subset of the one or more data components comprises causing at least one storage node of the network-based storage system to transfer the subset of the one or more data components to the computing node using a data communication network.
10. The method of claim 2, wherein causing the computing node to generate the target object using the stored first data component and the transferred subset of the one or more data components comprises cause the computing node to: retrieve the first data component from a local data store; and write the first data component and the transferred subset of the one or more data components to a memory of the first computing system.
11. A system for constructing a target object to a computing node using a storage system that is configured to store partitions of the target object in one or more data components, comprising: at least one processor; and memory including instructions that, when executed by e at least one processor, cause the at least one processor to: retrieve identifiers of the one or more data components; identify, based on the received identifiers, a first data component of the one or more data components that is stored locally on the computing node; transfer a subset of the one or more data components to the computing node, the subset of the one or more data components excluding the first data component; and cause the computing node to generate the target object using the stored first data component and the transferred subset of the one or more data components.
12. The system of claim 11, the target object comprises a collection or one or more file system elements.
13. The system of claim 11, wherein the received identifiers comprise hash values that are indicative of the data contents of the one or more data components.
14. The system of claim 13, wherein the instructions further cause the processor to: determine that the subset of the one or more data components are not stored locally on the computing node by using the hash values to search an index of data components that are stored locally on the computing system.
15. The method of claim 14, wherein the index comprises a partial index of data components that are stored locally on the computing system and using the hash values to search the index comprises using a truncated version of the hash values to search the index.
16. The system of claim 11, wherein the instructions further cause the processor to: determine that the subset of the one or more data components are not stored locally on the computing node by searching an index of data components that are stored locally on the computing system based on the received identifiers and a fingerprint of the data components.
17. The system of claim 11, wherein the storage system comprises a network-based storage system and the instructions cause the processor to transfer the subset of the one or more data components by causing at least one storage node of the network-based storage system to transfer the subset of the one or more data components to the computing node using a data communication network.
18. A non-transitory computer-readable storage medium storing a set of instructions that, when executed by at least one processor of a machine, cause the machine to perform operations comprising: retrieving identifiers of the one or more data components; identifying, based on the received identifiers, a first data component of the one or more data components that is stored locally on the computing node; transferring a subset of the one or more data components to the computing node, the subset of the one or more data components excluding the first data component; and causing the computing node to construct the target object using the stored first data component and the transferred subset of the one or more data components.
19. The non-transitory computer-readable storage medium of claim 18, wherein the operations further comprise: determining that the subset of the one or more data components are not stored locally on the computing node by searching an index of data components that are stored locally on the computing system based on the received identifiers and a fingerprint of the data components.
20. The non-transitory computer-readable storage medium of claim 18, wherein: the received identifiers comprise hash values that are indicative of the data contents of the one or more data components, and the operations further comprise determining that the subset of the one or more data components are not stored locally on the computing node by using the hash values to search an index of data components that are stored locally on the computing system.
</claims>
</document>
