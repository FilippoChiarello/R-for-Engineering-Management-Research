<document>

<filing_date>
2015-04-29
</filing_date>

<publication_date>
2020-08-05
</publication_date>

<priority_date>
2014-05-08
</priority_date>

<ipc_classes>
G06Q10/10,G07C13/00,H04K3/00,H04L12/16,H04L12/18,H04L12/24,H04L12/26,H04L29/06,H04L29/08,H04W12/12
</ipc_classes>

<assignee>
CISCO TECHNOLOGY
</assignee>

<inventors>
CRUZ MOTA, JAVIER
DI PIETRO, ANDREA
VASSEUR, JEAN-PHILIPPE
</inventors>

<docdb_family_id>
53175173
</docdb_family_id>

<title>
DESIGNATING A VOTING CLASSIFIER USING DISTRIBUTED LEARNING MACHINES
</title>

<abstract>
In one embodiment, possible voting nodes in a network are identified. The possible voting nodes each execute a classifier that is configured to select a label from among a plurality of labels based on a set of input features. A set of one or more eligible voting nodes is selected from among the possible voting nodes based on a network policy. Voting requests are then provided to the one or more eligible voting nodes that cause the one or more eligible voting nodes to select labels from among the plurality of labels. Votes are received from the eligible voting nodes that include the selected labels and are used to determine a voting result.
</abstract>

<claims>
1. A method, comprising: identifying (1110) possible voting nodes in a computer network (100), wherein each of the possible voting nodes executes a classifier configured to detect network attacks, the classifier being configured to select a label from among a plurality of labels based on a set of input features; selecting (1115), from among the possible voting nodes, a set of one or more eligible voting nodes based on a network policy; providing (1120), by a device, voting requests (902) to the one or more eligible voting nodes that cause the one or more eligible voting nodes to select labels from the plurality of labels; receiving (1125), at the device, votes (904) from the one or more eligible voting nodes that include the selected labels; and determining (1130) a voting result based on the received votes.
2. The method as in claim 1, wherein the possible voting nodes are identified by:
sending one or more voting availability requests (602), wherein a particular voting availability request specifies the plurality of labels.
3. The method as in claim 2, wherein the one or more voting availability requests (602) are sent as multicast messages.
4. The method as in claim 2, wherein the particular voting availability request (602) specifies a set of one or more target nodes to be classified.
5. The method as in claim 1, wherein the input features of the classifier executed by one of the possible voting nodes differ from the input features of the classifier executed by a different possible voting node.
6. The method as in claim 1, wherein the network policy specifies a threshold number of possible voting nodes in a particular administrative domain that may be included in the set of one or more eligible voting nodes.
7. The method as in claim 1, wherein the network policy limits the set of input features used by a particular node in the set of one or more eligible voting nodes.
8. The method as in claim 1, wherein the voting requests (902) include values for the set of input features.
9. The method as in claim 1, wherein the received votes (904) include confidence values associated with the selected labels, and wherein the voting result is determined by weighting the votes using the confidence values.
10. The method as in claim 1, wherein the type of classifier is configured to determine whether a denial of service, DoS, attack is present in the network (100).
11. The method as in claim 1, wherein the voting requests (902) include identifiers for the set of input features that cause the one or more eligible voting nodes to retrieve values for the set of input features and to use the retrieved values to generate the labels.
12. An apparatus (200), comprising: one or more network interfaces (210) to communicate with a network (100); a processor (220) coupled to the network interfaces (210) and adapted to execute one or more processes; and a memory (240) configured to store a process (248) executable by the processor, the process when executed operable to perform a method according to any preceding claim.
13. A tangible, non-transitory, computer-readable media having software encoded thereon, the software when executed by a processor operable to perform a method according to any of claims 1 to 11.
</claims>
</document>
