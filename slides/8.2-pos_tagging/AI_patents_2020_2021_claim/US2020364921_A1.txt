<document>

<filing_date>
2020-05-29
</filing_date>

<publication_date>
2020-11-19
</publication_date>

<priority_date>
2017-04-17
</priority_date>

<ipc_classes>
G06F9/48,G06T15/00
</ipc_classes>

<assignee>
INTEL CORPORATION
</assignee>

<inventors>
APPU, ABHISHEK R.
BOLES, JEFFERY S.
BURKE, DEVAN
FEIT, JOHN H.
GRAJEWSKI, SLAWOMIR
HOEKSTRA, ERIC J.
KENNEDY, JONATHAN
KOKER, ALTUG
LAKE ADAM T.
LIKTOR, GABOR
MAIYURAN, SUBRAMANIAM
OULD-AHMED-VALL, ELMOUSTAPHA
RAMADOSS, MURALI
RAY, JOYDEEP
SURTI, PRASOONKUMAR
VAIDYANATHAN, KARTHIK
VEMBU, BALAJI
</inventors>

<docdb_family_id>
62152293
</docdb_family_id>

<title>
ORDER INDEPENDENT ASYNCHRONOUS COMPUTE AND STREAMING FOR GRAPHICS
</title>

<abstract>
An embodiment of an electronic processing system may include an application processor, persistent storage media communicatively coupled to the application processor, and a graphics subsystem communicatively coupled to the application processor. The system may include one or more of a draw call re-orderer communicatively coupled to the application processor and the graphics subsystem to re-order two or more draw calls, a workload re-orderer communicatively coupled to the application processor and the graphics subsystem to re-order two or more work items in an order independent mode, a queue primitive included in at least one of the two or more draw calls to define a producer stage and a consumer stage, and an order-independent executor communicatively coupled to the application processor and the graphics subsystem to provide tile-based order independent execution of a compute stage. Other embodiments are disclosed and claimed.
</abstract>

<claims>
1. (canceled)
2. A computing system for graphics data processing, the computing system comprising: one or more processors; and a memory coupled to the one or more processors, the memory including executable program instructions, which when executed by the host processor, cause the computing system to: determine an order dependency between two or more draw calls; re-order the two or more draw calls based on the determined order dependency; re-order two or more work items in an order independent mode, wherein the order independent mode is made in response to a guarantee of memory dependency, when the guarantee is made for a particular phase of rendering in a first mode of operation and for an entire application in a different second mode of operation; define a producer stage and a consumer stage; and provide tile-based order independent execution of a compute stage.
3. The system of claim 2, wherein the re-order of two or more work items includes operations to: determine a work split for the two or more work items, and re-order the two or more work items based on the determined work split.
4. The system of claim 2, wherein the executable program instructions, when executed by the computing system, cause the computing system to: alternate execution of the producer stage and the consumer stage in accordance with the queue primitive.
5. The system of claim 2, wherein the provision of tile-based order independent execution includes operations to: dispatch work asynchronously on a tile basis to a render context and a compute context.
6. A semiconductor apparatus for graphics data processing, the semiconductor apparatus comprising: one or more substrates; and logic coupled to the one or more substrates, wherein the logic is implemented at least partly in one or more of configurable logic or fixed-functionality hardware logic, the logic coupled to the one or more substrates to: determine an order dependency between two or more draw calls; re-order the two or more draw calls based on the determined order dependency; and re-order two or more work items in an order independent mode, wherein the order independent mode is made in response to a guarantee of memory dependency, when the guarantee is made for a particular phase of rendering in a first mode of operation and for an entire application in a different second mode of operation.
7. The apparatus of claim 6, wherein the determination of the order dependency further includes operations to determine a resource requirement and data address range for the two or more draw calls.
8. The apparatus of claim 6, wherein the re-order of the two or more draw calls further includes operations to re-order the two or more draw calls to increase a utilization of parallel execution.
9. The apparatus of claim 7, wherein the re-order of the two or more draw calls further includes operations to determine that no data dependency is violated when the two or more draw calls are re-ordered.
10. The apparatus of claim 6, wherein the logic coupled to the one or more substrates is further to: define a producer stage and a consumer stage after performing the re-order of the two or more draw calls.
11. The apparatus of claim 6, wherein the logic coupled to the one or more substrates is further to: provide tile-based order independent execution of a compute stage.
12. A method of re-ordering draw calls, comprising: determining an order dependency between two or more draw calls; and re-ordering the two or more draw calls based on the determined order dependency; re-ordering two or more work items in an order independent mode, wherein the order independent mode is made in response to a guarantee of memory dependency, when the guarantee is made for a particular phase of rendering in a first mode of operation and for an entire application in a different second mode of operation.
13. The method of claim 12, further comprising: determining a resource requirement and data address range for the two or more draw calls.
14. The method of claim 12, further comprising: re-ordering the two or more draw calls to increase a utilization of parallel execution.
15. The method of claim 14, further comprising: determining that no data dependency is violated when the two or more draw calls are re-ordered.
16. The method of claim 12, further comprising: defining a producer stage and a consumer stage with a queue primitive after performing the re-order of the two or more draw calls.
17. The method of claim 12, further comprising: providing tile-based order independent execution of a compute stage.
18. At least one non-transitory computer readable medium, comprising a set of instructions, which when executed by a computing device cause the computing device to: determine an order dependency between two or more draw calls; and re-order the two or more draw calls based on the determined order dependency; and re-order two or more work items in an order independent mode, wherein the order independent mode is made in response to a guarantee of memory dependency, when the guarantee is made for a particular phase of rendering in a first mode of operation and for an entire application in a different second mode of operation.
19. The at least one non-transitory computer readable medium of claim 18, comprising a further set of instructions, which when executed by a computing device cause the computing device to: determine a resource requirement and data address range for the two or more draw calls.
20. The at least one non-transitory computer readable medium of claim 18, comprising a further set of instructions, which when executed by a computing device cause the computing device to: re-order the two or more draw calls to increase a utilization of parallel execution.
21. The at least one non-transitory computer readable medium of claim 20, comprising a further set of instructions, which when executed by a computing device cause the computing device to: determine that no data dependency is violated when the two or more draw calls are re-ordered.
22. The at least one non-transitory computer readable medium of claim 18, comprising a further set of instructions, which when executed by a computing device cause the computing device to: define a producer stage and a consumer stage with a queue primitive after performing the re-order of the two or more draw calls.
</claims>
</document>
