<document>

<filing_date>
2017-10-27
</filing_date>

<publication_date>
2020-09-22
</publication_date>

<priority_date>
2017-04-25
</priority_date>

<ipc_classes>
G06F16/951,G06F17/30,G06F9/445,G06F9/455,G06F9/50,G06F9/54,G06N20/00,G06N99/00,H04L29/06
</ipc_classes>

<assignee>
PETUUM
</assignee>

<inventors>
YU, WEIREN
DAI, WEI
QIAO, AURICK
HO, QIRONG
Xing, Eric P
</inventors>

<docdb_family_id>
63853890
</docdb_family_id>

<title>
Operating system for distributed enterprise artificial intelligence programs on data centers and the clouds
</title>

<abstract>
A system including a master machine and a plurality of worker machines is disclosed. The master machine includes, for example, an API server configured to receive a job description; a resource allocation module configured to determine a number of virtual machines required to perform a job based on the job description; a container scheduling module configured to create a container containing the number of virtual machines required to perform the job, wherein at least two of the virtual machines in the container resides on different worker machines, and wherein each of the virtual machines is configured to run a same application to perform the job.
</abstract>

<claims>
1. A system comprising a master machine and a plurality of worker machines, the master machine comprising: an API server configured to receive a job description; an application cluster comprising one or more application programs executable on a plurality of virtual machines on the worker machines, wherein the one or more application programs comprising one or more Poseidon application programs, one or more medical application programs, and one or more 3rd party application programs; a resource allocation module configured to determine a number of the virtual machines required to perform a job based on the job description, wherein the job description corresponds to at least one of uploading the application programs, uploading a dataset, and running the application programs on the worker machines; a container scheduling module configured to create a distributed container containing the number of virtual machines required to perform the job, wherein the distributed container is created by the container scheduling module to run the Poseidon application programs, wherein the distributed container is created on the worker machines to run the medical application programs, wherein the 3rd party application programs are divided between the virtual machines of the distributed container on the worker machines; wherein at least two of the virtual machines in the container resides on different worker machines, and wherein each of the virtual machines is configured to run the same application programs to perform the job; a database module configured to store the job descriptions and one or more datasets, wherein the API server stores a location of the datasets in the database module; and a data tracking module configured to verify the location of the one or more datasets and track the location of the one or more datasets stored in the database module.
2. The system of claim 1, wherein the master machine further comprises an event server configured to broadcast the job description to the container scheduling module and the resource allocation module.
3. The system of claim 1, wherein the master machine further comprises a web server configured to receive a job description from a web interface.
4. The system of claim 1, wherein each of the worker machines comprises an MLEngine configured for running a machine learning program.
5. The system of claim 1, wherein the master machine further comprises an authentication module configured for authenticating users.
6. The system of claim 1, wherein at least one of the work machines hosts at least two virtual machines belonging to different containers.
7. The system of claim 1, wherein each of the worker machines comprises an MLEngine configured to carry out computation and training of machine learning models.
8. The system of claim 1, wherein the master machine further comprises a MLEngine Scheduler configured to verify the job description.
9. A method of running an application comprising: receiving, by an API server, a job description from a client; storing the job description in a database; executing one or more application programs on a plurality of virtual machines on a plurality of worker machines, wherein the one or more application programs comprising one or more Poseidon application programs, one or more medical application programs, and one or more 3rd party application programs; determining a number of the virtual machines needed to perform a job based on the job description, wherein the job description corresponds to at least one of uploading the application programs, uploading a dataset, and running the application programs on the worker machines; creating, by a container scheduling module, a distributed container containing the number of virtual machines across a plurality of physical machines, wherein the distributed container is created by the container scheduling module to run the Poseidon application programs, wherein the distributed container is created on the worker machines to run the medical application programs, wherein the 3rd party application programs are divided between the virtual machines of the distributed container on the worker machines; enabling instances of an application on each of the virtual machines to perform the job; verifying, by a data tracking module, location of one or more datasets; and tracking, by the data tracking module, location of the one or more datasets.
10. The method of claim 9, wherein the job description is received at a master machine in communication with the plurality of worker machines.
11. The method of claim 10, wherein at least two of the virtual machines in the distributed container resides on different worker machines.
12. The method of claim 10, each of the worker machines comprises an MLEngine configured for running a machine learning program.
13. A non-transitory computer-readable medium comprising instructions which, when executed by a processor, initiate a process comprising: receiving, by an API server, a job description from a client; storing the job description in a database; executing one or more application programs on a plurality of virtual machines on a plurality of worker machines, wherein the one or more application programs comprising one or more Poseidon application programs, one or more medical application programs, and one or more 3rd party application programs; determining a number of the virtual machines needed to perform a job based on the job description, wherein the job description corresponds to at least one of uploading the application programs, uploading a dataset, and running the application programs on the worker machines; creating, by a container scheduling module, a distributed container containing the number of virtual machines across a plurality of physical machines, wherein the distributed container is created by the container scheduling module to run the Poseidon application programs, wherein the distributed container is created on the worker machines to run the medical application programs, wherein the 3rd party application programs are divided between the virtual machines of the distributed container on the worker machines; enabling instances of an application on each of the virtual machines to perform the job; verifying, by a data tracking module, location of one or more datasets; and tracking, by the data tracking module, location of the one or more datasets.
14. The non-transitory computer-readable medium of claim 13, wherein the job description is received at a master machine in communication with the plurality of worker machines.
15. The non-transitory computer-readable medium of claim 14, wherein at least two of the virtual machines in the distributed container resides on different worker machines.
16. The non-transitory computer-readable medium of claim 14, wherein each of the worker machines comprises an MLEngine configured for running a machine learning program.
</claims>
</document>
