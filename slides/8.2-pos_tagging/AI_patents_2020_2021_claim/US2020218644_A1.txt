<document>

<filing_date>
2020-03-18
</filing_date>

<publication_date>
2020-07-09
</publication_date>

<priority_date>
2017-12-26
</priority_date>

<ipc_classes>
G06F12/02,G06F17/16,G06F7/00,G06F7/487,G06F9/30
</ipc_classes>

<assignee>
SAMSUNG ELECTRONICS COMPANY
</assignee>

<inventors>
MALLADI, KRISHNA T.
ZHENG, HONGZHONG
GU, PENG
</inventors>

<docdb_family_id>
66948912
</docdb_family_id>

<title>
MEMORY LOOKUP COMPUTING MECHANISMS
</title>

<abstract>
According to some example embodiments of the present disclosure, in a method for a memory lookup mechanism in a high-bandwidth memory system, the method includes: using a memory die to conduct a multiplication operation using a lookup table (LUT) methodology by accessing a LUT, which includes floating point operation results, stored on the memory die; sending, by the memory die, a result of the multiplication operation to a logic die including a processor and a buffer; and conducting, by the logic die, a matrix multiplication operation using computation units.
</abstract>

<claims>
1. A method for a memory lookup mechanism in a memory system, the method comprising: performing, by a memory die, a multiplication operation using a lookup table (LUT) stored on the memory die; sending, by the memory die, a result of the multiplication operation to a logic die; and performing, by the logic die, a matrix multiplication operation using the result of the multiplication operation performed on the memory die.
2. The method of claim 1, wherein the LUT comprises whole product multiplication results and the multiplication operation comprises: retrieving, by the memory die, a whole scalar multiplication result from the LUT using a whole scalar floating point input; sending, by the memory die, the whole scalar multiplication result from the LUT to the a buffer on the logic die; sending, by the buffer, the whole scalar multiplication result to an accumulator on the logic die; and accumulating, by the accumulator, the whole scalar multiplication result.
3. The method of claim 1, wherein the LUT comprises partial product multiplication results and the multiplication operation comprises: using, by the memory die, a fraction scalar floating point input to retrieve a partial product multiplication result from the LUT; sending, by the memory die, the partial product multiplication result to a buffer on the logic die; sending, by the buffer, the partial product multiplication result to an adjustor on the logic die; sending, by the adjustor, the partial product multiplication result to an accumulator on the logic die; and accumulating, by the accumulator, the partial product multiplication result.
4. The method of claim 1, wherein the LUT comprises tensor multiplication results and the multiplication operation comprises: retrieving, by the memory die, a tensor multiplication result from the LUT using a tensor floating point input; sending, by the memory die, the tensor multiplication result to a buffer on the logic die; and sending, by the buffer, the tensor multiplication result to a tensor post-processor on the logic die.
5. The method of claim 1, wherein the LUT comprises whole product multiplication results and the multiplication operation comprises: retrieving, by the memory die, a whole scalar multiplication result from the LUT using a whole scalar floating point; sending, by the memory die, the whole product multiplication results to a buffer die comprising a plurality of buffers; sending, by the buffer die, the whole product multiplication result to a buffer of the logic die; and sending, by the buffer of the logic die, the whole product multiplication result to a tensor processor on the logic die.
6. The method of claim 1, further comprising: storing the LUT associated with a first type of operation on the memory die; and storing the LUT associated with a second type of operation that is different from the first type of operation on the memory die.
7. The method of claim 1, further comprising: reading every possible location in a first layer input feature map; convolving with the first layer input feature map with a first layer kernel; and generating results of a second layer input feature map based on the convolving.
8. A memory lookup mechanism comprising: a logic die; and a memory die comprising a lookup table (LUT), wherein the memory die performs operations comprising: accessing the LUT; performing a multiplication operation using a LUT methodology; and sending a result of the multiplication operation to the logic die for use by the logic die to perform matrix multiplication operations.
9. The memory lookup mechanism of claim 8, wherein the LUT comprises whole product multiplication results and the memory die performs operations further comprising: retrieving a whole scalar multiplication result from the LUT using a whole scalar floating point input; and sending the whole scalar multiplication result from the LUT to a buffer on the logic die.
10. The memory lookup mechanism of claim 9, wherein the logic die further comprises an accumulator, the accumulator performing operations comprising: receiving the whole scalar multiplication result from the buffer; and accumulating the whole scalar multiplication result.
11. The memory lookup mechanism of claim 8, wherein the LUT comprises partial product multiplication and the memory die performs operations further comprising: retrieving a partial product multiplication result from the LUT using a fraction scalar floating point input; and sending the partial product multiplication result to a buffer on the logic die.
12. The memory lookup mechanism of claim 11, wherein the logic die further comprises: an adjustor, the adjustor receiving the partial product multiplication result from the buffer; and an accumulator, the accumulator performing operations comprising: receiving the partial product multiplication result from the adjustor; and accumulating the partial product multiplication result.
13. The memory lookup mechanism of claim 8, wherein the LUT comprises tensor multiplication results and the memory die performs operations further comprising: retrieving a tensor multiplication result from the LUT using a tensor floating point input; and sending the tensor multiplication result to a buffer on the logic die.
14. The memory lookup mechanism of claim 13, wherein the logic die further comprises a tensor post-processor receiving the tensor multiplication result from the buffer.
15. The memory lookup mechanism of claim 8, wherein the LUT comprises whole product multiplication results and the memory die performs operations further comprising: retrieving a whole scalar multiplication result from the LUT using a whole scalar floating point; and sending the whole product multiplication results to a buffer die.
16. The memory lookup mechanism of claim 15, wherein the logic die further comprises a tensor processor, the tensor processor receiving the whole product multiplication results from the buffer die.
17. The memory lookup mechanism of claim 8, wherein the logic die further comprises an accelerator die.
18. The memory lookup mechanism of claim 8, wherein the memory die comprises a dynamic random access memory (DRAM) die.
</claims>
</document>
