<document>

<filing_date>
2019-04-19
</filing_date>

<publication_date>
2020-10-22
</publication_date>

<priority_date>
2019-04-19
</priority_date>

<ipc_classes>
G06F16/22,G06F16/2452,G06F16/2455,G06F16/2458,G06F16/25,G06F16/28
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
IYENGAR, ARUN
CANIM, MUSTAFA
RODRIGUEZ MURO, MARIANO
MUSA, RYAN A.
CORNELIO, Cristina
</inventors>

<docdb_family_id>
72832509
</docdb_family_id>

<title>
AUTOMATIC TRANSFORMATION OF COMPLEX TABLES IN DOCUMENTS INTO COMPUTER UNDERSTANDABLE STRUCTURED FORMAT WITH MAPPED DEPENDENCIES AND PROVIDING SCHEMA-LESS QUERY SUPPORT FOR SEARCHING TABLE DATA
</title>

<abstract>
An information processing system, a computer readable storage medium, and a computer-implemented method, collect tables from a corpus of documents, convert the collected tables to flattened table format and organized to be searchable by schema-less queries. A method collects tables, extracts feature values from collected table data and collected table meta-data for each collected table. A table classifier classifies each collected table as being a type of table. Based on the classifying, the collected table is converted to a flattened table including table values that are the table data and the table meta-data of the collected table. Dependencies of the data values are mapped. The flattened table and mapped dependencies are stored in a triple store searchable by schema-less queries. The table classifier learns and improves its accuracy and reliability. Dependency information is maintained among a plurality of database tables. The dependency information can be updated at variable update frequency.
</abstract>

<claims>
1. In an information processing system comprised of a plurality of database tables, a computer-implemented method for performing schema-less query searching over the plurality of database tables, the method comprising: providing a plurality of database tables stored in one or more repositories in an information processing system, where each database table comprises: a first flattened table based on table data and table meta-data of a first compact table of a plurality of compact tables in a corpus and based on the first compact table being classified as a type of table family selected from a plurality of predefined types of table families, the first flattened table including as its flattened table data the table data and the table meta-data of the first compact table, and a set of dependency mappings, associated with the first flattened table, for functional dependencies and/or inclusion dependencies between any values of flattened table data in the first flattened table and other values of flattened table data in either the first flattened table or in a second flattened table corresponding to a second compact table in the corpus, where the second flattened table is included in another database table in the plurality of database tables; providing a schema-less query API for searching user-provided schema-less queries over the plurality of database tables; receiving a schema-less query via the schema-less query API, the schema-less query including a set of input query values for searching table data and/or table meta-data of compact tables in the plurality of compact tables in one or more database tables in the plurality of database tables, to find a match to all input query values in the set of input query values; and searching, with the information processing system, the schema-less query over the plurality of database tables to find a match to all input query values in the set of input query values.
2. The method of claim 1, wherein the searching comprising: if there is at least one database table that contains table data values and/or table meta-data values of a compact table in the plurality of compact tables that match the set of input query values, returning as search results one or more corresponding values of a set of rows in a flattened table in the at least one database table which match the set of input query values, or otherwise identifying one or more database tables that partially match the set of input query values, and searching each database table in the one or more database tables using the set of input query values and the set of dependency mappings in said each database table and recovering at least one dependency mapping in a database table in the one or more database tables, the recovered at least one dependency mapping being not directly specified by the set of input query values but retrieved by the information processing system from the one or more database tables using the set of input query values in the schema-less query, and returning as search results one or more corresponding values of a set of rows in a flattened table in a database table in the one or more database tables, which match the set of input query values based on searching using the set of input query values, the set of dependency mappings in each database table, and the recovered at least one dependency mapping.
3. The method of claim 2, wherein the recovering at least one dependency mapping in a database table comprises retrieving a key value which is a dependency mapping in a database table in the one or more database tables.
4. The method of claim 2, wherein the recovering at least one dependency mapping in a database table comprises retrieving a foreign key value which is a foreign dependency mapping in a database table in the one or more database tables, the foreign key value defining a relationship of a flattened table column in the database table in the one or more database tables with respect to one or more flattened table columns in another database table in the one or more database tables thereby connecting flattened table data stored across multiple database tables in the one or more database tables.
5. The method of claim 2, wherein the one or more database tables is two or more database tables, and wherein the recovering at least one dependency mapping in a database table comprises recovering a dependency mapping joining two or more flattened tables in the two or more database tables to compute an answer to the schema-less query.
6. The method of claim 1, further comprising: prior to the receiving a schema-less query via the schema-less query API, computing possible keys and foreign keys for searching each database table in the plurality of database tables, and storing in the one or more repositories the computed possible keys and foreign keys being associated with each database table for which the possible keys and foreign keys were computed.
7. The method of claim 6, further comprising: computing possible keys and foreign keys for the first flattened table based on the set of dependency mappings for functional dependencies and/or inclusion dependencies associated with the first flattened table in each database table in the plurality of database tables.
8. The method of claim 1, further comprising: translating the schema-less query, which is received via the schema-less query API, into a SPARQL query.
9. The method of claim 8, wherein the searching comprising: searching the SPARQL query over the plurality of database tables to find at least one answer to the schema-less query that matches one or more input query values in the set of input query values.
10. The method of claim 1, wherein the searching comprising: determining whether the schema-less query specifies all values needed for searching the schema-less query over the plurality of database tables to find a single answer to the schema-less query.
11. The method of claim 1, wherein the searching comprising: determining whether the schema-less query specifies searching content of multiple database tables in the plurality of database tables.
12. The method of claim 1, wherein the plurality of database tables stored in one or more repositories comprises a triple store in which are stored for each database table a collection of one or more A-box triples, including: the first flattened table, and the set of dependency mappings associated with the first flattened table; and wherein the method comprising: searching, with the information processing system, the schema-less query over the triple store to find a match to all input query values in the set of input query values.
13. An information processing system comprising: a memory repository for storing a plurality of database tables, where each database table comprises: a first flattened table based on table data and table meta-data of a first compact table of a plurality of compact tables in a corpus and based on the first compact table being classified as a type of table family selected from a plurality of predefined types of table families, the first flattened table including as its flattened table data the table data and the table meta-data of the first compact table, and a set of dependency mappings, associated with the first flattened table, for functional dependencies and/or inclusion dependencies between any values of flattened table data in the first flattened table and other values of flattened table data in either the first flattened table or in a second flattened table corresponding to a second compact table in the corpus, where the second flattened table is included in another database table in the plurality of database tables; a user interface; a persistent memory for storing a schema-less query API for searching schema-less queries provided by a user using the user interface, over the plurality of database tables; at least one processor, communicatively coupled with the memory repository, the user interface, and the persistent memory, the processor, responsive to executing instructions, performing operations comprising: receiving a schema-less query via the schema-less query API, the schema-less query including a set of input query values for searching table data and/or table meta-data of compact tables in the plurality of compact tables in one or more database tables in the plurality of database tables, to find a match to all input query values in the set of input query values; and searching the schema-less query over the plurality of database tables to find a match to all input query values in the set of input query values.
14. The information processing system of claim 13, wherein the processor, responsive to executing instructions, performing operations comprising: if there is at least one database table that contains table data values and/or table meta-data values of a compact table in the plurality of compact tables that match the set of input query values, returning as search results one or more corresponding values of a set of rows in a flattened table in the at least one database table which match the set of input query values, or otherwise identifying one or more database tables that partially match the set of input query values, and searching each database table in the one or more database tables using the set of input query values and the set of dependency mappings in the each database table and recovering at least one dependency mapping in a database table in the one or more database tables, the recovered at least one dependency mapping being not directly specified by the set of input query values but retrieved by the information processing system from the one or more database tables using the set of input query values in the schema-less query, and returning as search results one or more corresponding values of a set of rows in a flattened table in a database table in the one or more database tables, which match the set of input query values based on searching using the set of input query values, the set of dependency mappings in the each database table, and the recovered at least one dependency mapping.
15. The information processing system of claim 13, wherein the processor, responsive to executing instructions, performing operations comprising: prior to the receiving a schema-less query via the schema-less query API, computing possible keys and foreign keys for searching each database table in the plurality of database tables, and storing in the memory repository the computed possible keys and foreign keys being associated with each database table for which the possible keys and foreign keys were computed.
16. A computer readable storage medium, comprising computer instructions which, responsive to being executed by a processor of an information processing system, cause the processor to perform operations comprising: providing a plurality of database tables stored in one or more repositories in an information processing system, where each database table comprises: a first flattened table based on table data and table meta-data of a first compact table of a plurality of compact tables in a corpus and based on the first compact table being classified as a type of table family selected from a plurality of predefined types of table families, the first flattened table including as its flattened table data the table data and the table meta-data of the first compact table, and a set of dependency mappings, associated with the first flattened table, for functional dependencies and/or inclusion dependencies between any values of flattened table data in the first flattened table and other values of flattened table data in either the first flattened table or in a second flattened table corresponding to a second compact table in the corpus, where the second flattened table is included in another database table in the plurality of database tables; providing a schema-less query API for searching user-provided schema-less queries over the plurality of database tables; receiving a schema-less query via the schema-less query API, the schema-less query including a set of input query values for searching table data and/or table meta-data of compact tables in the plurality of compact tables in one or more database tables in the plurality of database tables, to find a match to all input query values in the set of input query values; and searching, with the information processing system, the schema-less query over the plurality of database tables to find a match to all input query values in the set of input query values.
17. The computer readable storage medium of claim 16, wherein the plurality of database tables stored in one or more repositories comprises a triple store, and wherein the operations further comprising: storing in the triple store a collection of A-box triples, one per flattened table stored in the triple store, and wherein one A-box triple stored in the collection comprising the flattened table data of the first flattened table and the set of dependency mappings for all functional dependencies and/or inclusion dependencies associated with values of the flattened table data in the first flattened table.
18. The computer readable storage medium of claim 17, wherein the one A-box triple stored in the collection comprising keys and/or foreign keys associated with the flattened table data of the first flattened table.
19. The computer readable storage medium of claim 16, wherein the operations further comprising: if there is at least one database table that contains table data values and/or table meta-data values of a compact table in the plurality of compact tables that match the set of input query values, returning as search results one or more corresponding values of a set of rows in a flattened table in the at least one database table which match the set of input query values, or otherwise identifying one or more database tables that partially match the set of input query values, and searching each database table in the one or more database tables using the set of input query values and the set of dependency mappings in each database table and recovering at least one dependency mapping in a database table in the one or more database tables, the recovered at least one dependency mapping being not directly specified by the set of input query values but retrieved by the information processing system from the one or more database tables using the set of input query values in the schema-less query, and returning as search results one or more corresponding values of a set of rows in a flattened table in a database table in the one or more database tables, which match the set of input query values based on searching using the set of input query values, the set of dependency mappings in the each database table, and the recovered at least one dependency mapping.
20. The computer readable storage medium of claim 16, wherein the operations further comprising: prior to the receiving a schema-less query via the schema-less query API, computing possible keys and foreign keys for searching each database table in the plurality of database tables, and storing in the one or more repositories the computed possible keys and foreign keys being associated with each database table for which the possible keys and foreign keys were computed.
</claims>
</document>
