<document>

<filing_date>
2017-12-15
</filing_date>

<publication_date>
2020-11-17
</publication_date>

<priority_date>
2016-12-22
</priority_date>

<ipc_classes>
G06F9/451,G06F9/54
</ipc_classes>

<assignee>
Brain Technologies, Inc.
</assignee>

<inventors>
Yue, Sheng
Lin, Yuan
</inventors>

<docdb_family_id>
73264147
</docdb_family_id>

<title>
Automatic multistep execution
</title>

<abstract>
Disclosed is a system for automatically executing multiple functional units of operation from multiple applications to complete a task that requires data from a variety of sources. The system stores information about operations that may be executed on a client device. When executing a sequence of operations, for example in response to a user request, the system may automatically store output from each operation. When executing subsequent operations in the sequence of operations, the system can determine whether output from a previously executed operation is appropriate for use as input to a new operation. The system can thus save data from one application and automatically use that data as input to a different application. Additionally, the system may determine subsequent operations to execute in response to previously observed output values.
</abstract>

<claims>
1. A computer-implemented method for managing automatic transitions between functional units of execution, the method comprising: obtaining a control stream including a set of functional units and a set of conditions that, when met, identify a next functional unit of the set of functional units to be executed; executing a first functional unit of the control stream; receiving output data subsequent to execution of the first functional unit; identifying information from the output data that can be accepted as input by one or more functional units of the control stream; encoding the information from the output data into a standard data format; storing the encoded output data in a data store; selecting a subsequent unit for execution, the selection determined based on a condition of the control stream being met by a previously executed functional unit, the previously executed functional unit having been executed after the execution of the first functional unit, wherein the subsequent functional unit accepts the output data of the first functional unit as input; retrieving the encoded output data from the data store; decoding the encoded output data from the standard data format into an input format for the subsequent functional unit; and executing the subsequent functional unit.
2. The computer-implemented method of claim 1, wherein a functional unit comprises at least one of: a sequence of operations, a call to an application programming interface (API), and a function call to operating system functions.
3. The computer-implemented method of claim 1, wherein the output data includes at least one of: view-structure data, an API return value, and a return value from a function call.
4. The computer-implemented method of claim 1, wherein identifying information from output data that can be accepted as input by other functional units comprises parsing the output data using natural language processing techniques.
5. The computer-implemented method of claim 1, wherein identifying information from output data that can be accepted as input by other functional units comprises identifying a type of an API return value in the output data.
6. The computer-implemented method of claim 1, further comprising: determining that the subsequent functional unit accepts a particular type of input data; wherein the determination is based on input parameters of the subsequent functional unit.
7. The computer-implemented method of claim 1, further comprising configuring the subsequent functional unit for execution using the decoded data.
8. A computer system comprising: at least one processor for executing computer program instructions; and a non-transitory computer-readable storage medium comprising stored instructions executable by the processor that when executed causes the processor to: obtain a control stream including a set of functional units and a set of conditions that, when met, identify a next functional unit of the set of functional units to be executed; execute a first functional unit of the control stream; receive output data subsequent to execution of the first functional unit; identify information from the output data that can be accepted as input by one or more functional units of the control stream; encode the information from the output data into a standard data format; store the encoded output data in a data store; select a subsequent unit for execution, the selection determined based on a condition of the control stream being met by a previously executed functional unit, the previously executed functional unit having been executed after the execution of the first functional unit, wherein the subsequent functional unit accepts the output data of the first functional unit as input; retrieve the encoded output data from the data store; decode the encoded output data from the standard data format into an input format for the subsequent functional unit; and execute the subsequent functional unit.
9. The computer system of claim 8, wherein a functional unit comprises at least one of: a sequence of operations, a call to an application programming interface (API), and a function call to operating system functions.
10. The computer system of claim 8, wherein the output data includes at least one of: view-structure data, an API return value, and a return value from a function call.
11. The computer system of claim 8, wherein the instructions to identify information from output data that can be accepted as input by other functional units further comprises instructions that when executed causes the processor to parse the output data using natural language processing techniques.
12. The computer system of claim 8, wherein instructions to identify information from output data that can be accepted as input by other functional units further comprises instructions that when executed causes the processor to identify a type of an API return value in the output data.
13. A non-transitory computer-readable storage medium comprises stored computer program instructions executable by at least one processor of a system, the instructions when executed causes the processor to: obtain a control stream including a set of functional units and a set of conditions that, when met, identify a next functional unit of the set of functional units to be executed; execute a first functional unit of the control stream; receive output data subsequent to execution of the first functional unit; identify information from the output data that can be accepted as input by one or more functional units of the control stream; encode the information from the output data into a standard data format; store the encoded output data in a data store; select a subsequent unit for execution, the selection determined based on a condition of the control stream being met by a previously executed functional unit, the previously executed functional unit having been executed after the execution of the first functional unit, wherein the subsequent functional unit accepts the output data of the first functional unit as input; retrieve the encoded output data from the data store; decode the encoded output data from the standard data format into an input format for the subsequent functional unit; and execute the subsequent functional unit.
14. The non-transitory computer-readable storage medium of claim 13, wherein a functional unit comprises at least one of: a sequence of operations, a call to an application programming interface (API), and a function call to operating system functions.
15. The non-transitory computer-readable storage medium of claim 13, wherein the output data includes at least one of: view-structure data, an API return value, and a return value from a function call.
16. The non-transitory computer-readable storage medium of claim 13, wherein the instructions to identify information from output data that can be accepted as input by other functional units comprises instructions that when executed causes the processor to parse the output data using natural language processing techniques.
17. The non-transitory computer-readable storage medium of claim 13, wherein instructions to identify information from output data that can be accepted as input by other functional units comprises instructions that when executed causes the processor to identify a type of an API return value in the output data.
18. The non-transitory computer-readable storage medium of claim 13, further comprising instructions that when executed causes the processor to: determine that the subsequent functional unit needs a particular type of input data; wherein the determination is based on input parameters of the functional unit.
</claims>
</document>
