<document>

<filing_date>
2019-09-06
</filing_date>

<publication_date>
2020-03-12
</publication_date>

<priority_date>
2018-09-06
</priority_date>

<ipc_classes>
G06F11/32,G06F17/18,G06N20/00
</ipc_classes>

<assignee>
QUICKPATH
QUICKPATH ANALYTICS
</assignee>

<inventors>
FLY, EDWARD ALEXANDER
MCDANIEL, TRENT
</inventors>

<docdb_family_id>
69720433
</docdb_family_id>

<title>
Real-time drift detection in machine learning systems and applications
</title>

<abstract>
The present disclosure is for systems and methods for connecting offline machine learning training systems with online near-real time machine learning scoring systems. It is not trivial to connect an offline training environment with an online scoring environment. For example, offline training environments are usually static and contain large amounts of historical data that is needed for the initial training of models. Once trained, the model algorithms are then migrated into an online scoring environment for transactional or event based scoring. This migration effectively breaks the connection between the data in the offline environment and the model now running in the online environment. When new or shifting data occurs in the online environment, the static model running in the online environment goes unaltered to the changing inputs. The present disclosure solves the issues that are caused by the break in the offline and online environments.
</abstract>

<claims>
1. A computer program product for detecting whether an online, real-time machine learning system is degrading, the computer program product comprising a non-transitory computer readable storage medium having instructions encoded thereon that, when executed by a processor, cause the processor to: score incoming scoring requests, wherein incoming scoring requests are scored by a machine learning model that is trained by using training dataset; receive batch scores assigned to the training dataset; determine whether the scored requests should be compared to the entries in the batch scored training dataset; determine whether a drift exists between the scored requests and the training dataset based on distribution of scored requests relative to the batch scores in the training dataset; determine whether the drift is statistically significant; and generate a notification if drift is determined to be statistically significant.
2. A computer-implemented method for detecting whether an online, real-time machine learning and scoring system is degrading, the computer-implemented method comprising: scoring incoming scoring requests in a near real-time scoring environment, the scoring based on a machine learning model that is trained by using training datasets; receiving batch scores assigned to the training dataset; determine whether the scored requests should be compared to the entries in the batch scored training dataset; determine whether a drift exists between the scored requests and the training dataset based on distribution of scored requests relative to the batch scores in the training dataset; determine whether the drift is statistically significant; and generate a notification if drift is determined to be statistically significant.
3. The computer-implemented method of claim 2, wherein determining whether drift exists is further comprised of: identifying the percentage of records in the incoming scoring requests and the offline training dataset that are based on a variable; calculating a difference in the two percentages; calculating the natural log of percentages of records that are based on the variable in the incoming scoring requests and offline training dataset; and combine the calculated differences in the two percentages and the calculated natural logs.
4. The computer-implemented method of claim 3, wherein determining whether a drift is statistically significant is comprised of determining whether the combined result is above a threshold.
5. The computer-implemented method of claim 2, wherein determining whether a drift is statistically significant is based on model prediction and score distributions.
6. The computer-implemented method of claim 2, wherein determining whether a drift is statistically significant is based on model variable profiling statistics.
7. The computer-implemented method of claim 2, wherein determining whether a drift is statistically significant is based on time window comparison and rate of change.
8. The computer-implemented method of claim 2, wherein determining whether a drift is statistically significant is based on model variable predictive power and/or relative importance.
9. The computer-implemented method of claim 2, wherein determining whether a drift is statistically significant is based on risk factor associated with the identified drift.
10. The computer-implemented method of claim 2, wherein determining whether the scored requests should be compared to the entries in the batch scored training dataset is comprised of determining whether the scored comparison window is equivalent to the training window.
11. The computer-implemented method of claim 10, wherein a configurable analysis time window is used to compared the batch scored training dataset with the scored data.
12. The computer-implemented method of claim 11, wherein a configurable analysis time window represents the amount of time that is evaluated when comparing the real time events to the historical baseline to determine if drift is occurring.
13. The computer-implemented method of claim 12, wherein a configurable time window for comparison is established based on variance tolerance.
14. The computer-implemented method of claim 13, wherein the configurable analysis time window for comparison is established based on velocity and/or volume of data.
15. The computer-implemented method of claim 13, wherein the configurable analysis time window for comparison is established based on anticipated rate of change of input data.
16. The computer-implemented method of claim 13, wherein the configurable analysis time window for comparison is established based on the risk associated with drift occurring.
17. The computer-implemented method of claim 13, wherein the configurable analysis time window for comparison is established based on the immediacy of remediation.
</claims>
</document>
