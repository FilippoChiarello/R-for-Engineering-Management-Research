<document>

<filing_date>
2019-11-08
</filing_date>

<publication_date>
2020-11-19
</publication_date>

<priority_date>
2019-05-16
</priority_date>

<ipc_classes>
G06F9/48,G06F9/50,G06F9/52
</ipc_classes>

<assignee>
NVIDIA CORPORATION
</assignee>

<inventors>
HETTENA, DANIEL JONATHAN
KINI, YOGESH
RAO, AMIT
Paramakuru, Aingarathasan
Bhattacharjee, Debalina
Buzov, Vladislav
Danielson, Kathleen E.
Ashwathnarayan, Sharan
Parikh, Alok
Kelur, Ashok
</inventors>

<docdb_family_id>
73228460
</docdb_family_id>

<title>
RESOURCE SHARING BY TWO OR MORE HETEROGENEOUS PROCESSING CORES
</title>

<abstract>
Apparatus, systems, and techniques to share memory. In at least one embodiment, a processor comprises one or more circuits to allocate memory to at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
</abstract>

<claims>
1. A processor, comprising: one or more circuits to allocate memory to at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
2. The processor of claim 1, wherein the at least two heterogeneous processing cores comprises a central processing unit and a graphics processing unit.
3. The processor of claim 1, wherein the one or more attributes indicates whether to use system memory or video memory.
4. The processor of claim 3, wherein the video memory is accessible by a discrete graphics processing unit.
5. The processor of claim 1, wherein the one or more circuits to allocate the memory to the at least two heterogeneous processing cores are to process the one or more attributes to determine a set of constraints on how the memory is allocated.
6. The processor of claim 5, wherein the memory is allocated in a manner that to be interpreted as a first data object by a first heterogeneous processing core of the at least two heterogeneous processing cores and to be interpreted as a second data object by a second heterogeneous processing core of the at least two heterogeneous processing cores.
7. The processor of claim 1, wherein the one or more circuits are to further: obtain different one or more attributes associated with how the at least two heterogeneous processing cores support coordinating access to the memory; determine a manner in which to initialize a synchronization object to coordinate access to the memory based at least in part on the different one or more attributes; and provide the at least two heterogeneous processing cores access to the synchronization object.
8. The processor of claim 7, wherein the synchronization object is a semaphore.
9. A system, comprising one or more memories to store instructions that, as a result of execution by one or more processors, cause the system to: allocate memory to at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces (APIs) based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
10. The system of claim 9, wherein the at least two heterogeneous processing cores comprises at least a portion of the one or more processors.
11. The system of claim 9, wherein the instructions to cause the system to allocate the memory to the at least two heterogeneous processing cores are instructions that, as a result of execution by the one or more processors, cause the system to process the one or more attributes to determine a manner in which to allocate the memory.
12. The system of claim 11, wherein the manner in which to allocate the memory satisfies constraints imposed by attributes of the at least two heterogeneous processing cores through the one or more APIs.
13. The system of claim 9, wherein the memory maps to a parallel computing platform and application programming interface model object.
14. The system of claim 9, wherein the instructions to allocate the memory are instructions that, as a result of execution by the one or more processors, cause the system to provide access to the memory via a handle that is to be interpreted by the at least two heterogeneous processing cores.
15. The system of claim 14, wherein the handle is interpreted as a first data object by a first heterogeneous processing core of the at least two heterogeneous processing cores and interpreted as a second data object by a second heterogeneous processing core of the at least two heterogeneous processing cores.
16. The system of claim 9, wherein the one or more memories are to store instructions that, as a result of execution by the one or more processors, cause the system to: obtain different one or more attributes associated with how the at least two heterogeneous processing cores support coordinating access to the memory; determine a manner in which to initialize a signal to coordinate access to the memory based at least in part on the different one or more attributes; and provide the at least two heterogeneous processing cores access to the signal.
17. The system of claim 16, wherein the different one or more attributes encodes types of synchronization primitives supported by the at least two heterogeneous processing cores.
18. A method, comprising: allocating memory to at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces (APIs) based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
19. The method of claim 18, wherein the at least two heterogeneous processing cores comprises a first central processing unit (CPU) and second CPU of different instruction set architectures.
20. The method of claim 19, wherein the first CPU supports an ARM instruction set architecture.
21. The method of claim 20, wherein the second CPU supports an x86 instruction set architecture.
22. The method of claim 18, wherein allocating the memory to the at least two heterogeneous processing cores comprises: determining, based at least in part on the one or more attributes, a set of allocation semantics associated with the at least two heterogeneous processing cores; and determining a manner in which to allocate the memory that satisfies one or more constraints imposed by the set of allocation semantics.
23. The method of claim 22, wherein the memory is interpreted as a tensor by a first core of the at least two heterogeneous processing cores and is interpreted as a texture by a second core of the at least two heterogeneous processing cores.
24. The method of claim 18, wherein the one or more attributes correspond to the at least two heterogeneous processing cores.
25. The method of claim 18, wherein the memory is exposed, by the one or more APIs, as a handle to be interpreted by the at least two heterogeneous processing cores.
26. The method of claim 18, further comprising: obtaining different one or more attributes associated with how the at least two heterogeneous processing cores support coordinating access to the memory; determining a manner in which to initialize a signal to coordinate access to the memory based at least in part on the different one or more attributes; and providing the at least two heterogeneous processing cores access to the signal.
27. The method of claim 26, wherein providing the at least two heterogeneous processing cores access to the signal comprises providing a handle to the signal with signaling and waiting semantics to be interpreted by the at least two heterogeneous processing cores.
28. A machine-readable medium having stored thereon an application programming interface (API), which if performed by one or more processors, cause the one or more processors to at least: allocate memory to at least two heterogeneous processing cores in response to performing one or more instructions associated with the API based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
29. The machine-readable medium of claim 28, wherein the at least two heterogeneous processing cores comprises an accelerator.
30. The machine-readable medium of claim 29, wherein the accelerator is a programmable vision accelerator.
31. The machine-readable medium of claim 28, wherein the machine-readable medium comprises instructions which, if performed by the one or more processors, cause the one or more processors to store data to the memory as a first type of data object and read the data from the memory as a second type of data object.
32. The machine-readable medium of claim 31, wherein the first type of data object is an image and the second type of data object is a tensor.
33. The machine-readable medium of claim 28, wherein the API to allocate the memory, if performed by the one or more processors, causes the one or more processors to provide a first handle to the memory and a second handle to the one or more attributes.
34. A processor, comprising: one or more circuits to create a signal to be used to coordinate at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces (APIs) based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
35. The processor of claim 34, wherein the signal is to be used to coordinate execution of computer-readable instructions between the at least two heterogeneous processing cores.
36. The processor of claim 34, wherein the signal is to be used to coordinate access to memory between the at least two heterogeneous processing cores.
37. The processor of claim 34, wherein the signal is to be interpreted as a first synchronization primitive by a first heterogeneous processing core of the at least two heterogeneous processing cores and to be interpreted as a second synchronization primitive by a second heterogeneous processing core of the at least two heterogeneous processing cores.
38. The processor of claim 37, wherein the first synchronization primitive is a semaphore and the second synchronization primitive is a fence.
39. The processor of claim 34, wherein the at least two heterogeneous processing cores comprises a central processing unit and a graphics processing unit.
40. The processor of claim 34, wherein the one or more circuits are to further: allocate memory to be shared between the at least two heterogeneous processing cores support coordinating access to the memory; and coordinate access to the memory using the signal.
41. The processor of claim 40, wherein the one or more circuits are to coordinate access to the memory using the signal by at least causing a first heterogeneous processing cores to wait on a second heterogeneous processing cores.
42. A system, comprising one or more memories to store instructions that, as a result of execution by one or more processors, cause the system to: create a signal to be used to coordinate at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces (APIs) based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
43. The system of claim 42, wherein the signal is to be used to synchronize execution of the at least two heterogeneous processing cores.
44. The system of claim 42, wherein the signal is to be used to synchronize data access between the at least two heterogeneous processing cores.
45. The system of claim 42, wherein the instructions to cause the system to create a signal to be used to coordinate at least two heterogeneous processing cores are instructions that, as a result of execution by the one or more processors, cause the system to process the one or more attributes to determine a manner in which to create the signal.
46. The system of claim 45, wherein the manner in which to create the signal satisfies constraints imposed by attributes of the at least two heterogeneous processing cores through the one or more APIs.
47. The system of claim 42, wherein the instructions to create the signal are instructions that, as a result of execution by the one or more processors, cause the system to provide access to the signal via a handle that is to be interpreted by the at least two heterogeneous processing cores.
48. The system of claim 47, wherein the handle is interpreted as a first synchronization object by a first heterogeneous processing core of the at least two heterogeneous processing cores and interpreted as a second synchronization object by a second heterogeneous processing core of the at least two heterogeneous processing cores.
49. The system of claim 42, wherein the one or more memories are to store instructions that, as a result of execution by the one or more processors, cause the system to: obtain different one or more attributes associated the at least two heterogeneous processing cores; determine a set of constrains on memory allocation based at least in part on the different one or more attributes; and allocate memory to be shared by the at least two heterogeneous processing cores, according to the set of constraints.
50. The system of claim 49, wherein the memory is to be interpreted as a first data object by a first heterogeneous processing core of the at least two heterogeneous processing cores and to be interpreted as a second object by a second heterogeneous processing core of the at least two heterogeneous processing cores.
51. A method, comprising: creating a signal to be used to coordinate at least two heterogeneous processing cores in response to performing one or more instructions associated with one or more application programming interfaces (APIs) based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
52. The method of claim 51, wherein the signal is to be used to coordinate scheduling of executable code between the at least two heterogeneous processing cores.
53. The method of claim 51, wherein the signal is to be used to coordinate access to memory between the at least two heterogeneous processing cores.
54. The method of claim 51, wherein the signal is implemented to be interpreted as a first synchronization primitive by a first heterogeneous processing core of the at least two heterogeneous processing cores and to be interpreted as a second synchronization primitive by a second heterogeneous processing core of the at least two heterogeneous processing cores.
55. The method of claim 54, wherein the first synchronization primitive is a semaphore and the second synchronization primitive is a syncpoint.
56. The method of claim 51, wherein the at least two heterogeneous processing cores comprises a central processing unit and a graphics processing unit.
57. The method of claim 51, wherein the one or more circuits are to further: allocate memory to be shared between the at least two heterogeneous processing cores support coordinating access to the memory; and coordinate access to the memory using the signal.
58. The method of claim 57, wherein the one or more circuits are to coordinate access to the memory using the signal by at least causing a first heterogeneous processing cores to wait on a second heterogeneous processing cores.
59. A machine-readable medium having stored thereon one or more application programming interfaces (APIs), which if performed by one or more processors, cause the one or more processors to at least: create a signal to be used to coordinate at least two heterogeneous processing cores in response to performing one or more instructions associated with the one or more APIs based, at least in part, on one or more attributes associated with the at least two heterogeneous processing cores.
60. The machine-readable medium of claim 59, wherein the signal is to be used to coordinate execution of computer-readable instructions between the at least two heterogeneous processing cores.
61. The machine-readable medium of claim 59, wherein the signal is to be used by a first heterogeneous processing cores of the at least two heterogeneous processing cores to block access to memory accessible to a second heterogeneous processing cores of the at least two heterogeneous processing cores.
62. The machine-readable medium of claim 59, wherein the signal is to be interpreted as a first synchronization primitive by a first heterogeneous processing core of the at least two heterogeneous processing cores and to be interpreted as a second synchronization primitive by a second heterogeneous processing core of the at least two heterogeneous processing cores.
63. The machine-readable medium of claim 59, wherein the signal is to be used by a first heterogeneous processing core to signal a second first heterogeneous processing core waiting on the signal.
64. The machine-readable medium of claim 59, wherein the one or more circuits are to further: allocate memory to be shared between the at least two heterogeneous processing cores support coordinating access to the memory; and coordinate access to the memory using the signal.
65. The machine-readable medium of claim 64, wherein memory is to store one or more images and the signal is to coordinate access to the memory between a camera and a graphics processing unit.
</claims>
</document>
