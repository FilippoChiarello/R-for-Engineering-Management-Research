<document>

<filing_date>
2019-11-03
</filing_date>

<publication_date>
2020-05-28
</publication_date>

<priority_date>
2018-11-19
</priority_date>

<ipc_classes>
G06F11/36
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
COLOMBO, DIEGO
PUSZKIEWICZ, PIOTR M.
</inventors>

<docdb_family_id>
68655739
</docdb_family_id>

<title>
TESTING USER INTERFACES USING MACHINE VISION
</title>

<abstract>
Methods, systems, apparatuses, and computer program products are provided for validating a graphical user interface (GUI). An application comprising the GUI may be executed. A test script may also be executed that is configured to interact with the GUI of the application. Images representing the GUI of the application may be captured at different points in time, such as different interaction points. For each image, a set of tags that identify expected objects may be associated with the image. A model may be applied that classifies one or more graphical objects identified in each image. Based on the associated set of tags and the classification of the graphical objects in the image, each image may be validated, thereby enabling the validation of the GUI of the application.
</abstract>

<claims>
1. A system for validating a graphical user interface (GUI), the system comprising: one or more processors; and
one or more memory devices that store program code configured to be executed by the one or more processors, the program code comprising:
a test script launcher configured to:
execute an application comprising the GUI;
execute a test script that interacts with the GUI of the application; capture a plurality of images representing the GUI of the application at different points in time; and
for each image, associate a set of tags that identify expected objects in the image; and
a GUI validator configured to:
for each image, apply a model that classifies one or more graphical objects in the image; and
validate each image based on the associated set of tags and the classification of each of the one or more graphical objects in the image.
2. The system of claim 1, wherein the GUI validator comprises:
an object detector configured to detect the one or more graphical objects in each image; and
an object classifier configured to apply the model to classify each of the one or more graphical objects.
3. The system of claim 1, wherein the model is trained in a first operating
environment in which the GUI of the application has a first representation; and
wherein the application is executed in a second operating environment in which the GUI of the application has a second representation that is different than the first representation.
4. The system of claim 1, wherein the set of tags for at least one image comprises a tag that is based on an executing platform of the application.
5. The system of claim 1, wherein the test script comprises a plurality of randomized interactions.
6. The system of claim 1, wherein the model is trained using a supervised learning algorithm that comprises:
bounding a region of at least one of the images; and tagging the bounded region with a region identifier.
7. The system of claim 1, wherein the GUI validator is configured to validate each image based on a measure of confidence of a classification of each graphical object identified in the image.
8. A method of validating a graphical user interface (GUI), the method comprising: executing an application comprising the GUI;
executing a test script that interacts with the GUI of the application;
capturing a plurality of images representing the GUI of the application at different points in time;
for each image:
associating a set of tags that identify expected objects in the image;
applying a model that classifies one or more graphical objects in each image; and
validating the image based on the associated set of tags and the classification of each of the one or more graphical objects in the image.
9. The method of claim 8, wherein the applying a model that classifies one or more graphical objects in each image comprises:
detecting the one or more graphical objects in each image; and
applying the model to classify each of the one or more graphical objects.
10. The method of claim 8, wherein the model is trained in a first operating
environment in which the GUI of the application has a first representation; and
wherein the application is executed in a second operating environment in which the GUI of the application has a second representation that is different than the first representation.
11. The method of claim 8, wherein the set of tags for at least one image comprises a tag that is based on an executing platform of the application.
12. The method of claim 8, wherein the test script comprises a plurality of randomized interactions.
13. The method of claim 8, wherein the model is trained using a supervised learning algorithm that comprises:
bounding a region of at least one of the images; and
tagging the bounded region with a region identifier.
14. The method of claim 8, wherein the validating the image based on the associated set of tags and the classification of each of the one or more graphical objects in the image comprises validating the image based on a measure of confidence of a classification of each graphical object identified in the image.
15. A computer-readable storage medium having program instructions recorded thereon, comprising:
computer program logic for enabling a processor to perform any of claims 8-14.
</claims>
</document>
