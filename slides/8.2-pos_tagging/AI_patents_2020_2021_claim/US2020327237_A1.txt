<document>

<filing_date>
2020-04-10
</filing_date>

<publication_date>
2020-10-15
</publication_date>

<priority_date>
2019-04-10
</priority_date>

<ipc_classes>
G06F17/18,G06F21/55,G06F21/57,G06N20/00
</ipc_classes>

<assignee>
CYBER RECONNAISSANCE
</assignee>

<inventors>
ALMUKAYNIZI, MOHAMMED
SHAKARIAN, JANA
SHAKARIAN, PAULO
Sandhu, Harshdeep Singh
</inventors>

<docdb_family_id>
72749122
</docdb_family_id>

<title>
SYSTEMS AND METHODS FOR AGGREGATING, RANKING, AND MINIMIZING THREATS TO COMPUTER SYSTEMS BASED ON EXTERNAL VULNERABILITY INTELLIGENCE
</title>

<abstract>
Embodiments of computer-implemented systems and methods for vulnerability-based risk transfer for aggregating, ranking, and minimizing threats to computing devices based on external vulnerability intelligence are disclosed.
</abstract>

<claims>
1. A method for aggregating, ranking, and minimizing threats to computer systems based on external vulnerability data, comprising: accessing data defining a configuration of a target information technology (IT) system; (I) applying, by a processor, artificial intelligence to at least a portion of the data defining a software component of the target IT system to identify a common platform enumeration (CPE) identifier corresponding to the software component; and (II) mapping, by the processor, the CPE identifier to a common vulnerability enumeration (CVE) identifier to identify a vulnerability for the software component of the target IT system.
2. The method of claim 1, further comprising applying, by the processor, natural language processing functions to correlate the CPE identifier with an identifier of the software component to identify the CPE identifier.
3. The method of claim 2, further comprising identifying, using natural language processing functions executed by the processor, at least one predetermined character that is common to characters of both of the identifier of the software component and the CPE identifier.
4. The method of claim 1, further comprising, by the processor, repeating step (I) to identify a plurality of CPEs associated with a software stack of the target IT system.
5. The method of claim 4, further comprising, by the processor, repeating step (II) to identify a plurality of CVEs corresponding to the plurality of CPEs associated with the software stack of the target IT system.
6. The method of claim 5, further comprising: computing, by the processor, a probability of exploitation associated with each of the plurality of CVEs, and computing, by the processor, a probability that the IT system will be exploited (Cx), expressed as 1â€”a probability that none of the vulnerabilities are going to be exploited.
7. The method of claim 5, further comprising: computing, by the processor, a probability of exploitation associated with each of the plurality of CVEs; and computing, by the processor, a probability that the IT system will be exploited (Cx), where Cx is expressed by taking a probability of exploitation of the vulnerability that has a greatest probability of exploitation.
8. The method of claim 1, further comprising: computing, by the processor, a probability of exploitation associated with the IT system by computing an expected value relating to an expected number of attacks against the vulnerabilities associated with the IT system.
9. The method of claim 1, further comprising: identifying an impact of employing a software patch to the software component, by: computing a function that quantifies the impact and takes as inputs a threat level associated with an older software version and a threat level associated with an updated software version.
10. The method of claim 1, further comprising: identifying an impact of employing a software patch to the software component, by: computing a function that quantifies an impact of patching a single vulnerability of the IT system.
11. The method of claim 1, further comprising: solving, by the processor an optimization problem using integer programming to identify the optimal set of software upgrades that may be applied to the IT system that reduces threat in view of a software upgrade constraint, k.
12. The method of claim 1, further comprising: selecting, by the processor, an optimal set of software changes to the IT system to minimize threat by solving an optimization problem using integer programming in view of at least one incompatibility constraint.
13. The method of claim 1, further comprising: identifying, by the processor, a change to the IT system based on a limit defining a maximum number of changes permitted.
14. The method of claim 1, further comprising, given a set of alerts, computing, by the processor, a ranking based on vulnerabilities of the IT system and probability of exploitation of the vulnerabilities to provide threat-based alert triage.
15. A device for aggregating, ranking, and minimizing threats to computer systems based on external vulnerability data, comprising: a processor; a network interface in operable communication with the processor, the network interface operable for communicating with a network and providing the processor with access to information including common platform enumerations (CPEs) and corresponding common vulnerability enumerations (CVEs), and a memory storing a set of instructions executable by the processor, the set of instructions, when executed by the processor, operable to: access data associated with an IT system, the data defining a software component implemented by the IT system, and identify a CPE of the CPEs associated with the software component.
16. A tangible, non-transitory, computer-readable media having instructions encoded thereon, the instructions, when executed by a processor, are operable to: access data associated with an IT system, the data defining a software component implemented by the IT system, and identify a CPE of the CPEs associated with the software component.
</claims>
</document>
