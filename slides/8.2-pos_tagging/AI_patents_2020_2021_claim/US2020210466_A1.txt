<document>

<filing_date>
2018-12-26
</filing_date>

<publication_date>
2020-07-02
</publication_date>

<priority_date>
2018-12-26
</priority_date>

<ipc_classes>
G06F16/31,G06F16/35,G06K9/62,G06N20/00,H04L12/58
</ipc_classes>

<assignee>
MICROSOFT TECHNOLOGY LICENSING
</assignee>

<inventors>
CUI, ALBERT
GUO, SONGTAO
LI, LIZABETH
LIM, JOONHYUNG
LIU, QUNZENG
PENG, CARRIE
WANG YI
YIN, QIANNAN
ZHOU, YANG
</inventors>

<docdb_family_id>
71124318
</docdb_family_id>

<title>
HYBRID ENTITY MATCHING TO DRIVE PROGRAM EXECUTION
</title>

<abstract>
In an embodiment, the disclosed technologies include receiving a set of digital inputs; where the set of digital inputs includes a candidate entity-member entity pair that includes candidate entity data and member entity data; where the member entity data has been extracted from a node of an online service; where an exact match has not been found between the candidate entity data and the member entity data; in response to the set of digital inputs, outputting models of the candidate entity data and the member entity data, respectively; where the models indicate weight values assigned to text in the candidate entity data and weight values assigned to text in the member entity data, respectively; calculating a similarity score using the models; in response to the similarity score matching a threshold, inputting the candidate entity-member entity pair to a classifier to produce a classification; where the classifier uses a machine learning model that has been trained using features derived from previously-analyzed candidate entity-member entity pairs; where the classification indicates a mathematical likelihood that a match has been found between the candidate entity data and the member entity data.
</abstract>

<claims>
1. A method, comprising: receiving a set of digital inputs; wherein the set of digital inputs comprises a candidate entity-member entity pair that includes candidate entity data and member entity data; wherein the member entity data has been extracted from a node of an online service; wherein an exact match has not been found between the candidate entity data and the member entity data; in response to the set of digital inputs, outputting models of the candidate entity data and the member entity data, respectively; wherein the models indicate weight values assigned to text in the candidate entity data and weight values assigned to text in the member entity data, respectively; calculating a similarity score using the models; in response to the similarity score matching a threshold, inputting the candidate entity-member entity pair to a classifier to produce a classification; wherein the classifier uses a machine learning model that has been trained using features derived from previously-analyzed candidate entity-member entity pairs; wherein the classification indicates a mathematical likelihood that a match has been found between the candidate entity data and the member entity data; causing the online service to act on the classification; wherein the method is performed by one or more computing devices.
2. The method of claim 1, comprising, in response to the classification indicating that the candidate entity data matches the member entity data, causing an online service to transmit a first electronic message to an address of a source of the candidate entity data and not transmit a second electronic message to an address in the candidate entity data.
3. The method of claim 1, comprising, in response to the classification indicating that the candidate entity data does not match the member entity data, causing an online service to transmit a second electronic message to an address in the candidate entity data and not transmit a first electronic message to an address of a source of the candidate entity data.
4. The method of claim 1, wherein the candidate entity-member entity pair is created in response to finding a same word in both the candidate entity data and the member entity data.
5. The method of claim 1, wherein the weight values are calculated using term frequency-inverse document frequency (TF-IDF) logic.
6. The method of claim 1, wherein the similarity score is computed by mathematically comparing a word found in the candidate entity data to a word found in the member entity data, and the word found in the candidate entity data or the a word found in the member entity data comprises any one or more of the following: a first name, a last name, an email username, a word extracted from an email username, an email domain, a company name inferred from an email domain.
7. The method of claim 1, wherein the machine learning model is trained using output of any one or more of the following: a Jaro-Winkler function, a MongeElkan function, a Levenstein function, a PrefixSimilarity function, a JaccardSimilarity function, a ContainmentSimilarity function, a LongestCommonSequence function, a LongestCommonSubstring function.
8. The method of claim 1, wherein output of the classifier is used to determine the classification in response to inputting any one or more of the following, extracted or derived from the candidate entity-member entity pair, into the machine learning model: a name, an email domain, a username, a similarity score, or connection data that is associated with a source of the candidate entity data and the online service.
9. The method of claim 1, wherein the machine learning model comprises any one or more of the following types of machine learning models: logistic regression, decision tree, random forest, support vector machine, gradient boosting.
10. The method of claim 1, wherein the candidate entity data is received in response to an address book import operation initiated by a user of the online service.
11. A computer program product comprising one or more non-transitory computer-readable storage media comprising instructions which, when executed by one or more processors, cause the one or more processors to perform operations comprising: receiving a set of digital inputs; wherein the set of digital inputs comprises a candidate entity-member entity pair that includes candidate entity data and member entity data; wherein the member entity data has been extracted from a node of an online service; wherein an exact match has not been found between the candidate entity data and the member entity data; in response to the set of digital inputs, outputting models of the candidate entity data and the member entity data, respectively; wherein the models indicate weight values assigned to text in the candidate entity data and weight values assigned to text in the member entity data, respectively; calculating a similarity score using the models; in response to the similarity score matching a threshold, inputting the candidate entity-member entity pair to a classifier to produce a classification; wherein the classifier uses a machine learning model that has been trained using features derived from previously-analyzed candidate entity-member entity pairs; wherein the classification indicates a mathematical likelihood that a match has been found between the candidate entity data and the member entity data; causing the online service to act on the classification.
12. The computer program product of claim 11, wherein the instructions, when executed by the one or more processors, cause the one or more processors to perform operations comprising, in response to the classification indicating that the candidate entity data matches the member entity data, causing an online service to transmit a first electronic message to an address of a source of the candidate entity data and not transmit a second electronic message to an address in the candidate entity data.
13. The computer program product of claim 11, wherein the instructions, when executed by the one or more processors, cause the one or more processors to perform operations comprising, in response to the classification indicating that the candidate entity data does not match the member entity data, causing an online service to transmit a second electronic message to an address in the candidate entity data and not transmit a first electronic message to an address of a source of the candidate entity data.
14. The computer program product of claim 11, wherein the candidate entity-member entity pair is created in response to finding a same word in both the candidate entity data and the member entity data.
15. The computer program product of claim 11, wherein the weight values are calculated using term frequency-inverse document frequency (TF-IDF) logic.
16. The computer program product of claim 11, wherein the similarity score is computed by mathematically comparing a word found in the candidate entity data to a word found in the member entity data, and the word found in the candidate entity data or the a word found in the member entity data comprises any one or more of the following: a first name, a last name, an email username, a word extracted from an email username, an email domain, a company name inferred from an email domain.
17. The computer program product of claim 11, wherein the machine learning model is trained using output of any one or more of the following: a Jaro-Winkler function, a MongeElkan function, a Levenstein function, a PrefixSimilarity function, a JaccardSimilarity function, a ContainmentSimilarity function, a LongestCommonSequence function, a LongestCommonSubstring function.
18. The computer program product of claim 11, wherein output of the classifier is used to determine the classification in response to inputting any one or more of the following, extracted or derived from the candidate entity-member entity pair, into the machine learning model: a name, an email domain, a username, a similarity score, or connection data that is associated with a source of the candidate entity data and the online service.
19. The computer program product of claim 11, wherein the machine learning model comprises any one or more of the following types of machine learning models: logistic regression, decision tree, random forest, support vector machine, gradient boosting.
20. The computer program product of claim 11, wherein the candidate entity data is received in response to an address book import operation initiated by a user of the online service.
</claims>
</document>
