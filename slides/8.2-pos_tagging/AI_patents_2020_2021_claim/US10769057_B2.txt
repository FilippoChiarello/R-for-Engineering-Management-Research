<document>

<filing_date>
2018-05-09
</filing_date>

<publication_date>
2020-09-08
</publication_date>

<priority_date>
2018-05-09
</priority_date>

<ipc_classes>
G06F11/34,G06F11/36,G06F8/73,G06N20/00
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
HERRIN, BRADLEY C.
SOBRAN, ALEXANDER
ZHANG, BO
</inventors>

<docdb_family_id>
68463566
</docdb_family_id>

<title>
Identifying potential errors in code using machine learning
</title>

<abstract>
A method, system and computer program product for identifying potential errors in a software product after it is built but prior to release. Negative log reports of previously-build software products containing errors in the code in connection with building these software products are identified. The language of the negative log reports is then vectorized and the vectorized negative log reports are then stored. After vectorizing the language of a build log report upon completion of a build of a software product, the vectorized log report is compared with the stored vectorized negative log reports. The release of the software product will then be halted and the programmer will receive a copy of the negative log report associated with the vectorized negative log report closest in distance to the vectorized log report if the vectorized log report is within a threshold amount of distance to a stored vectorized negative log report.
</abstract>

<claims>
1. A method for identifying potential errors in a software product after it is built but prior to release, the method comprising: identifying negative log reports of previously-built software products, wherein said negative log reports contain errors in code in connection with building said previously-built software products; vectorizing language of said identified negative log reports of previously-built software products; storing said vectorized negative log reports; vectorizing language of a build log report for a software product to form a vectorized log report upon completion of build of said software product; comparing said vectorized log report with said stored vectorized negative log reports; and halting release of said software product in response to identifying a stored vectorized negative log report within a threshold degree of distance of said vectorized log report.
2. The method as recited in claim 1 further comprising: creating a classification system that identifies users' questions pertaining to errors in computer programs that are associated with a negative log report.
3. The method as recited in claim 2, wherein said classification system is created by defining a collection of tags for questions pertaining to errors in code and defining a collection of tags for log reporting, wherein said classification system is further created by adding textual features obtained by extracting items from a title, a body, a comment and an answer of crowd sourced data that co-occur with ether said collection of tags for log reporting or said collection of tags for questions pertaining to errors in code, wherein said classification system is further created by performing sentiment analysis on a title and a body of questions of said crowd sourced data.
4. The method as recited in claim 2 further comprising: identifying said negative log reports of previously-built software products by implementing said classification system on crowd sourced data.
5. The method as recited in claim 4, wherein said crowd sourced data comprises build logs, product documentations, and public forums.
6. The method as recited in claim 1 further comprising: providing a programmer a copy of a negative log report associated with a vectorized negative log report closest in distance to said vectorized log report in response to identifying said stored vectorized negative log report within said threshold degree of distance of said vectorized log report.
7. The method as recited in claim 1, wherein said vectorization of language of said identified negative log reports of previously-built software products and said vectorization of language of said build log report for said software product is performed using a machine learning model.
8. A computer program product for identifying potential errors in a software product after it is built but prior to release, the computer program product comprising a computer readable storage medium having program code embodied therewith, the program code comprising the programming instructions for: identifying negative log reports of previously-built software products, wherein said negative log reports contain errors in code in connection with building said previously-built software products; vectorizing language of said identified negative log reports of previously-built software products; storing said vectorized negative log reports; vectorizing language of a build log report for a software product to form a vectorized log report upon completion of build of said software product; comparing said vectorized log report with said stored vectorized negative log reports; and halting release of said software product in response to identifying a stored vectorized negative log report within a threshold degree of distance of said vectorized log report.
9. The computer program product as recited in claim 8, wherein the program code further comprises the programming instructions for: creating a classification system that identifies users' questions pertaining to errors in computer programs that are associated with a negative log report.
10. The computer program product as recited in claim 9, wherein said classification system is created by defining a collection of tags for questions pertaining to errors in code and defining a collection of tags for log reporting, wherein said classification system is further created by adding textual features obtained by extracting items from a title, a body, a comment and an answer of crowd sourced data that co-occur with ether said collection of tags for log reporting or said collection of tags for questions pertaining to errors in code, wherein said classification system is further created by performing sentiment analysis on a title and a body of questions of said crowd sourced data.
11. The computer program product as recited in claim 9, wherein the program code further comprises the programming instructions for: identifying said negative log reports of previously-built software products by implementing said classification system on crowd sourced data.
12. The computer program product as recited in claim 11, wherein said crowd sourced data comprises build logs, product documentations, and public forums.
13. The computer program product as recited in claim 8, wherein the program code further comprises the programming instructions for: providing a programmer a copy of a negative log report associated with a vectorized negative log report closest in distance to said vectorized log report in response to identifying said stored vectorized negative log report within said threshold degree of distance of said vectorized log report.
14. The computer program product as recited in claim 8, wherein said vectorization of language of said identified negative log reports of previously-built software products and said vectorization of language of said build log report for said software product is performed using a machine learning model.
15. A system, comprising: a memory for storing a computer program for identifying potential errors in a software product after it is built but prior to release; and a processor connected to said memory, wherein said processor is configured to execute the program instructions of the computer program comprising: identifying negative log reports of previously-built software products, wherein said negative log reports contain errors in code in connection with building said previously-built software products; vectorizing language of said identified negative log reports of previously-built software products; storing said vectorized negative log reports; vectorizing language of a build log report for a software product to form a vectorized log report upon completion of build of said software product; comparing said vectorized log report with said stored vectorized negative log reports; and halting release of said software product in response to identifying a stored vectorized negative log report within a threshold degree of distance of said vectorized log report.
16. The system as recited in claim 15, wherein the program instructions of the computer program further comprise: creating a classification system that identifies users' questions pertaining to errors in computer programs that are associated with a negative log report.
17. The system as recited in claim 16, wherein said classification system is created by defining a collection of tags for questions pertaining to errors in code and defining a collection of tags for log reporting, wherein said classification system is further created by adding textual features obtained by extracting items from a title, a body, a comment and an answer of crowd sourced data that co-occur with ether said collection of tags for log reporting or said collection of tags for questions pertaining to errors in code, wherein said classification system is further created by performing sentiment analysis on a title and a body of questions of said crowd sourced data.
18. The system as recited in claim 16, wherein the program instructions of the computer program further comprise: identifying said negative log reports of previously-built software products by implementing said classification system on crowd sourced data.
19. The system as recited in claim 18, wherein said crowd sourced data comprises build logs, product documentations, and public forums.
20. The system as recited in claim 15, wherein the program instructions of the computer program further comprise: providing a programmer a copy of a negative log report associated with a vectorized negative log report closest in distance to said vectorized log report in response to identifying said stored vectorized negative log report within said threshold degree of distance of said vectorized log report.
</claims>
</document>
