<document>

<filing_date>
2017-05-16
</filing_date>

<publication_date>
2020-11-17
</publication_date>

<priority_date>
2016-05-16
</priority_date>

<ipc_classes>
G06F11/36,G06F9/44
</ipc_classes>

<assignee>
JPMORGAN CHASE
</assignee>

<inventors>
SALEH-ESA, CHAGLA M.
</inventors>

<docdb_family_id>
73264058
</docdb_family_id>

<title>
Method and system for implementing an automation software testing and packaging framework
</title>

<abstract>
The invention relates to a corporate technologies and risk (CTR) automation framework. The innovative framework comprises: a self-service portal that receives an input relating to a software application from an application developer; a build framework comprising a standards framework that implements a set of rules; a Quality Assurance (QA) processor that automatically generates test scripts for the software application; a performance processor, comprising a parser, a designer processor, analyzer processor and a validator processor, that automatically generates and executes performance test scripts; and a CTR communication network, coupled to the build framework, QA processor and the performance processor, that communicates with one or more targets via a distributed ledger functionality for entitlements and events.
</abstract>

<claims>
1. A system that implements a corporate technologies and risk (CTR) automation framework, the system comprising: a hardware memory; a self-service portal that receives software code relating to a software application from an application developer, and wherein the self-service portal is based on a distributed ledger functionality for entitlements and events, implemented by a CTR communication network, and wherein the distributed ledger functionality includes microservices for the entitlements and for change and release of the software application; a build framework comprising a standards framework, a packaging processor, and an orchestration engine, the standards framework configured to automatically generate and implement a set of rules for the software application, the rules relating to one or more of environment, layout, entitlements, and scans and policy of the software application, and the rules based at least one characteristics of the software application relating to the software code received through the serf-service portal and a user environment of the software application; the packaging processor configured to generate a packaging wrapper required to create a packaged software application and deliver the packaged software application into a production environment; and the orchestration engine configured to execute deployment of the packaged software application, wherein the orchestration engine determines one or more of a deployment location, a deployment environment, and any necessary post testing for the packaged software application; and a test framework consisting of a Quality Assurance (QA) processor and a performance processor: the Quality Assurance (QA) processor configured to automatically generate and execute one or more QA test scripts for the software application, the QA test scripts verifying completeness and expected results for the software application; the performance processor, comprising: a parser configured to collect and correlate data for the software application into one or more testable categories; a designer configured to provide input to generate performance test scripts based on a set of learned parameters and standards for testing the software application; an analyzer configured to review and confirm completeness of both the performance test scripts from the designer and the one or more testable categories from the parser; and a validator configured to review an incomplete performance test script of the performance test scripts and any unstructured data that are obtained from the analyzer and then provide the incomplete performance test script, unstructured data and review result to the designer; the performance processor configured to generate test scripts based on a system integration, application response, the completeness and expected results verified from the execution of the QA test scripts via the QA processor; wherein the application response is based at least in part on consideration of application characteristics resulting from a given load of the software application, and machine learning of one or more alphanumeric inputs for the software application wherein the performance processor generates test flows for possible scenarios based on the one or more alphanumeric inputs, and wherein the machine learning is based on a set of application use cases; and the CTR communication network, coupled to the build framework, QA processor, performance processor, packaging processor, and orchestration engine.
2. The system of claim 1, wherein the set of rules is directed to one or more of: environment overrides, scheduling, and notifications.
3. The system of claim 1, wherein the performance processor performs an automated test generator flow to identify possible inputs for a particular screen generated by the software application.
4. The system of claim 3, wherein the performance processor generates an automated test screen hash comprising a plurality of scenarios for a corresponding input.
5. The system of claim 4, wherein a test case generator automatically generates test cases based on the automated test screen hash.
6. The system of claim 1, where the distributed ledger functionality is Blockchain functionality.
7. The system of claim 1, wherein the events are received by an event controller and entitlements are received by one or more targets.
8. A non-transitory computer readable medium containing program instructions for implementing a corporate technologies and risk (CTR) automation framework, wherein execution of the program instructions by one or more processors of a computer system causes the one or more processors to carry out the steps of: receiving, via a self-service portal, software code relating to a software application from an application developer wherein the self-service portal is based on a distributed ledger functionality for entitlements and events, implemented by a CTR communication network, and wherein the distributed ledger functionality includes microservices for the entitlements and for change and release of the software application; providing a build framework comprising a standards framework, a packaging processor, and an orchestration engine; automatically generating and implementing, by the standards framework, a set of rules for the software application, the rules relating to one or more of environment, layout, entitlements, and scans and policy of the software application, and the rules based at least one characteristics of the software application relating to the software code received through the serf-service portal and a user environment of the software application; providing a test framework consisting of a Quality Assurance (QA) processor and a performance processor; automatically generating and executing, via the Quality Assurance (QA) processor, QA test scripts for the software code relating to the software application, the OA test scripts verifying completeness and expected results for the software application; collecting and correlating, by a parser of the performance processor, data for the software application into one or more testable categories; providing, by a designer of the performance processor, input to generate performance test scripts based on a set of learned parameters and standards for testing the software application; reviewing and confirming, by an analyzer of the performance processor, completeness of both the performance test scripts from the designer and the one or more testable categories from the parser; reviewing, by a validator of the performance processor, an incomplete performance test script of the performance test scripts and any unstructured data that are obtained from the analyzer and then provide the incomplete performance test script, unstructured data and review result to the designer; generating test scripts based on a system integration, application response, the completeness and expected results verified from the execution of the QA test scripts via the QA processor; wherein the application response is based at least in part on consideration of application characteristics resulting from a given load of the software application, and machine learning of one or more alphanumeric inputs for an application wherein the performance processor generates test flows for possible scenarios based on the one or more alphanumeric inputs, and wherein the machine learning is based on a set of application use cases; automatically generating, via the packaging processor, a packaging wrapper required to create a packaged software application and deliver the packaged software application into a production environment; automatically executing, via the orchestration engine, deployment of the packaged software application, wherein the orchestration engine determines one or more of a deployment location, a deployment environment, and any necessary post testing for the packaged software application; and communicating, via the CTR communication network, with one or more targets, the CTR communication network coupled to the build framework, QA processor, the performance processor, packaging processor, and the orchestration engine.
9. The computer readable medium of claim 8, wherein the set of rues is directed to one or more of environment overrides, scheduling, and notifications.
10. The computer readable medium of claim 8, wherein the performance processor performs an automated test generator flow to identify possible inputs for a particular screen generated by the software application.
11. The computer readable medium of claim 10, wherein the performance processor generates an automated test screen hash comprising a plurality of scenarios for a corresponding input.
12. The computer readable medium of claim 11, wherein a test case generator automatically generates test cases based on the automated test screen hash.
13. The computer readable medium of claim 8, where the distributed ledger functionality is Blockchain functionality.
14. The computer readable medium of claim 8, wherein the events are received by an event controller and entitlements are received by the one or more targets.
</claims>
</document>
