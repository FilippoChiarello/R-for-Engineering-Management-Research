<document>

<filing_date>
2018-10-24
</filing_date>

<publication_date>
2020-04-30
</publication_date>

<priority_date>
2018-10-24
</priority_date>

<ipc_classes>
G06F8/41
</ipc_classes>

<assignee>
NOKIA NETWORKS
</assignee>

<inventors>
AIT AOUDIA, FAYÃ‡AL
ENRICI, ANDREA
</inventors>

<docdb_family_id>
64049215
</docdb_family_id>

<title>
METHOD AND APPARATUS FOR DETERMINING COMPILER PARAMETERS SETTINGS
</title>

<abstract>
An apparatus and method for determining compiler parameters settings for program optimization is described. A representation of a program is generated from the program's sources, the representation including data regarding the program in relation to a performance metric. A system including an algorithm having at least some trainable weightsis used to determine compiler parameters from the representation. The system is trained using an exploration strategy which avoids the need for a training set with optimized parameters.
</abstract>

<claims>
1. An apparatus (100, 200) comprising means configured to perform:
generating (110) a representation (120, 220) of a program from the program's sources (130, 230), wherein the representation includes data regarding the program in relation to a performance metric; and
determining (140), using a system including an algorithm having at least some trainable weights, compiler parameters (s) from the representation (120, 220), wherein the compiler parameters (s) are configured such that compiling the program's sources (130, 230) using the compiler parameters (s) produces a program executable (160, 260) optimized with respect to the performance metric.
2. The apparatus of claim 1, wherein the means are further configured to perform:
compiling (150) the program's sources using the compiler parameters (s).
3. The apparatus of claim 1 or 2, wherein the means are further configured to perform:
generating the representation (120, 220) of the program from the program's sources (130, 230) from a compiler, wherein the representation (120, 220) is an intermediate representation.
4. The apparatus of claim 3, wherein:
the representation (120, 220) is at least one representation selected from the list of: memory exclusion graph, control-flow graph, data-flow graph, single static assignment form, and program dependence graph.
5. The apparatus of any preceding claim, wherein:
the performance metric is at least one metric selected from the list of: memory footprint, execution time, processing throughput, and power consumption.
6. The apparatus of any preceding claim, wherein the means are further configured to perform: training (510) of the system, comprising:
providing (512) a plurality of training program sources (230); generating (514) a representation (220) of each training program from each training program's sources (230), wherein the representation includes data regarding that training program in relation to a performance metric;
selecting (516) a set of training program sources at random from the plurality of training program sources (230);
determining (518), using the system, compiler parameters (s) for each training program from the representation of each training program in the set;
compiling (522) each training program in the set from that training program's sources using the determined compiler parameters (s) modified by a perturbation (e);
adjusting (526) the trainable weights of the system using a loss function pertaining to the performance metric.
7. The apparatus of claim 6, wherein the means are further configured to perform training (510) of the system, comprising:
determining (520) a set of perturbations (e), according to a distribution, wherein each training program in the set is compiled using the determined compiler parameters (s) modified by a perturbation (e) in the set of perturbations;
determining (524) a loss value (1) pertaining to the performance metric for each compiled program by benchmarking;
adjusting (526) the trainable weights of the system using a loss function determined from the loss values (1) of the compiled programs in the set.
8. The apparatus of claim 6 or 7, wherein:
the trainable weights of the system are adjusted using stochastic gradient descent or a variant thereof.
9. The apparatus of any preceding claim, wherein the means comprises:
at least one processor (410); and at least one memory (420) including computer program code (430), the at least one memory and computer program code configured to, with the at least one processor, cause the performance of the apparatus.
10. A method (500) comprising :
generating (502) a representation of a program from the program's sources, wherein the representation includes data regarding the program in relation to a performance metric; and
determining (504), using a system including an algorithm having at least some trainable weights, compiler parameters from the representation, wherein the compiler parameters are configured such that compiling the program's sources using the compiler parameters produces a program executable optimized with respect to the performance metric.
11. The method of claim 10, further comprising:
generating (508) the representation of the program from the program's sources using a compiler, wherein the representation is at least one intermediate representation selected from the list of: memory exclusion graph, controlflow graph, data-flow graph, single static assignment form, and program dependence graph.
12. The method of claims 10 or 11, wherein:
the performance metric is at least one metric selected from the list of: memory footprint, execution time, processing throughput, and power consumption.
13. The method of claims 10 to 12, further comprising:
training (510) the system, comprising the steps of:
providing (512) a plurality of training program sources;
generating (514) a representation of each training program from each training program's sources, wherein the representation includes data regarding that training program in relation to a performance metric;
selecting (516) a set of training program sources at random from the plurality of training program sources; determining (518) , using the system, compiler parameters for each training program from the representation of each training program in the set; compiling (522) each training program in the set from that training program's sources using the determined compiler parameters modified by a perturbation;
adjusting (526) the trainable weights of the system using a loss function pertaining to the performance metric.
14. The method of claim 13, wherein training (510) of the system further comprises:
determining (520) a set of perturbations (e), according to a distribution, wherein each training program in the set is compiled using the determined compiler parameters (s) modified by a perturbation (e) in the set of perturbations;
determining (524) a loss value (1) pertaining to the performance metric for each compiled program by benchmarking;
adjusting (526) the trainable weights of the system using a loss function determined from the loss values (1) of the compiled programs in the set.
15. A computer readable storage medium storing instructions which, when executed by a computer, cause the computer to perform a method (500), the method comprising:
generating (502) a representation of a program from the program's sources, wherein the representation includes data regarding the program in relation to a performance metric; and
determining (504), using a system including an algorithm having at least some trainable weights, compiler parameters from the representation, wherein the compiler parameters are configured such that compiling the program's sources using the compiler parameters produced a program executable optimized with respect to the performance metric.
</claims>
</document>
