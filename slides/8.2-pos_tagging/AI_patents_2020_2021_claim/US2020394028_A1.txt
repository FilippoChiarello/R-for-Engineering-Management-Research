<document>

<filing_date>
2019-06-14
</filing_date>

<publication_date>
2020-12-17
</publication_date>

<priority_date>
2019-06-14
</priority_date>

<ipc_classes>
G06F8/52,G06F8/53,G06F9/455
</ipc_classes>

<assignee>
IBM (INTERNATIONAL BUSINESS MACHINES CORPORATION)
</assignee>

<inventors>
SEELAM, SEETHARAMI R.
Byrne, Anthony C.
Nadgowda, Shripad
</inventors>

<docdb_family_id>
73746327
</docdb_family_id>

<title>
IDENTIFICATION OF COMPONENTS USED IN SOFTWARE BINARIES THROUGH APPROXIMATE CONCRETE EXECUTION
</title>

<abstract>
Systems, computer-implemented methods, and computer program products that facilitate identifying computer software vulnerabilities, and more specifically, execute an approximate representation of software to produce a fingerprint are provided. In one example, a system is provided. The system can comprise a memory that stores computer executable components and a processor that executes the computer executable components stored in the memory. The computer executable components can include a filter component and an execution component. The filter component can filter a platform-independent intermediate representation to a filtered representation. The execution component can execute the filtered representation on a virtual machine to produce an output vector which can be used to identify computer software vulnerabilities.
</abstract>

<claims>
1. A system, comprising: a memory that stores computer executable components, and a processor that executes the computer executable components stored in the memory, wherein the computer executable components comprise: a filter component that filters a platform-independent intermediate representation to a filtered representation; and an execution component that executes the filtered representation on a virtual machine to create an output vector.
2. The system of claim 1, further comprising: a disassembler component that disassembles a portion of binary code to disassembled code, wherein the portion of binary code is a function from one or more stripped binaries comprising one or more bounds provided by a function identifier.
3. The system of claim 2, further comprising: a translator component that translates the disassembled code to the platform-independent intermediate representation, wherein the platform-independent intermediate representation is in a meta-assembly language.
4. The system of claim 1, further comprising: a population component that populates a database with the output vector.
5. The system of claim 1, wherein the filter component removes one or more complex instructions from the platform-independent intermediate representation and sorts the platform-independent intermediate representation to make the platform-independent intermediate representation compiler independent, wherein the one or more complex instructions comprise instructions related to control flow, addressing modes, or floating-point operations of the platform-independent intermediate representation.
6. The system of claim 1, further comprising: a virtual machine initializer component that initializes the virtual machine with a pattern of register values and memory values.
7. The system of claim 1, wherein the output vector comprises register values and memory values.
8. A computer-implemented method, comprising: filtering, by a system operatively coupled to a processor, a platform-independent intermediate representation to a filtered representation; and executing, by the system, the filtered representation on a virtual machine to create an output vector.
9. The computer-implemented method of claim 8, further comprising: disassembling, by the system, a portion of binary code to disassembled code, wherein the portion of binary code is a function from one or more stripped binaries comprising one or more bounds provided by a function identifier.
10. The computer-implemented method of claim 9, further comprising: translating, by the system, the disassembled code to the platform-independent intermediate representation, wherein the platform-independent intermediate representation is in a meta-assembly language.
11. The computer-implemented method of claim 8, further comprising: populating, by the system, a database with the output vector.
12. The computer-implemented method of claim 8, wherein the filtering comprises: removing one or more complex instructions from the platform-independent intermediate representation; and sorting the platform-independent intermediate representation to make the platform-independent intermediate representation compiler independent.
13. The computer-implemented method of claim 12, wherein the one or more complex instructions comprise instructions related to control flow, addressing modes, or floating-point operations of the platform-independent intermediate representation.
14. The computer-implemented method of claim 8, further comprising: initializing, by the system, the virtual machine a defined pattern of register values and memory values.
15. The computer-implemented method of claim 8, wherein the output vector comprises register values and memory values.
16. A computer program product for identifying code vulnerabilities, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to: filter, by the processor, a platform-independent intermediate representation to a filtered representation; and execute, by the processor, the filtered representation on a virtual machine to create an output vector.
17. The computer program product of claim 16, wherein the program instructions executable by a processor further cause the processor to disassemble, by the processor, a portion of binary code to disassembled code, wherein the portion of binary code is a function, wherein the function is a function from one or more stripped binaries comprising one or more bounds provided by a function identifier.
18. The computer program product of claim 17, wherein the program instructions executable by a processor further cause the processor to translate, by the processor, the disassembled code to the platform-independent intermediate representation, wherein the platform-independent intermediate representation is in a meta-assembly language.
19. The computer program product of claim 16, wherein the program instructions executable by a processor to further cause the processor to populate, by the processor, a database with the output vector.
20. The computer program product of claim 16, wherein the program instructions executable by a processor to further cause the processor to initialize, by the processor, the virtual machine; and wherein the platform-independent intermediate representation is filtered to a filtered representation by removing one or more complex instructions and sorting the platform-independent intermediate representation wherein the one or more complex instructions are removed to make the platform-independent intermediate representation compiler independent, wherein the one or more complex instructions comprise instructions related to control flow, addressing modes, or floating-point operations of the platform-independent intermediate representation, wherein the virtual machine is initialized with a known pattern of register values and memory values, wherein the output vector comprises register values and memory values.
</claims>
</document>
