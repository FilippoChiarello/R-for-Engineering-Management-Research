<document>

<filing_date>
2019-07-18
</filing_date>

<publication_date>
2020-02-25
</publication_date>

<priority_date>
2019-07-18
</priority_date>

<ipc_classes>
G06F9/46,H04L1/22,H04L29/06,H04L9/00
</ipc_classes>

<assignee>
CAPITAL ONE SERVICES
</assignee>

<inventors>
ALLADI, SRINIVAS
RAOL, RANVIRSINH
NALLABOLU, HARINATH R.
GOVIL, LAVANGANA
HICKS, DAVID J.
</inventors>

<docdb_family_id>
69590630
</docdb_family_id>

<title>
Automatic transaction processing failover
</title>

<abstract>
Transaction authorization systems may include a transaction processor and an authorization server system. The transaction processor obtains transaction requests authorizations for those requests from the authorization server system. The transaction processor may require an authorization be provided within a threshold time; otherwise, the transaction may be processed without authorization. The authorization server system may be hosted using one or more nodes in a distributed system. Degradation of the performance of the distributed system may cause the performance of the authorization server system to fall below the required performance threshold and transactions may not be authorized before automatic processing. Transaction authorization systems may monitor the health of the individual nodes and/or the distributed system and automatically adjust the routing of authorizations based on current and/or future performance degradation. The transaction authorization system may also allocate additional resources and/or reroute authorizations to a separate distributed system to avoid performance degradations.
</abstract>

<claims>
1. A computer-implemented method, comprising: obtaining, by a server system in communication with a set of processing nodes, an authorization request; determining, by the server system, a maximum response time based on the authorization request; transmitting, by the server system and to a first processing node in the set of processing nodes, the authorization request; obtaining, by the server system and from the first processing node, response data based on the authorization request; calculating, by the server system, a first response time associated with generating the response data by the first processing node; obtaining, by the server system, a second authorization request; and when the first response time exceeds the maximum response time: selecting, by the server system, a second processing node from the set of processing nodes, the second processing node being distinct from the first processing node; transmitting, by the server system and to the second processing node, the second authorization request; obtaining, by the server system and from the second processing node, second response data based on the second authorization request; calculating, by the server system, a second response time associated with generating the second response data by the second processing node; and based on determining whether the second response time exceeds the maximum response time: removing the first processing node from the set of processing nodes to which the server system will send future authorization requests when the second response does not exceed the maximum response time; and transmitting the future authorization requests to processing nodes associated with a second set of processing nodes when the second response time exceeds the maximum response time, the second set of processing nodes distinct from the set of processing nodes.
2. The method of claim 1, further comprising: determining, by the server system, a first geographic location associated with the first processing node; and selecting, by the server system, the second processing node based on the second processing node being associated with a second geographic location distinct from the first geographic location.
3. The method of claim 1, further comprising calculating the response time associated with generating the response data by the first processing node by: transmitting, by the server system, to the first processing node, and at a first time, test data via an application programming interface (API) provided by the first processing node; obtaining, by the server system and at a second time, test response data generated based on the test data; and determining the response time based on a difference between the first time and the second time.
4. The method of claim 1, further comprising calculating the response time associated with generating the response data by the first processing node by: transmitting, by the server system and to the first processing node, test data via an application programming interface (API) provided by the first processing node; obtaining, by the server system, test response data generated based on the test data; and determining, by the server system, the response time based on status information of the first processing node indicated in the response data.
5. The method of claim 4, wherein the status information indicates a number of transactions processed by the first processing node in a predetermined time frame.
6. The method of claim 4, wherein the status information indicates a latency for completing a write operation by the first processing node.
7. The method of claim 4, wherein the status information indicates an amount of free memory available in an in-memory data grid shared by each processing node in the set of processing nodes.
8. The method of claim 1, further comprising sending, by the server system, a command message to a controller associated with the set of processing nodes when the response time exceeds the maximum response time, wherein the command message causes the controller to restart the first processing node.
9. The method of claim 1, further comprising sending, by the server system, a command message to a controller associated with the set of processing nodes when the response time exceeds the maximum response time, wherein the command message causes the controller to destroy the first processing node.
10. The method of claim 1, further comprising sending, by the server system, a command message to a controller associated with the set of processing nodes when the response time exceeds the maximum response time, wherein the command message causes the controller to allocate additional processing resources to the first processing node.
11. A system, comprising: a first set of processing nodes; a second set of processing nodes geographically distinct from the first set of processing nodes; and an authorization device comprising one or more processors and memory storing instructions that, when executed by the one or more processors, cause the authorization device to: obtain an authorization request; determine a maximum response metric based on the authorization request; transmit, to a first processing node in the first set of processing nodes, the authorization request; obtain, from the first processing node, response data; calculate a response metric associated with obtaining the response data; obtain a second authorization request; and when the response metric exceeds the maximum response metric: transmit the second authorization request to a second processing node in the second set of processing nodes; generate a command message based on the response metric; and transmit the command message to a controller associated with the first processing node, wherein the command message causes the controller to perform a corrective action.
12. The system of claim 11, wherein the corrective action causes the controller to restart the first processing node.
13. The system of claim 11, wherein the corrective action causes the controller to allocate additional processing resources to the first processing node.
14. The system of claim 11, wherein the instructions, when executed by the one or more processors, further cause the authorization device to calculate the response metric by causing the authorization device to: transmit, at a first time, test data to the first processing node via an application programming interface provided by the first processing node; obtain, at a second time, test response data generated based on the test data; and calculate the response metric based on a difference between the first time and the second time.
15. The system of claim 11, wherein the instructions, when executed by the one or more processors, further cause the authorization device to calculate the response metric by causing the authorization device to: transmit test data to the first processing nodes via an application programming interface provided by the first processing node; obtain test response data generated based on the test data; and determine the response metric based on status information of the first processing node indicated in the test response data.
16. The system of claim 15, wherein the status information indicates a number of transactions processed by the first processing node in a predetermined time frame.
17. A non-transitory machine-readable medium storing instructions that, when executed by one or more processors, cause the one or more processors to perform steps comprising: obtaining an authorization request; determining a performance metric based on the authorization request; determining a set of processing nodes provided by a computing platform; transmitting, to a processing node in the set of processing nodes, the authorization request; obtaining, from the processing node, response data; calculating a response metric associated with obtaining the response data; when the response metric fails to satisfy the performance metric: transmitting, at a first time, test data to the processing node via an application programming interface provided by the processing node; obtaining, at a second time and from the processing node, test response data generated based on the test data; recalculating the response metric based on a difference between the first time and the second time; and when the recalculated response metric fails to satisfy the performance metric, removing the processing node from the set of processing nodes.
18. The non-transitory machine-readable medium of claim 17, wherein the instructions further cause the one or more processors to perform steps comprising: obtaining a second authorization request; and transmitting, to a second processing node in the set of processing nodes, the second authorization request.
19. The non-transitory machine-readable medium of claim 17, wherein the instructions further cause the one or more processors to perform steps comprising: sending a command message to the computing platform when the recalculated response metric exceeds the maximum response metric; and the command message causes the computing platform to restart the processing node.
20. The non-transitory machine-readable medium of claim 17, wherein the instructions further cause the one or more processors to perform steps comprising: sending a command message to the computing platform when the recalculated response metric exceeds the maximum response metric; and the command message causes the computing platform to allocate additional computing resources to the processing node.
</claims>
</document>
